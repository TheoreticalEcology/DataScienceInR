---
output: html_document
editor_options:
  chunk_output_type: console
---

```{r, include=FALSE}
set.seed(42)
```

# Plotting and describing data

### Summary statistics

**Numeric values**

Continuous measurements such as size, weight, time, length, etc.

Typical summary statistics:

-   quantiles (% of data below/over quantile): e.g. median == 50% quantile, 50% of the data below and 50% over

-   Central moments:

    -   First moment: Mean

    -   Second moment: standard deviation, measure of spread

    -   Third moment: skewness, measure of symmetry

    -   Fourth moment: kurtosis, measure of peakedness

```{r}
#| code-fold: true
set.seed(10)
A = scale(exp(rnorm(1000,sd = 0.5)))
hist(A, main = "")
abline(v = quantile(A, probs = c(0.05, 0.5, 0.95)), col = "#AA0366", lwd = 1.4)
text(quantile(A, probs = c(0.05, 0.5, 0.95)), 
     y = 500, labels = c("0.05Q", "0.5Q", "0.95Q"), pos = 3, xpd = NA)
abline(v = mean(A), col = "#AA0366", lwd = 1.4)
text(x = mean(A), y = 530, labels="Mean", pos = 3, xpd = NA)
```

How to calculate them in R:

```{r}
mean(airquality$Temp)
median(airquality$Temp)
min(airquality$Temp)
max(airquality$Temp)
range(airquality$Temp)
var(airquality$Temp)
sd(airquality$Temp)
#the same:
sqrt(var(airquality$Temp))
```

Quantiles and mean:

```{r}
quantile(airquality$Temp)
mean(airquality$Ozone, na.rm = TRUE) #na.rm: removes NAs
```

::: {.callout-tip appearance="default" collapse="true"}
## How to look for NAs

How to look for NA values:

```{r}
airquality[is.na(airquality$Ozone),] 
# or
summary(airquality)
```
:::

We can visualize variables with two plots, a histogram and boxplot:

```{r}
hist(airquality$Temp)
boxplot(airquality$Temp)
```

In a box plot, the box ranges from 0.25 to 0.75 quantiles (the interquartile range, IQR), with the median as the thick line in the box. The whiskers (the other two vertical lines) are either the min/max values or the distance to 1.5\*IQR (and points outside this range are considered outliers).

**Categorical data**

How often do different events occur?

```{r}
table(mtcars$gear)
```

**Numeric with categorical**

We can also calculate summary statistics per level of a categorical variable for a numerical variable of interest. We can do with base R but it is easier with the `dplyr` package:

```{r}
library(dplyr) # uses tidyverse syntax

air_grouped <- airquality %>% # define dataset to be summarised
  group_by(Month) %>% # define grouping factor (note that you don't need to tell which dataset to look in here (no $))
  summarise(meanwind = mean(Wind), 
            meansolar = mean(Solar.R), 
            maxOzone = max(Ozone), 
            varTemp = var(Temp)) # define which summary statistics you want to be calculated
air_grouped
```

::: {.callout-note appearance="default" collapse="true"}
## dplyr and tidyverse

The `dplyr` package is part of a big software environment called tidyverse. Unique features of the tidyverse are the pipe `%>%` operator and `tibble` objects.

-   The `%>%` operator:

    Applying several functions in sequence on an object often results in uncountable/confusing number of round brackets:

    ```{r}
    max(mean(range(c(5, 3, 2, 1))))
    ```

    The pipe operator simplifies that by saying "apply the next function on the result of the current function":

    ```{r}
    c(5, 3, 2, 1) %>% range %>% mean %>% max
    ```

    Which is easier to write, read, and to understand!

-   `tibble` objects are just an extension of data.frames. In the course we will use mostly data.frames, so it is better to transform the tibbles back to data.frames:

    ```{r}
    class(air_grouped)
    air_grouped = as.data.frame(air_grouped)
    class(air_grouped)
    ```
:::

### Visualizations for two variables

| Scenario                     | Which plot                    | R command                                                                     |
|------------------------|------------------------|------------------------|
| Numeric                      | Histogram or boxplot          | `hist()` and`boxplot`                                                         |
| Numeric with numeric         | Scatterplot                   | `plot`                                                                        |
| Numeric with categorical     | Boxplot                       | `boxplot(numeric~categorical)`                                                |
| Categorical with categorical | mosaicplot or grouped barplot | `mosaicplot(table(categorical, categorical))` or `barplot(data, beside=TRUE)` |

#### Examples

```{r}

# 1 categorial variable --------------------------------------------------

str(mtcars)

counts = table(mtcars$cyl)

# barplot
plot(counts)
barplot(counts)
barplot(table(mtcars$cyl))
```

The general idea of plotting is to look for correlations / associations between variables, i.e. is there a non-random pattern between the two variables:

```{r}
# 2 caterogial variables --------------------------------------------------
# mosaic plot
table(cyl = mtcars$cyl, gear = mtcars$gear)
plot(table(mtcars$cyl, mtcars$gear))

# 1 categorial + 1 numeric variable ---------------------------------------
# Boxplot
boxplot(mpg ~ cyl, mtcars) # formula notation
#or the same:
plot(mpg ~ as.factor(cyl), mtcars)
```

```{r}
# 1 numeric + 1 numeric variable ---------------------------------------

# Scatterplot
plot(airquality$Solar.R, airquality$Ozone)
plot(Ozone ~ Solar.R, data = airquality)#the same

# different symbol for each month
plot(Ozone ~ Solar.R, data = airquality, pch = Month)

# color depends on the month, size on Wind
plot(Ozone ~ Solar.R, data = airquality, col = Month, cex = Wind/5)

# low-level plotting functions 
# only add something to an existing plots: points() lines() etc.
points(200, 150, pch = 16)
abline(h = 50)

# combining two plots
oldPar = par(mfrow = c(1,2)) # c(number of rows, number of colums)
# you can also specify various other plot characteristics, see ?par

hist(airquality$Temp, breaks = 20, col = "#FF0099",
     main = "Temperaturverteilung",
     xlab = "Temperatur")
plot(airquality$Solar.R, airquality$Ozone, col = airquality$Month-4, cex = airquality$Wind/5)

# restore old par settings
par(oldPar)

```

### Correlation

If two variables A and B are related, we say that they are correlated (correlation != causality!!). We can calculate the magnitude of this relatedness with correlation factors. Correlation factors are normalized covariances (two variables have two variances, how they vary independent of each other, and they share a covariance, how much they vary together) are in the range of $[-1,1]$. The Pearson's correlation coefficient/factor can be calculated by:

$$
r = cor(x_1, x_2) = \frac{ \frac{1}{N} \sum_{i=1}^n (x_{1i} - \overline{x_{1}}) (x_{2i} - \overline{x_{2}}) }{ \sqrt{\frac{1}{N} \sum_{i=1}^n (x_{1i} - \overline{x_{1}})^2 (x_{2i} - \overline{x_{2}})^2} } 
$$

The Pearson correlation works well with linear relationship, but poorly with non-linear relationships and is sensitive to outliers. Also transforming one of the variables affects the correlation:

```{r}
#| code-fold: true
A = runif(1000, -6, 6)
B = plogis(A*3.5)
par(mfrow = c(1, 2))
plot(B, A)
text(x = 0.6, y = -4, paste0("Pearson: ", round(cor(A, B, method = "pearson"), 3)))
plot(log(B), A)
text(x = -12, y = 0, paste0("Pearson: ", round(cor(A, log(B), method = "pearson"), 3)))
```

The correlation factor for the untransformed data is 0.9 but they have a perfect relationship.

**Rank correlation factors**

Idea: Arranging the data following their order and using their rank 1\...n for x und y, respectively. There two different rank correlation factors:

-   Spearman: calculate Pearson based on ranks

-   Kendall: counts the number of data pairs that point in the same direction

```{r}
cor(A, B)
cor(order(A), order(B)) # Spearman
cor(A, B, method = "spearman") # Spearman
cor(A, B, method = "kendall")
```

**Example:**

```{r}
#| warning: false
cor(airquality$Solar.R, airquality$Ozone, use = "complete.obs") # pearson = default
cor(airquality$Solar.R, airquality$Ozone, use = "complete.obs", method = "spearman")

# pairs plot: correlates all variables to each other
plot(airquality)
pairs(airquality) #the same

# you can change what is plotted in upper and lower panel:
# copy function from help
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y, use = "complete.obs")) ### complete.obs must be added manually
  txt <- format(c(r, 0.123456789), digits = digits)[1]
  txt <- paste0(prefix, txt)
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(airquality, lower.panel = panel.smooth, upper.panel = panel.cor)

```

::: {.callout-warning appearance="default"}
Descriptive statistics characterize properties of the data without providing any test or statement of probability.
:::

## Exercises

```{r libraries, include=FALSE}
library(EcoData)
library(grDevices)
```

In this exercise you will practice:

-   creating and plotting contingency tables for categorical variables (mosaicplot)
-   plotting a numerical variable (histogram)
-   plotting two numerical variables against each other (scatterplot)
-   calculating correlations

To perform this exercise use the help of the according functions. Also have a look at the examples at the bottom of the help page. You can obtain help for a specific function in several ways:

-   select the function in your script (e.g. double click it or simply place the cursor in the word) and press F1
-   "?" + function name (e.g. ?hist) and execute
-   go to the "help" panel (below the environment) and search for the function

Let's get started!

### Contingency tables

Here, we will have a look at the data set "arthritis" from the "EcoData" package. The study was conducted as a double-blind clinical trial investigating a new treatment against arthritis. The improvement was measured as a categorical variable with the possible outcomes "Improved", "Some" or "None".

Install and then load the package "EcoData" and have a look at the data using the *View()* function. This will open a new tab next to your R script. To return to your script, close the new tab or click on your script.

```{r, eval=FALSE}
library(EcoData)
View(arthritis)

# Get the data
dat <- arthritis

# Coerce columns ’Improved' and 'Treatment' to (ordered) factors
# (When the factor is ordered, other functions like table() and barplot() will use this order.
# Otherwise, the levels will be ordered alphabetically.)
dat$Improved <- factor(dat$Improved, levels = c("None","Some","Marked"), ordered = TRUE)
dat$Treatment <- as.factor(dat$Treatment)
str(dat)

```

An important function for categorical data is *table()*. It produces a contingency table counting the occurrences of the different categories of one variable or of each combination of the categories of two (or more) variables.

We are curious how many patients actually improved in the study and how this is influenced by the treatment. To show this graphically, we produced two plots (see below) using the following functions:

-   *table()*
-   *plot()* and *barplot()*
-   (*str()*)
-   (*summary()*)

Your task is now to reconstruct the two plots shown below by using these functions.

```{r, echo = FALSE}
counts <- table(dat$Improved)  # create a table which gives you counts of the three categories in the "Improved" variable

barplot(counts,            # create a barplot of your table
        ylim = c(0,50),    # change the limits of your y axis: starting from zero to 50
        xlab = "Improved",  # add a label to your x axis
        ylab = "Frequency")  # add a label to your y axis
```

**Hints for plot 1**

What kind of plot is shown here? How many variables are shown in the plot? Approach: First, create a new object consisting of the table of the variable of interest. Then use this object for plotting. Changing plot elements: Have a look at the help of the plotting-function to find out how to change the y- and x-axis labels. What do you notice on the y-axis? You can change the limits of the y-axis using "ylim = c(from, to)" as an argument in the plotting function.

```{r, echo = FALSE}
Ratios <- table(Improved = dat$Improved, Treatment = dat$Treatment)
plot(Ratios)
```

**Hints for plot 2**

What kind of plot can you see here? How many variables does it show? To plot this you need to create a contingency table with the variables of interest. Changing plot elements: You can name the variables in your contingency table (e.g. name = variable, othername = othervariable). The name you assign to your table will be used as the title in the plot.

What do you think of the study now? Could you already draw conclusions from this plot? Provide your answer to the last question on **elearning-extern** [("02_Test for Exercise in R")](https://elearning.uni-regensburg.de/mod/quiz/view.php?id=2046676).

::: {.callout-tip collapse="true" appearance="minimal" icon="false"}
#### Solution

Plot 1

```{r barplot of table, message=FALSE}
counts <- table(dat$Improved)  # create a table which gives you counts of the three categories in the "Improved" variable

barplot(counts,            # create a barplot of your table
        ylim = c(0,50),    # change the limits of your y axis: starting from zero to 50
        xlab = "Improved",  # add a label to your x axis
        ylab = "Frequency")  # add a label to your y axis
```

Plot 2

```{r mosaic plot of table}
Ratios <- table(Improved = dat$Improved, Treatment = dat$Treatment)  # create a table with the assigned name "ratios", give the name "Improved" to the first variable which is the variable Improved from the data set Arthritis, give the name "Treatment" to the second variable which is the variable Treatment from the data set Arthritis
plot(Ratios)  # create a plot of the table "ratios"
```

To view the tables with the names "counts" and "Ratios" you can simply execute their names:

```{r}
counts
Ratios
```

*Could you already draw conclusions from this plot?*
No, because this is only a descriptive plot. You can say that a large proportion of the patients that got a placebo treatment did not improve while a large proportion of the patients that got the new treatment improved markedly. However, this could also be the result of random variation and sampling. We need inferential statistics to make conclusions about the effectiveness of the treatment.
:::

### Histogram

Now let's have a look at the "birdabundance" dataset, which is in the "EcoData" package. This is not stored at CRAN (the official platform for R packages, but at github where we host our own code collections). If you haven't done this yet, use the code below to install the package (note that you also need the "devtools" package to do this. Again, to load it and make the data set accessible, execute the function *library(EcoData)*. To view the data set you can use the *View()* function again.

You can also get more explanations on the data set via the help.

```{r, eval=FALSE}
install.packages("devtools")
library(devtools)
devtools::install_github(repo = "TheoreticalEcology/EcoData", dependencies = T, build_vignettes = T)
library(EcoData)
View(birdabundance)
```

The dataset has been assessed by scientists in Australia who counted birds in forest fragments and looked for drivers that influence these bird abundances, e.g. the size of a forest fragment and the distance to the next fragment. We want to see how these distances vary. A histogram is the standard figure to depict one numerical variable, such as for example distance measurements.

Your task is now to reconstruct the following histogram including the labels, colors and lines using the functions:

-   *hist()* to create a histogram
-   *abline()* to add (vertical) lines to your histogram

Think about what the histogram tells you about the distances between each forest fragment and the next forest fragment. What do the red and purple lines represent? Which site was the furthest away from forest fragments? Give your answer on **elearning-extern**.

```{r histogram, echo=FALSE}
hist(birdabundance$DIST,  # plot a histogram of the varriable distance from the data set birdabundance
     breaks = 20,  # change bar widths, here we make them smaller
     col = "blue",  # change color to blue
     ylim = c(0,20),  # change the range of the y axis to from 0 to 20
     main = "Distance distribution",  # change title of the plot
     xlab = "Distance to the next forest fragment")  # change x axis name
abline(v = mean(birdabundance$DIST), col = "red")  # add a vertical line with an x value equal to the mean of the variable distance
abline(v = median(birdabundance$DIST), col = "purple")  # add a vertical line with an x value equal to the median of the variable distance
```

**Hints for plotting**

Change the color (look at the help to see how). You can also try other colors, e.g. your favorite color (you can find all available colors with the function *colors()*). Change the bar widths (breaks). Play around to see how they change. When changing the bar widths, what do you notice on the y-axis? You can change the y-axis limits using "ylim" (see examples for *hist()*, second last line). Change the title and the x-axis name of your histogram using the arguments "main" and "xlab".

To add the lines, try the *abline()* function with the argument "v = 90" and look what happens. To remove the line, you have to execute the code producing your histogram again. Remember that *abline()* is a low level plotting function, which means it only adds an element to an existing plot! Instead of calculating the depicted values with a function and then pasting the values into your abline function, you can also directly use the function in *abline()*.\
See an *example* here:

```{r abline example code}
hist(airquality$Temp)
abline(v = 90, col = "blue")
abline(v = median(airquality$Temp), col = "red")
```

::: {.callout-tip collapse="true" appearance="minimal" icon="false"}
#### Solution

You can plot the histogram like this:

```{r}
hist(birdabundance$DIST,  # plot a histogram of the varriable distance from the data set birdabundance
     breaks = 20,  # change bar widths, here we make them smaller
     col = "blue",  # change color to blue
     ylim = c(0,20),  # change the range of the y axis to from 0 to 20
     main = "Distance distribution",  # change title of the plot
     xlab = "Distance to the next forest fragment")  # change x axis name
abline(v = mean(birdabundance$DIST), col = "red")  # add a vertical line with an x value equal to the mean of the variable distance
abline(v = median(birdabundance$DIST), col = "purple")  # add a vertical line with an x value equal to the median of the variable distance
```

*What do the red and purple lines represent?*

The red line represents the mean distance between forest fragments, while the purple line represents the median.

*Which site was the furthest away from forest fragments?*

```{r}
# Extract the line in which the variable DIST takes its maximum
birdabundance[which.max(birdabundance$DIST),]
```

The site number 48 was the furthest away.
:::

### Scatterplot

As you've learned by now, *plot()* can create different types of plots depending on the type of the input data. It creates a scatterplot when plotting two numerical variables. Now we are interested to see how the abundance of birds is affected by the distance to the next forest fragment, and if there is another variable that is important for this relationship (visualized here by the color of the points).

Again, your task is to reconstruct the following plot using the following functions:

-   *plot()*
-   (*str()*)
-   (*summary()*)

What do you notice about the distribution of the colors along bird abundance?

What is the mean bird abundance per color?

```{r, echo = FALSE}
#Create a function to generate a continuous color palette from red to blue
rbPal <- colorRampPalette(c('red','blue')) # rpPal for red to blue palette

plot(ABUND ~ DIST, data = birdabundance,  # create a plot of the variables DIST against ABUND from the data set birdabundance
     xlab = "Distance (m)",  # add the label "Distance" to the x axis
     ylab = "Bird abundance",  # add the label "Bird abundance" to the y axis
     col = rbPal(5)[GRAZE],  # color the data points according to their category in the variable GRAZE as a gradient
     pch = 17) # change the point shape
```

**Hints for plotting:**

What is plotted on the x-axis, what on the y-axis?\
There are two different ways to write the plot function. One is to stick with the "Usage" in the help of the plot function (giving coordinates along the x-axis as the first attribute and those along the y-axis as the second attribute). The other way is to write the relationship between x and y as a formula that is: "y\~x, data = dataset" Use google to find out how you can change the point shapes in your plot.

Look at the dataset to find out which variable is indicated by the color of the points in the plot. Hint: It is a variable indicating 5 intensity levels. To change the color, include the attribute "col" in your plot function and set it equal to the variable.\
To get a color gradient you can create a function with the following code. Apply it before producing your plot and use the created function *rbPal()* as the color in the plot.

```{r, eval = F}
# Palettes can be created with a function for the grDevices package
install.packages("grDevices")
library(grDevices)

# Create a function to generate a continuous color palette from red to blue
rbPal <- colorRampPalette(c('red','blue'))

# Example for color in a plot
plot(Ozone ~ Solar.R, data = airquality, 
     col = rbPal(12)[Month]) # you can use any number, here it's 12 because we have 12 months
```

::: {.callout-tip collapse="true" appearance="minimal" icon="false"}
#### Solution

You can either create a scatterplot of two numerical variables like this:

```{r}
#Create a function to generate a continuous color palette from red to blue
rbPal <- colorRampPalette(c('red','blue')) # rpPal for red to blue palette

plot(birdabundance$DIST, birdabundance$ABUND,  # create a plot of the variables DIST against ABUND from the data set birdabundance
     ylab = "Distance (m)",  # add the label "Distance" to the y axis
     xlab = "Bird abundance",  # add the label "Bird abundance" to the x axis
     col = rbPal(5)[birdabundance$GRAZE],  # color the data points according to their category in the variable GRAZE from the data set birdabundance
     pch = 17) # change the point shape
```

Or like this:

```{r}
plot(ABUND ~ DIST, data = birdabundance,  # create a plot of the variables DIST against ABUND from the data set birdabundance
     xlab = "Distance (m)",  # add the label "Distance" to the x axis
     ylab = "Bird abundance",  # add the label "Bird abundance" to the y axis
     col = rbPal(5)[GRAZE],  # color the data points according to their category in the variable GRAZE as a gradient
     pch = 17) # change the point shape
```

The advantage of the second version is that it uses the structure of "response variable (y) explained by (\~) explanatory variable (x)". Also, you tell the plot function which data set to use once and it will automatically draw the variables from there, while in the first version you name the data set and the respective variable each time (even for the color).

*What do you notice about the distribution of the colors along bird abundance?*

You can see that the blue data points are only at the low abundances, whereas the red data points are rather at the higher abundances. Purple data points are throughout all abundances. There thus seems to be a correlation between the grazing classes and bird abundances.

What is the mean bird abundance per color / level of grazing intensity?

```{r}
# Option 1: Using tidyverse / dplyr as shown at the end of section 2.0.1 Summary statistics:
library(dplyr)
bird_grouped <- birdabundance %>% # define dataset to be summarized
  group_by(GRAZE) %>% # define grouping factor
  summarise(mean.abund = mean(ABUND)) # summarize by taking the mean of abundance

# Option 2: Using base R and formula notation:
bird_grouped <- aggregate(ABUND~GRAZE, data = birdabundance, FUN = mean)

bird_grouped
```
:::

### Correlation

In the previous plot on bird abundance you've seen three variables. Now we want to know, how they are correlated with each other. Remember that we can use the function *cor()* to calculate correlations. Which of the following correlation coefficients (Pearson) belongs to which variable pair? Can you see these correlations in your previous plot?

```{r, echo = FALSE}
cor(birdabundance$ABUND, birdabundance$DIST); cor(birdabundance$ABUND, birdabundance$GRAZE); cor(birdabundance$GRAZE, birdabundance$DIST)
```

Give your answer to the second last question on **elearning-extern**. Think about the meaning of the correlation values (positive/negative, strength). Is it what you would have expected by looking at the plot?

::: {.callout-tip collapse="true" appearance="minimal" icon="false"}
#### Solution

```{r}
cor(birdabundance$ABUND, birdabundance$DIST)
cor(birdabundance$ABUND, birdabundance$GRAZE)
cor(birdabundance$GRAZE, birdabundance$DIST)
```

The first correlation (abundance to distance) tells us that there is a small positive correlation between the two variables, but it does not tell us whether it is significant or not. We will properly test such relationships later in the course. In the scatter plot we have seen this weak positive correlation already. The second correlation (abundance to grazing) tells us that there is a stronger negative correlation between abundance and grazing. We have already seen a pattern of the color of the data points along bird abundances (red towards higher, blue towards lower abundances). The third correlation (grazing to distance) tells us that there is a small negative correlation between the two variables. However, the color pattern along distance is not as obvious as for abundance.
:::
