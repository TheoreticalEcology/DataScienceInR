[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Data Science with R",
    "section": "",
    "text": "Preface\nMaterial for a introductory 1-week course in Data Science, taught at the University of Regensburg.\nDay 1: Getting started with R and descriptive statistics\nDay 2: Graphics and statistical inference\nDay 3: Hypthesis testing and linear regression (simple, multiple)\nDay 4: Generalised linear models (GLM) and multivariate statistics\nDay 5: Data science skills, data analysis projects workflow, and predictive modeling\nLink to the UR GRIPS course here (requires UR account)",
    "crumbs": [
      "Preface"
    ]
  },
  {
<<<<<<< Updated upstream
    "objectID": "0-Introduction.html",
    "href": "0-Introduction.html",
=======
    "objectID": "4-SimpleRegression.html#maximum-likelihood-estimator",
    "href": "4-SimpleRegression.html#maximum-likelihood-estimator",
    "title": "7  Simple linear regression",
    "section": "7.1 Maximum Likelihood Estimator",
    "text": "7.1 Maximum Likelihood Estimator\n\\(likelihood = P(D|model, parameter)\\)\nThe likelihood is the probability to observe the Data given a certain model (which is described by its parameter).\nIt is an approach to optimize a model/parameter to find the set of parameters that describes best the observed data.\nA simple example, we want to estimate the average of random vectors and we assume that our model is a normal distribution (so we assume that the data originated from a normal distribution). We want to optimize the two parameters that describe a normal distribution: the mean, and the sd:\n\nXobs = rnorm(100, sd = 1.0)\n# Now we assume that mean = 0, and sd = 0.2 are unknown but we want to find them, let's write the likelihood function:\nlikelihood = function(par) { # we give two parameters, mean and sd\n  lls = dnorm(Xobs, mean = par[1], sd = par[2], log = TRUE) # calculate for each observation to observe the data given our model\n  # we use the logLikilihood for numerical reasons\n  return(sum(lls))\n}\n\nlikelihood(c(0, 0.2))\n## [1] -1274.247\n# let's try all values of sd:\nlikelihood_mean = function(p) likelihood(c(p, 1.0))\nplot(seq(-5, 5.0, length.out = 100), sapply(seq(-5, 5.0, length.out = 100), likelihood_mean), xlab = 'Different mean values', ylab = \"negative logLikelihood\")\n\n\n\n\n# The optimum is at 0, which corresponds to our mean we used to sample Xobs\n\nHowever it is tedious to try all values manually to find the best value, especially if we have to optimize several values. For that we can use an optimizer in R which finds for us the best set of parameters:\n\nopt = optim(c(0.0, 1.0), fn = function(par) -likelihood(par), hessian = TRUE )\n\nWe can use the shape of the likelihood to calculate standard errors for our estimates:\n\nst_errors = sqrt(diag(solve(opt$hessian)))\n\nWith that we can calculate the confidence interval for our estimates. When the estimator is repeatedly used, 95% of the calculated confidence intervals will include the true value!\n\ncbind(opt$par-1.96*st_errors, opt$par+1.96*st_errors)\n##            [,1]      [,2]\n## [1,] -0.1706372 0.2355346\n## [2,]  0.8925465 1.1797585\n\nIn short, if we would do a t.test for our Xobs (to test whether the mean is stat. significant different from zero), the test would be non significant, and a strong indicator for that is when the 0 is within the confidence interval. Let’s compare our CI to the one calculated by the t-test:\n\nt.test(Xobs)\n## \n##  One Sample t-test\n## \n## data:  Xobs\n## t = 0.31224, df = 99, p-value = 0.7555\n## alternative hypothesis: true mean is not equal to 0\n## 95 percent confidence interval:\n##  -0.1741130  0.2391426\n## sample estimates:\n##  mean of x \n## 0.03251482\n\nAlmost the same! The t-test also calculates the MLE to get the standard error and the confidence interval."
  },
  {
    "objectID": "4-SimpleRegression.html#the-theory-of-linear-regression",
    "href": "4-SimpleRegression.html#the-theory-of-linear-regression",
    "title": "7  Simple linear regression",
    "section": "7.2 The theory of linear regression",
    "text": "7.2 The theory of linear regression\nIf we want to test for an association between two continuous variables, we can calculate the correlation between the two - and with the cor.test function we can test even for significance. But, the correlation doesn’t report the magnitude, the strength, of the effect:\n\nX = runif(100)\npar(mfrow = c(1,1))\nplot(X, 0.5*X, ylim = c(0, 1), type = \"p\", pch = 15, col = \"red\", xlab = \"X\", ylab = \"Y\")\npoints(X, 1.0*X, ylim = c(0, 1), type = \"p\", pch = 15, col = \"blue\", xlab = \"X\", ylab = \"Y\")\n\n\n\ncor(X, 0.5*X)\n## [1] 1\ncor(X, 1.0*X)\n## [1] 1\n\nBoth have a correlation factor of 1.0! But we see clearly that the blue line has an stronger effect on Y then the red line.\nSolution: Linear regression models\nThey describe the relationship between a dependent variable and one or more explanatory variables:\n\\[\ny = a_0 +a_1*x\n\\]\n(x = explanatory variable; y = dependent variable; a0=intercept; a1= slope)\nExamples:\n\nplot(X, 0.5*X, ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 0.5*X, col = \"red\", type = \"l\", lwd = 1.5)\npoints(X, 1.0*X, ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 1.0*X, ylim = c(0, 1), type = \"l\", pch = 16, col = \"blue\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\nlegend(\"topleft\", col = c(\"red\", \"blue\"), lty = 1,legend = c('Y = 0.5*X+0', 'Y = 1.0**X+0'))\n\n\n\n\nWe can get the parameters (slope and intercept) with the MLE. However, we need first to make another assumptions, usually the model line doesn’t perfectly the data because there is an observational error on Y, so the points scatter around the line:\n\nplot(X, 0.5*X+rnorm(100, sd = 0.05), ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 0.5*X, col = \"red\", type = \"l\", lwd = 1.5)\npoints(X, 1.0*X+rnorm(100, sd = 0.05), ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 1.0*X, ylim = c(0, 1), type = \"l\", pch = 16, col = \"blue\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\nlegend(\"topleft\", col = c(\"red\", \"blue\"), lty = 1,legend = c('Y = 0.5*X+0', 'Y = 1.0**X+0'))\n\n\n\n\nAnd the model extends to:\n\\[\ny = a_0 + a_1*x +\\epsilon, \\epsilon \\sim N(0, sd)\n\\]\nWhich we can also rewrite into:\n\\[\ny = N(a_0 + a_1*x, sd)\n\\]\nWhich is very similar to our previous MLE, right? The only difference is now that the mean depends now on x, let’s optimize it again:\n\nXobs = rnorm(100, sd = 1.0)\nY = Xobs + rnorm(100,sd = 0.2)\nlikelihood = function(par) { # three parameters now\n  lls = dnorm(Y, mean = Xobs*par[2]+par[1], sd = par[3], log = TRUE) # calculate for each observation the probability to observe the data given our model\n  # we use the logLikilihood because of numerical reasons\n  return(sum(lls))\n}\n\nlikelihood(c(0, 0, 0.2))\n## [1] -1162.229\nopt = optim(c(0.0, 0.0, 1.0), fn = function(par) -likelihood(par), hessian = TRUE )\n\nopt$par\n## [1] 0.002927292 0.997608527 0.216189328\n\nOur true parameters are 0.0 for the intercept, 1.0 for the slope, and 0.22 for the sd of the observational error.\nNow, we want to test whether the effect (slope) is statistically significant different from 0:\n\ncalculate standard error\ncalculate t-statistic\ncalculate p-value\n\n\nst_errors = sqrt(diag(solve(opt$hessian)))\nst_errors[2]\n## [1] 0.02226489\nt_statistic = opt$par[2] / st_errors[2]\npt(t_statistic, df = 100-3, lower.tail = FALSE)*2\n## [1] 1.264962e-66\n\nThe p-value is smaller than \\(\\alpha\\), so the effect is significant! However, it would be tedious to do that always by hand, and because it is probably one of the most used analysis, there’s a function for it in R:\n\nmodel = lm(Y~Xobs) # 1. Get estimates, MLE\nmodel\n## \n## Call:\n## lm(formula = Y ~ Xobs)\n## \n## Coefficients:\n## (Intercept)         Xobs  \n##    0.002927     0.997569\nsummary(model) # 2. Calculate standard errors, CI, and p-values\n## \n## Call:\n## lm(formula = Y ~ Xobs)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.49919 -0.13197 -0.01336  0.14239  0.64505 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 0.002927   0.021838   0.134    0.894    \n## Xobs        0.997569   0.022490  44.355   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.2184 on 98 degrees of freedom\n## Multiple R-squared:  0.9526, Adjusted R-squared:  0.9521 \n## F-statistic:  1967 on 1 and 98 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "4-SimpleRegression.html#sec-lm",
    "href": "4-SimpleRegression.html#sec-lm",
    "title": "7  Simple linear regression",
    "section": "7.3 Understanding the linear regression",
    "text": "7.3 Understanding the linear regression\n\nBesides the MLE, there are also several tests in a regression. The most important are\n\nsignificance of each parameter. \u000bt-test: H0 = variable has no effect, that means the estimator for the parameter is 0\u000b\nsignificance of the model. \u000bF-test: H0 = none of the explanatory variables has an effect, that means all estimators are 0\n\nExample:\n\npairs(airquality)\n\n\n\n# first think about what is explanatory / predictor \n# and what is the dependent variable (e.g. in Ozone and Temp)\n\n# par(mfrow = c(1, 1))\nplot(Ozone ~ Temp, data = airquality)\n\n\n\nfit1 = lm(Ozone ~ Temp, data = airquality)\nsummary(fit1)\n## \n## Call:\n## lm(formula = Ozone ~ Temp, data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.729 -17.409  -0.587  11.306 118.271 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -146.9955    18.2872  -8.038 9.37e-13 ***\n## Temp           2.4287     0.2331  10.418  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 23.71 on 114 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.4877, Adjusted R-squared:  0.4832 \n## F-statistic: 108.5 on 1 and 114 DF,  p-value: &lt; 2.2e-16\n# gives a negative values for the intercept = negative Ozone levels when Temp = 0\n# this does not make sense (&gt;extrapolation)\n\n# we can also fit a model without intercept, \n# without means: intercept = 0; y = a*x \n# although this doesn't make much sense here\nfit2 = lm(Ozone ~ Temp - 1, data = airquality)\nsummary(fit2)\n## \n## Call:\n## lm(formula = Ozone ~ Temp - 1, data = airquality)\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## -38.47 -23.26 -12.46  15.15 121.96 \n## \n## Coefficients:\n##      Estimate Std. Error t value Pr(&gt;|t|)    \n## Temp  0.56838    0.03498   16.25   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 29.55 on 115 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.6966, Adjusted R-squared:  0.6939 \n## F-statistic:   264 on 1 and 115 DF,  p-value: &lt; 2.2e-16\n\nplot(Ozone ~ Temp, data = airquality, xlim = c(0,100), ylim = c(-150, 150))\nabline(fit1, col = \"green\")\nabline(fit2, col = \"red\", lty = 2)\n\n\n\n\n# there is no need to check normality of Ozone\nhist(airquality$Ozone) # this is not normal, and that's no problem !\n\n\n\n\n\n7.3.1 Model diagnostics\nThe regression optimizes the parameters under the condition that the model is correct (e.g. there is really a linear relationship). If the model is not specified correctly, the parameter values are still estimated - to the best of the model’s ability, but the result will be misleading, e.g. p-values and effect sizes\nWhat could be wrong:\n\nthe distribution (e.g. error not normal)\nthe shape of the relationship between explanatory variable and dependent variable (e.g., could be non-linear)\n\nThe model’s assumptions must always be checked!\nWe can check the model by looking at the residuals (which are predicted - observed values) which should be normally distributed and should show no patterns:\n\nX = runif(50)\nY = X + rnorm(50, sd = 0.2)\nfit = lm(Y~X)\npar(mfrow = c(1, 3))\nplot(X, Y)\nabline(fit, col = \"red\")\nplot(X, predict(fit) - Y, ylab = \"Residuals\")\nabline(h = 0, col = \"red\")\nhist(predict(fit) - Y, main = \"\", xlab = \"Residuals\")\n\n\n\npar(mfrow = c(1,1))\n\nThe residuals should match the model assumptions. For linear regression:\n\nnormal distribution\nconstant variance\nindependence of the data points\n\nExample:\n\nfit1 = lm(Ozone~Temp, data = airquality)\nresiduals(fit1)\n##           1           2           3           4           6           7 \n##  25.2723695   8.1288530 -20.7285536  14.4158861  14.7010729  12.1297762 \n##           8           9          11          12          13          14 \n##  22.7019960   6.8445894 -25.7285536  -4.5850371  -2.2989271  -4.1563338 \n##          15          16          17          18          19          20 \n##  24.1306993   5.5584795  20.7010729  14.5594026  11.8436662   7.4158861 \n##          21          22          23          24          28          29 \n##   4.7019960 -19.2998503   2.8445894  30.8445894   7.2723695  -4.7294767 \n##          30          31          38          40          41          44 \n##  70.1279299  -0.5859602 -23.1581800  -0.5878065 -25.3016966 -29.1581800 \n##          47          48          49          50          51          62 \n## -19.0146635   9.1288530   9.1297762 -18.2998503 -24.5859602  77.9844134 \n##          63          64          66          67          68          69 \n## -10.4442899 -17.7294767   9.4131167 -14.5868833  10.2696001  20.5547869 \n##          70          71          73          74          76          77 \n##  20.5547869  15.8408968 -20.2998503 -22.7294767 -40.3007734  -1.7294767 \n##          78          79          80          81          82          85 \n## -17.1581800   3.9844134  14.6983034   3.5557101 -16.7285536  18.1270068 \n##          86          87          88          89          90          91 \n##  48.5557101 -32.1581800  -9.8729932  15.2696001 -11.8729932   9.4131167 \n##          92          93          94          95          96          97 \n##   9.2705233 -10.7294767 -40.7294767 -36.1581800  16.1270068 -24.4442899 \n##          98          99         100         101         104         105 \n##   1.6983034  52.8408968  17.4121935  38.4121935 -17.8729932 -24.1581800 \n##         106         108         109         110         111         112 \n##  17.6992266 -18.0146635  14.1279299 -14.5859602 -11.4433668   1.5566332 \n##         113         114         116         117         118         120 \n## -19.0146635 -18.8711470   0.1279299 118.2705233  11.1270068 -12.5887296 \n##         121         122         123         124         125         126 \n##  36.6973803  -2.1600263   3.6973803  21.9834902   1.5547869  -5.8739164 \n##         127         128         129         130         131         132 \n##  12.1260836 -17.3016966 -25.0155866 -27.3007734 -19.4433668 -14.1572569 \n##         133         134         135         136         137         138 \n##  -6.2998503  -5.7294767 -16.5859602 -12.0146635 -16.4424437 -12.4424437 \n##         139         140         141         142         143         144 \n##   3.5566332   2.2723695 -24.5859602   5.8436662 -36.1581800   4.5584795 \n##         145         146         147         148         149         151 \n##  -2.4424437 -13.7294767 -13.5850371   7.9871828   6.9862596 -21.1572569 \n##         152         153 \n## -19.5859602   1.8436662\nhist(residuals(fit1))\n\n\n\n# residuals are not normally distributed\n# we do not use a test for this, but instead look at the residuals visually\n\n# let's plot residuals versus predictor\nplot(airquality$Temp[!is.na(airquality$Ozone)], residuals(fit1))\n\n\n\n\n# model checking plots\noldpar= par(mfrow = c(2,2))\nplot(fit1)\n\n\n\npar(oldpar)\n#&gt; there's a pattern in the residuals &gt; the model does not fit very well!\n\n\n\n7.3.2 Linear regression with a categorical variable\nWe can also use categorical variables as an explanatory variable:\n\nm = lm(weight~group, data = PlantGrowth)\nsummary(m)\n## \n## Call:\n## lm(formula = weight ~ group, data = PlantGrowth)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.0710 -0.4180 -0.0060  0.2627  1.3690 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   5.0320     0.1971  25.527   &lt;2e-16 ***\n## grouptrt1    -0.3710     0.2788  -1.331   0.1944    \n## grouptrt2     0.4940     0.2788   1.772   0.0877 .  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6234 on 27 degrees of freedom\n## Multiple R-squared:  0.2641, Adjusted R-squared:  0.2096 \n## F-statistic: 4.846 on 2 and 27 DF,  p-value: 0.01591\n\nThe lm estimates an effect/intercept for each level in the categorical variable. The first level of the categorical variable is used as a reference, i.e. the true effect for grouptrt1 is Intercept+grouptrt1 = 4.661 and grouptrt2 is 5.5242. Moreover, the lm tests for a difference of the reference to the other levels. So with this model we know whether the control is significant different from treatment 1 and 2 but we cannot say anything about the difference between trt1 and trt2.\nIf we are interested in testing trt1 vs trt2 we can, for example, change the reference level of our variable:\n\ntmp = PlantGrowth\ntmp$group = relevel(tmp$group, ref = \"trt1\")\nm = lm(weight~group, data = tmp)\nsummary(m)\n## \n## Call:\n## lm(formula = weight ~ group, data = tmp)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.0710 -0.4180 -0.0060  0.2627  1.3690 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   4.6610     0.1971  23.644  &lt; 2e-16 ***\n## groupctrl     0.3710     0.2788   1.331  0.19439    \n## grouptrt2     0.8650     0.2788   3.103  0.00446 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6234 on 27 degrees of freedom\n## Multiple R-squared:  0.2641, Adjusted R-squared:  0.2096 \n## F-statistic: 4.846 on 2 and 27 DF,  p-value: 0.01591\n\nAnother example:\n\nlibrary(effects)\n## Loading required package: carData\n## lattice theme set by effectsTheme()\n## See ?effectsTheme for details.\nlibrary(jtools)\n\nsummary(chickwts)\n##      weight             feed   \n##  Min.   :108.0   casein   :12  \n##  1st Qu.:204.5   horsebean:10  \n##  Median :258.0   linseed  :12  \n##  Mean   :261.3   meatmeal :11  \n##  3rd Qu.:323.5   soybean  :14  \n##  Max.   :423.0   sunflower:12\n\nplot(weight ~ feed, chickwts)\n\n\n\nfit4 = lm(weight ~ feed, chickwts)\n\nsummary(fit4)\n## \n## Call:\n## lm(formula = weight ~ feed, data = chickwts)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -123.909  -34.413    1.571   38.170  103.091 \n## \n## Coefficients:\n##               Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)    323.583     15.834  20.436  &lt; 2e-16 ***\n## feedhorsebean -163.383     23.485  -6.957 2.07e-09 ***\n## feedlinseed   -104.833     22.393  -4.682 1.49e-05 ***\n## feedmeatmeal   -46.674     22.896  -2.039 0.045567 *  \n## feedsoybean    -77.155     21.578  -3.576 0.000665 ***\n## feedsunflower    5.333     22.393   0.238 0.812495    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 54.85 on 65 degrees of freedom\n## Multiple R-squared:  0.5417, Adjusted R-squared:  0.5064 \n## F-statistic: 15.36 on 5 and 65 DF,  p-value: 5.936e-10\nanova(fit4) #get overall effect of feeding treatment\n## Analysis of Variance Table\n## \n## Response: weight\n##           Df Sum Sq Mean Sq F value    Pr(&gt;F)    \n## feed       5 231129   46226  15.365 5.936e-10 ***\n## Residuals 65 195556    3009                      \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nplot(allEffects(fit4))\n\n\n\nplot(allEffects(fit4, partial.residuals = T))\n\n\n\neffect_plot(fit4, pred = feed, interval = TRUE, plot.points = F)\n\n\n\n\nold.par = par(mfrow = c(2, 2))\nplot(fit4)\n\n\n\npar(old.par)\n\nboxplot(residuals(fit4) ~ chickwts$feed)\n\n\n\n\n\n\n7.3.3 Linear regression with a quadratic term\n\n## what does simple linear regression mean?\n# simple = one predictor!\n# linear = linear in the parameters\n# a0 + a1 * x + a2 * x^2 \n# even if we add a quadratic term, this is a linear combination\n# this is called polynomial\n\nfit3 = lm(Ozone ~ Temp + I(Temp^2), data = airquality)\nsummary(fit3)\n## \n## Call:\n## lm(formula = Ozone ~ Temp + I(Temp^2), data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -37.619 -12.513  -2.736   9.676 123.909 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 305.48577  122.12182   2.501 0.013800 *  \n## Temp         -9.55060    3.20805  -2.977 0.003561 ** \n## I(Temp^2)     0.07807    0.02086   3.743 0.000288 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 22.47 on 113 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.5442, Adjusted R-squared:  0.5362 \n## F-statistic: 67.46 on 2 and 113 DF,  p-value: &lt; 2.2e-16\n\noldpar= par(mfrow = c(2,2))\nplot(fit3)\n\n\n\npar(oldpar)\n\n\n# Residual vs. fitted looks okay, but Outliers are still there, and additionally\n# too wide. But for now, let's plot prediction with uncertainty (plot line plus confidence interval)\n\nplot(Ozone ~ Temp, data = airquality)\n\n# if the relationship between x and y is not linear, we cannot use abline\n# instead we predict values of x for different values of y based on the model \nnewDat = data.frame(Temp = 55:100)\npredictions = predict(fit3, newdata = newDat, se.fit = T)\n# and plot these into our figure:\nlines(newDat$Temp, predictions$fit, col= \"red\")\n# let's also plot the confidence intervals:\nlines(newDat$Temp, predictions$fit + 1.96*predictions$se.fit, col= \"red\", lty = 2)\nlines(newDat$Temp, predictions$fit - 1.96*predictions$se.fit, col= \"red\", lty = 2)\n\n# add a polygon (shading for confidence interval)\nx = c(newDat$Temp, rev(newDat$Temp))\ny = c(predictions$fit - 1.96*predictions$se.fit, \n      rev(predictions$fit + 1.96*predictions$se.fit))\n\npolygon(x,y, col=\"#99009922\", border = F )\n\n\n\n\n\n# alternative: use package effects\n#install.packages(\"effects\")\nlibrary(effects)\nplot(allEffects(fit3))\n\n\n\nplot(allEffects(fit3, partial.residuals = T)) \n\n\n\n#to check patterns in residuals (plots measurements and partial residuals)\n\n# or jtools package\nlibrary(jtools)\neffect_plot(fit3, pred = Temp, interval = TRUE, plot.points = TRUE)"
  },
  {
    "objectID": "6-GLM.html#sec-logistic",
    "href": "6-GLM.html#sec-logistic",
    "title": "9  Generalized linear models",
    "section": "9.1 Logistic Regression",
    "text": "9.1 Logistic Regression\nFor the binomial model we can use the logit link:\n\\[\nlogit(y) = a_0 +a_1*x\n\\]\nAnd with the inverse link:\n\\[\ny = \\frac{1}{1+e^{-(a_0 + a_1) }}\n\\]\nYou can interpret the glm outputs basically like lm outputs.\nBUT: To get absolute response values, you have to transform the output with the inverse link function. For the logit, e.g. an intercept of 0 means a predicted value of 0.5. Different overall statistics: no R2 instead Pseudo R2 = 1 - Residual deviance / Null deviance\u000b(deviance is based on the likelihood):\n\n# logistic regression with categorical predictor\nm1 = glm(survived ~ sex, data = titanic, family = \"binomial\")\nsummary(m1)\n## \n## Call:\n## glm(formula = survived ~ sex, family = \"binomial\", data = titanic)\n## \n## Coefficients:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)   0.9818     0.1040   9.437   &lt;2e-16 ***\n## sexmale      -2.4254     0.1360 -17.832   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 1741.0  on 1308  degrees of freedom\n## Residual deviance: 1368.1  on 1307  degrees of freedom\n## AIC: 1372.1\n## \n## Number of Fisher Scoring iterations: 4\n\n# 2 groups: sexmale = difference of mean for male from mean for female\n# intercept = linear term for female: \n0.98 \n## [1] 0.98\n# but: this has to be transformed back to original scale before being interpreted!!!\n# survival probability for females\nplogis(0.98)\n## [1] 0.7271082\n# applies inverse logit function\n\n\n# linear term for male\n0.98 - 2.43\n## [1] -1.45\n# survival probability\nplogis(0.98 - 2.43)\n## [1] 0.1900016\n\n# predicted linear term\ntable(predict(m1))\n## \n##  -1.4436252928589 0.981813020919314 \n##               843               466\n# predicted response\ntable(predict(m1, type = \"response\"))\n## \n##  0.19098457888495 0.727467811158294 \n##               843               466\n\n\nplot(allEffects(m1))\n\n\n\n\n# more predictors\nm2 = glm(survived ~ sex + age, titanic, family = binomial)\nsummary(m2)\n## \n## Call:\n## glm(formula = survived ~ sex + age, family = binomial, data = titanic)\n## \n## Coefficients:\n##              Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)  1.235414   0.192032   6.433 1.25e-10 ***\n## sexmale     -2.460689   0.152315 -16.155  &lt; 2e-16 ***\n## age         -0.004254   0.005207  -0.817    0.414    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 1414.6  on 1045  degrees of freedom\n## Residual deviance: 1101.3  on 1043  degrees of freedom\n##   (263 observations deleted due to missingness)\n## AIC: 1107.3\n## \n## Number of Fisher Scoring iterations: 4\n\n\n# Calculate Pseudo R2: 1 - Residual deviance / Null deviance\n1 - 1101.3/1414.6 # Pseudo R2 of model\n## [1] 0.221476\n\n# Anova\nanova(m2, test = \"Chisq\")\n## Analysis of Deviance Table\n## \n## Model: binomial, link: logit\n## \n## Response: survived\n## \n## Terms added sequentially (first to last)\n## \n## \n##      Df Deviance Resid. Df Resid. Dev Pr(&gt;Chi)    \n## NULL                  1045     1414.6             \n## sex   1  312.612      1044     1102.0   &lt;2e-16 ***\n## age   1    0.669      1043     1101.3   0.4133    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nplot(allEffects(m2))\n\n\n\n\nResidual check:\n\n# Model diagnostics\n# do not use the plot(model) residual checks\n# use DHARMa package\nlibrary(DHARMa)\nres = simulateResiduals(m2)\nplot(res)"
  },
  {
    "objectID": "6-GLM.html#sec-poisson",
    "href": "6-GLM.html#sec-poisson",
    "title": "10  Generalized linear models",
    "section": "10.2 Poisson Regression",
    "text": "10.2 Poisson Regression\nPoisson regression is used for count data. Properties of count data are: no negative values, only integers, y ~ Poisson(lambda); where lambda = mean = variance, log link function (lambda must be positive).\nExample:\n\nhead(birdfeeding)\n##   feeding attractiveness\n## 1       3              1\n## 2       6              1\n## 3       8              1\n## 4       4              1\n## 5       2              1\n## 6       7              2\n\nplot(feeding ~ attractiveness, birdfeeding)\n\n\n\n\n\n\n\n\nfit = glm(feeding ~ attractiveness, birdfeeding, family = \"poisson\")\nsummary(fit)\n## \n## Call:\n## glm(formula = feeding ~ attractiveness, family = \"poisson\", data = birdfeeding)\n## \n## Coefficients:\n##                Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)     1.47459    0.19443   7.584 3.34e-14 ***\n## attractiveness  0.14794    0.05437   2.721  0.00651 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for poisson family taken to be 1)\n## \n##     Null deviance: 25.829  on 24  degrees of freedom\n## Residual deviance: 18.320  on 23  degrees of freedom\n## AIC: 115.42\n## \n## Number of Fisher Scoring iterations: 4\n\n# feeding for a bird with attractiveness 3\n# linear term\n1.47 + 0.148 * 3\n## [1] 1.914\n# pieces of food, using inverse of the link function, log --&gt; exp\nexp(1.47 + 0.148 * 3)\n## [1] 6.780155\n\n\nplot(allEffects(fit))\n\n\n\n\n\n\n\n\n\n# checking residuals\nres = simulateResiduals(fit)\nplot(res, quantreg = F)\n## Warning in smooth.spline(pred, res, df = 10): não usando df inválido; df deve\n## ser tal que 1 &lt; df &lt;= n := #{unique x} = 5\n\n\n\n\n\n\n\n# the warning is because of a recent change in DHARMa \n# qgam requires more data points\n\nNormal versus Poisson distribution:\n\nN(mean, sd)\u000bThis means that fitting a normal distribution estimates a parameter for the variance (sd)\nPoisson(lambda)\u000blambda = mean = variance\u000bThis means that a Poisson regression does not fit a separate parameter for the variance\n\nSo in the glm always assume that the variance is the mean, which is a strong assumption. In reality it can often occur that the variance is greater than expected (Overdispersion) or smaller than expected (Underdispersion). (this cannot happen for the lm because there we estimate a variance parameter (residual variance)). Overdispersion can have a HUGE influence on the MLEs and particularly on the p-values!\nWe can use the DHARMa package to check for Over or Underdispersion:\n\n# test for overdispersion\ntestDispersion(fit)\n\n\n\n\n\n\n\n## \n##  DHARMa nonparametric dispersion test via sd of residuals fitted vs.\n##  simulated\n## \n## data:  simulationOutput\n## dispersion = 0.74488, p-value = 0.384\n## alternative hypothesis: two.sided\n\n# Dispersion test is necessary for all poisson or binomial models with k/n \n# if positive, you can chose family = quasi-poisson or quasi-binomial\n# or use negative binomial distribution instead of poisson",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Generalized linear models</span>"
    ]
  },
  {
    "objectID": "5A-Exercise.html#unconstrained-ordination-pca",
    "href": "5A-Exercise.html#unconstrained-ordination-pca",
    "title": "Exercise - Multivariate statistics",
    "section": "Unconstrained ordination (PCA)",
    "text": "Unconstrained ordination (PCA)\nCarry out the following analyses:\n\nMake two PCAs, one for the environmental and one for the species richness data (see columns above).\nName the results pca_environment and pca_species.\nCreate a biplot for each PCA.\nCreate a barplot for the proportion of variance explained by each component.\n\nFor example, the result for species richness should look like this:\n\n\n\n\n\nYou need the following functions and the package vegan:\n\nprcomp()\nbiplot()\n\nbarplot()\nsummary()\n\n\nlibrary(vegan)\n\nHints\n\nDon’t forget to scale the variables in the PCA.\nIn order to get the proportion of the explained variance, have a look at the summary of your analysis. str() shows you what the summary contains. You want to specifically look at the importance, here the second row contains the proportion of variance of all components. So what we want to plot is: summary(pca_species)$importance[2,].\nDon’t forget to give your plots a title.\n\nNow, use your results to answer the questions on elearning-extern (Q 1-3) (“07_Test for Exercise in R”).\n\nIn which multivariate dataset do the first and second components explain more variance?\nWhat are the two samples that have the highest score on the respective third PCA axes?\nFrom looking at the biplot: Which environmental variables would you choose, if you have only the resource to measure three variables?\n\nNAP, angle 1 and chalk\nsalinity, penetrability and grain size\ngrain size, chalk and exposure\n\nDescribe the following correlations:\n\nsalinity and humus\nangle1 and exposure\nPolychaeta and Mollusca\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n## 1.) Conduct the principle component analyses (PCAs):\n\n# a) PCA of environmental data\npca_environment = prcomp(dat[,7:16], scale = T)\nsummary(pca_environment)\n## Importance of components:\n##                           PC1    PC2    PC3    PC4     PC5    PC6     PC7\n## Standard deviation     1.8476 1.3300 1.0919 1.0297 0.99521 0.7746 0.72784\n## Proportion of Variance 0.3414 0.1769 0.1192 0.1060 0.09904 0.0600 0.05298\n## Cumulative Proportion  0.3414 0.5182 0.6375 0.7435 0.84254 0.9025 0.95551\n##                            PC8     PC9    PC10\n## Standard deviation     0.52299 0.34727 0.22541\n## Proportion of Variance 0.02735 0.01206 0.00508\n## Cumulative Proportion  0.98286 0.99492 1.00000\n\nop &lt;- par(mfrow = c(1,2))\nbiplot(pca_environment, main = \"PCA\")            # plot the results of the PCA as a rotation matrix\nbarplot(summary(pca_environment)$importance[2,], # get the importance measure\n     main = \"Components of environment\",\n     ylab = \"Proportion of variance explained\")\n\n\n\n\n# b) PCA of species richness data\npca_species = prcomp(dat[,2:5], scale = T)\nsummary(pca_species)\n## Importance of components:\n##                           PC1    PC2    PC3    PC4\n## Standard deviation     1.1177 1.0251 1.0095 0.8251\n## Proportion of Variance 0.3123 0.2627 0.2548 0.1702\n## Cumulative Proportion  0.3123 0.5750 0.8298 1.0000\n\nbiplot(pca_species, main = \"PCA\")            # plot the results of the PCA as a rotation matrix\nbarplot(summary(pca_species)$importance[2,], # get the importance measure\n     main = \"Components of species\",\n     ylab = \"Proportion of variance explained\")\n\n\n\npar(op)\n\n# From the *summary()* output we can see that the first and second components explain more variance in the species PCA.\n\n\n##  2.) What are the two samples that have the highest score on the third PCA axis?\n\n# -&gt; order the samples by their PC3 coordinate:\norder(pca_environment$x[,'PC3'], decreasing = T) # -&gt; 24 is highest\n##  [1] 24 21 23 28 25 16 22 40 36 19  8 12  6 30  9  7 39 32 44  1 15  4 31 13 14\n## [26]  5 10 35 37 45 27 20 18 34 11 17 26 29 38  3 41 33  2 42 43\norder(pca_species$x[,'PC3'], decreasing = T) # -&gt; 7 is highest\n##  [1]  7  8  6  1 37  5 13  3 35  4 14 38 11 42 29 39 28 43  2 45 26 34 17 27 36\n## [26] 18 20 15 23 30 41 21 19 31 12 16 33 25 32 24 40 44 22 10  9\n\n\n## 3.) Which environmental variables would you choose, if you have only the resource to measure three variables? \n\n# From looking at the biplot, we choose 3 variables that describe a lot of variation (i.e. have a large length in the biplot) and have little collinearity. \n# -&gt; For example, an appropriate choice would be salinity, penetrability and grain size.\n\n\n## 4.) We can get information on the correlations of variables by looking at their representation in the biplot: \n  #  a) salinity and humus:  same direction  -&gt;  positively correlated\n  #  b) angle1 and exposure:  opposite directions  -&gt;  negatively correlated\n  #  c) Polychaeta and Mollusca:  almost perpendicular  -&gt;  uncorrelated"
  },
  {
    "objectID": "5A-Exercise.html#clustering",
    "href": "5A-Exercise.html#clustering",
    "title": "Exercise - Multivariate statistics",
    "section": "Clustering",
    "text": "Clustering\n\nK-means\nWe want to use clustering methods to define 3 environmental types. Use the function kmeans() with centers = 3 (number of clusters to be generated). Remember to set a seed; the choice of the first k centers is random.\n\nset.seed(467456)\ncl = #...\n\nCompare the three clusters with the result of the PCA using the following code that uses another plotting framework called ggplot2:\n\nlibrary(ggfortify)\nautoplot(pca_environment, colour = cl$cluster, size = 2, loadings = TRUE, loadings.colour = 'black',\n         loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = \"black\")\n\nThe colors of the points represent the three clusters. Answer the following question on elearning-extern (Q 4-5):\n\nHow is it possible that four observations in the middle (in red - if you have used the same seed) belong to a different cluster than the observations around them (in black)?\nWhich environmental variables are on average high within the black cluster (cluster 1)?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Create clusters using all environmental variables\nset.seed(467456)\ncl &lt;- kmeans(dat[,7:16], centers = 3) # 3 clusters to be generated\n\n# Plot\nlibrary(ggfortify)\nautoplot(pca_environment, colour = cl$cluster, size = 2, loadings = TRUE, loadings.colour = 'black',\n         loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = \"black\")\n\n\n\n\n# To understand why the four observations in the middle belong to a different cluster than the observations around them, we must take into account, that the biplot is only a 2-dimensional representation of a more-than-2 dimensional space. Therefore, the four points in the middle will be dissimilar to the points around them with respect to a variable that is not well represented by the first two PCA axes.\n\n# Environmental variables that are on average high within cluster 1:\n# -&gt; looking at the plot we find that exposure and grain size are high on average within cluster 1\n\n\n\n\n\n\nHierarchical clustering\nNow we want to hierarchically cluster the samples with respect to their species richness, as shown in the following plot:\n\n\n\n\n\nCreate the same plot using the functions:\n\nhclust()\n\nplot()\nas.phylo()\n\nLoad the package ape. Have a look at the help for hclust() to read what the function does and look at the examples for further help on how to use the function. Then have a look at what the function as.phylo() does. Now, color the labels using the variable week. You can do this using the argument “tip.color =”.\nChoose the correct statement(s) about the species richness and its sampling on elearning-extern(Q6). To be able to read the plot more easily, you can click Zoom in the top pane of the Plots window in RStudio.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nlibrary(ape)\n\nhc = hclust(dist(dat[, 2:5]))\nplot(as.phylo(hc), tip.color = dat$week)"
  },
  {
    "objectID": "4C-Exercise.html#analyzing-the-nitrofen-dataset",
    "href": "4C-Exercise.html#analyzing-the-nitrofen-dataset",
    "title": "Exercise - GLM",
    "section": "Analyzing the nitrofen dataset",
    "text": "Analyzing the nitrofen dataset\nThe Ministry of Agriculture has appointed your university to investigate the toxicity of the herbicide nitrofen on the fertility of the waterflea species Ceriodaphnia dubia in order to asses the implications of the herbicide for ecosystems.\nIn an experiment conducted by your fellow researchers, the offspring of the waterflea species Ceriodaphnia dubia were counted as a function of different concentrations of the herbicide. Your job is to do the analysis.\n\n\n\n\n\n\nQuestion\n\n\n\nCarry out the following tasks:\n\nConvert the variable conc into a factor.\nFit a suitable model for the relationship between total amount of offspring (total) and nitrofen concentration (conc).\nTest for overdispersion.\nInterpret and plot the effect.\nTest for the overall effect of nitrofen concentration.\n\nYou may need the following functions:\n\nstr()\nas.factor()\nglm()\nsummary()\ntestDispersion()\nplot()\nallEffects()\nanova(..., test = \"Chisq\")\n\nUse your results to answer the following questions:\n1.You analyzed the response of Ceriodaphnia dubia to different concentrations of the herbicide nitrofen. Looking at your results, which of the following statements is correct? (Several anwers are correct)\n\n The MLE for the mean number of offspring at a nitrofen concentration of 0 is 31.4 (Don't forget to apply the (inverse) link function to the estimate). At a nitrofen concentration of 160, Ceriodaphnia dubia produced significantly less offspring than in the control treatment (conc = 0). At a nitrofen concentration of 235, Ceriodaphnia dubia produced significantly less offspring than in the control treatment (conc = 0). The residuals show significantly less variance than would be expected from a Poisson distribution (underdispersion).\n\n2. How do you test for the overall significance of concentration on the total amount of offspring? Perform the respective test to check whether the variable conc as a whole has an effect on the total amount of offspring. How many asteriks are displayed for significance?\n\n none = not significant * = p &lt; 0.05 ** = p &lt; 0.01 *** = p &lt; 0.001\n\n\n\n\n\nClick here to see the solution\n\n\n# prepare data\nnitrofen$conc &lt;- as.factor(nitrofen$conc) # change variable conc to a factor\n\n# plot the relation that we want to fit\nplot(total ~ conc, nitrofen)\n\n\n\n\n# Fit a suitable model for the relationship between total amount of offspring (total) and nitrofen concentration (conc):\nfit &lt;- glm(total ~ conc, family = \"poisson\", data=nitrofen)\nsummary(fit)\n## \n## Call:\n## glm(formula = total ~ conc, family = \"poisson\", data = nitrofen)\n## \n## Coefficients:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)  3.44681    0.05643  61.078  &lt; 2e-16 ***\n## conc80       0.00318    0.07974   0.040    0.968    \n## conc160     -0.10395    0.08196  -1.268    0.205    \n## conc235     -0.60190    0.09486  -6.345 2.22e-10 ***\n## conc310     -1.65505    0.14089 -11.747  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for poisson family taken to be 1)\n## \n##     Null deviance: 312.484  on 49  degrees of freedom\n## Residual deviance:  50.719  on 45  degrees of freedom\n## AIC: 297.81\n## \n## Number of Fisher Scoring iterations: 5\n\n# test for overdispersion\ntestDispersion(fit)\n\n\n\n## \n##  DHARMa nonparametric dispersion test via sd of residuals fitted vs.\n##  simulated\n## \n## data:  simulationOutput\n## dispersion = 0.62249, p-value = 0.048\n## alternative hypothesis: two.sided\n\n# plot effect\nplot(allEffects(fit))\n\n\n\n\n# log link to calculate predicted values at the response scale:\n# predicted response = exp(Intercept + Estimate * predictor)\nexp(3.44681) # or\n## [1] 31.40007\nexp(coef(fit)[1])\n## (Intercept) \n##        31.4\n\n# Test for the overall effect of *conc* on the total number of offspring\nanova(fit, test = \"Chisq\")\n## Analysis of Deviance Table\n## \n## Model: poisson, link: log\n## \n## Response: total\n## \n## Terms added sequentially (first to last)\n## \n## \n##      Df Deviance Resid. Df Resid. Dev  Pr(&gt;Chi)    \n## NULL                    49    312.484              \n## conc  4   261.76        45     50.719 &lt; 2.2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "4C-Exercise.html#analyzing-the-melanoma-dataset",
    "href": "4C-Exercise.html#analyzing-the-melanoma-dataset",
    "title": "Exercise - GLM",
    "section": "Analyzing the melanoma dataset",
    "text": "Analyzing the melanoma dataset\nIn the following, you will investigate the melanoma dataset provided by the University Hospital of Odense, Denmark. The data are of patients with malignant melanomas. You can find a more detailed description in the help of melanoma. The question you want to investigate is whether the occurrence of ulceration (ulcer, yes = 1, no = 0) is related to the thickness of the tumor (thickness in mm) and the sex of the patient (sex, male = 1, female = 0) and the interaction of the two.\n\n\n\n\n\n\nQuestion\n\n\n\nCarry out the following tasks:\n\nFit an appropriate model to answer the research question.\nCheck the model residuals.\nInterpret and plot all effects including an analysis of the deviance.\n\nYou may need the following functions:\n\nstr()\nglm()\nsummary()\nanova()\nsimulateResiduals()\nplot()\nallEffects()\n\nUse your results to answer the following questions:\n1. Let’s move to the melanoma dataset: Assuming you chose the correct distribution, which type of regression did you use for the analysis?\n\n Linear regression Logistic regression Poisson regression\n\n3. You have checked the residuals of your model. Which of the following patterns and conclusions apply? (Several answers are correct)\n\n There remains a significant pattern between the residuals and the fitted values. An additional quadratic term for thickness could help to improve the model. The residuals deviate from the expected distribution. The model is overdispersed. The model assumptions are not met yet, and I don't trust this model without further improvements.\n\n\n\n\n\nClick here to see the solution\n\n\nThere remains a significant pattern between the residuals and the fitted values. –&gt; You can see this in the right part of the DHARMa residual plot.\nAn additional quadratic term for thickness could help to improve the model. –&gt; Try it out!\nThe residuals deviate from the expected distribution. –&gt; You can see this in the left part of the DHARMa residual plot.\nThe model is overdispersed. –&gt; Only poisson or binomial k/n models can be overdispersed!\n\n\n# get the data\ndat &lt;- melanoma\n\n# Fit an appropriate model to answer the research question.\ndat$sex &lt;- as.factor(dat$sex) # change variable sex to factor (this is optional, not necessary with binary values 0/1)\nfit &lt;- glm(ulcer ~ thickness * sex, family = \"binomial\", data=dat)\n\n# Check residuals\nres &lt;- simulateResiduals(fit, n = 500)\nplot(res)\n\n\n\n\n# model interpretation\nsummary(fit)\n## \n## Call:\n## glm(formula = ulcer ~ thickness * sex, family = \"binomial\", data = dat)\n## \n## Coefficients:\n##                Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)    -1.40642    0.31902  -4.409 1.04e-05 ***\n## thickness       0.36927    0.11368   3.248  0.00116 ** \n## sex1           -0.02579    0.55535  -0.046  0.96296    \n## thickness:sex1  0.14527    0.17656   0.823  0.41064    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 281.13  on 204  degrees of freedom\n## Residual deviance: 234.04  on 201  degrees of freedom\n## AIC: 242.04\n## \n## Number of Fisher Scoring iterations: 5\nanova(fit, test = \"Chisq\")\n## Analysis of Deviance Table\n## \n## Model: binomial, link: logit\n## \n## Response: ulcer\n## \n## Terms added sequentially (first to last)\n## \n## \n##               Df Deviance Resid. Df Resid. Dev  Pr(&gt;Chi)    \n## NULL                            204     281.13              \n## thickness      1   45.374       203     235.76 1.628e-11 ***\n## sex            1    1.039       202     234.72    0.3080    \n## thickness:sex  1    0.681       201     234.04    0.4094    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# Calculate Pseudo R2: 1 - Residual deviance / Null deviance\n1 - 234.04/281.13 # Pseudo R2 of model\n## [1] 0.1675026\n\n# plot effects\nplot(allEffects(fit))\n\n\n\n\nAs the residuals look quite suspicious and all quantile regressions significantly deviate, we can try to improve the model with a quadratic term for thickness.\n\nfit &lt;- glm(ulcer ~ thickness * sex + I(thickness^2), family = \"binomial\", data=dat)\nsummary(fit)\n## \n## Call:\n## glm(formula = ulcer ~ thickness * sex + I(thickness^2), family = \"binomial\", \n##     data = dat)\n## \n## Coefficients:\n##                 Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)    -2.466019   0.411511  -5.993 2.07e-09 ***\n## thickness       1.066836   0.193715   5.507 3.65e-08 ***\n## sex1            0.236510   0.518545   0.456    0.648    \n## I(thickness^2) -0.057746   0.012766  -4.523 6.09e-06 ***\n## thickness:sex1 -0.009476   0.133618  -0.071    0.943    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 281.13  on 204  degrees of freedom\n## Residual deviance: 214.05  on 200  degrees of freedom\n## AIC: 224.05\n## \n## Number of Fisher Scoring iterations: 4\nres &lt;- simulateResiduals(fit)\nplot(res)\n\n\n\n\n# plot effects\nplot(allEffects(fit))\n\n\n\n\nThe quadratic term solves the problem of the residuals. The effects plots look quite different. There seems to be a maximum of ulcer around a thickness of 10 that we would have missed without the quadratic term."
  },
  {
    "objectID": "4B-Exercise.html#useful-functions",
    "href": "4B-Exercise.html#useful-functions",
    "title": "Exercise - Multiple Linear Regression",
    "section": "Useful functions",
    "text": "Useful functions\nfor multiple linear regression\nlm() - fit linear model\nsummary(fit) - apply to fitted model object to display regression table\nplot(fit) - plot residuals for model validation\nanova(fit) - apply type I ANOVA (variables included sequentially) to model to test for effects all levels of a factor\nAnova(fit) - car package; use type II ANOVA (effects for predictors when all other predictors are already included) for overall effects\nscale() - scale variable\nsqrt() - square-root\nlog() - calculates natural logarithm\nplot(allEffects(fit)) - apply to fitted model object to plot marginal effect; effects package\npar() - change graphical parameters\nuse oldpar \\&lt;- par(mfrow = c(number_rows, number_cols)) to change figure layout including more than 1 plot per figure\nuse par(oldpar) to reset graphic parameter\nfor model selection\nstepAIC(fullModel) - perform stepwise AIC model selection; apply to full model object, MASS package\ndredge(fullModel) - perform global model selection, MuMIn package\nmodel.avg() - perform model averaging\nAIC(fit) - get AIC for a fitted model\nanova(fit1, fit2) - compare two fitted models via Likelihood Ratio Test (LRT)"
  },
  {
    "objectID": "4B-Exercise.html#interactions-with-the-plantheight-dataset",
    "href": "4B-Exercise.html#interactions-with-the-plantheight-dataset",
    "title": "Exercise - Multiple Linear Regression",
    "section": "Interactions with the plantHeight dataset",
    "text": "Interactions with the plantHeight dataset\n\n\n\n\n\n\nPlant Height revisited\n\n\n\nRevisit exercise our previous analysis of EcoData::plantHeight\n\nlibrary(EcoData)\nmodel = lm(loght ~ temp, data = plantHeight)\n\nUse (separate) multiple regressions to test if:\n\nIf temp or NPP (net primary productivity) is a more important predictor (importance == absolute effect size).\nIf growth forms (variable growthform) differ in their temperature effects. (use an interaction)\nIf the effect of temp remains significant if we include latitude and an interaction of latitude with temp. If not, why? Tip: plot temp ~ lat.\n\n\n\n\n\nClick here to see the solution\n\n\nplantHeight$sTemp = scale(plantHeight$temp)\nplantHeight$sLat = scale(plantHeight$lat)\nplantHeight$sNPP = scale(plantHeight$NPP)\n\n# relevel \nplantHeight$growthform2 = relevel(as.factor(plantHeight$growthform), \"Herb\")\n\n\nNPP or Temp?\n\n\nfit = lm(loght ~ sTemp + sNPP, data = plantHeight)\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp + sNPP, data = plantHeight)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.69726 -0.47935  0.04285  0.39812  1.77919 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  0.44692    0.05119   8.731 2.36e-15 ***\n## sTemp        0.20846    0.07170   2.907 0.004134 ** \n## sNPP         0.24734    0.07164   3.452 0.000702 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6711 on 169 degrees of freedom\n##   (6 observations deleted due to missingness)\n## Multiple R-squared:  0.2839, Adjusted R-squared:  0.2754 \n## F-statistic:  33.5 on 2 and 169 DF,  p-value: 5.553e-13\n\nNPP is slightly more important\n\nInteraction with growth form\n\n\nfit = lm(loght ~ growthform2 *  sTemp , data = plantHeight)\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ growthform2 * sTemp, data = plantHeight)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.19634 -0.21217 -0.00997  0.22750  1.62398 \n## \n## Coefficients: (2 not defined because of singularities)\n##                              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)                 -0.310748   0.062150  -5.000 1.51e-06 ***\n## growthform2Fern              0.624160   0.375650   1.662 0.098586 .  \n## growthform2Herb/Shrub        0.456394   0.377088   1.210 0.227967    \n## growthform2Shrub             0.562799   0.083100   6.773 2.36e-10 ***\n## growthform2Shrub/Tree        0.957088   0.486858   1.966 0.051069 .  \n## growthform2Tree              1.586005   0.080756  19.640  &lt; 2e-16 ***\n## sTemp                        0.203808   0.053231   3.829 0.000185 ***\n## growthform2Fern:sTemp              NA         NA      NA       NA    \n## growthform2Herb/Shrub:sTemp        NA         NA      NA       NA    \n## growthform2Shrub:sTemp       0.103357   0.076860   1.345 0.180636    \n## growthform2Shrub/Tree:sTemp -0.004614   0.526866  -0.009 0.993024    \n## growthform2Tree:sTemp       -0.244410   0.077661  -3.147 0.001971 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.3713 on 158 degrees of freedom\n##   (10 observations deleted due to missingness)\n## Multiple R-squared:  0.796,  Adjusted R-squared:  0.7844 \n## F-statistic: 68.51 on 9 and 158 DF,  p-value: &lt; 2.2e-16\n\nYes, because (some) interactions are significant.\nNote that the n.s. effect of sTemp is the first growth form (Ferns), for which we had only one observation. In a standard multiple regression, you don’t have p-values for the significance of the temperature effect against 0 for the other growth forms, because you test against the reference. What one usually does is to run an ANOVA (see chapter on ANOVA) to see if temp is overall significant.\n\nanova(lm(loght ~ growthform *  sTemp , data = plantHeight))\n## Analysis of Variance Table\n## \n## Response: loght\n##                   Df Sum Sq Mean Sq  F value    Pr(&gt;F)    \n## growthform         5 78.654 15.7309 114.1241 &lt; 2.2e-16 ***\n## sTemp              1  3.543  3.5426  25.7006 1.104e-06 ***\n## growthform:sTemp   3  2.800  0.9333   6.7707 0.0002524 ***\n## Residuals        158 21.779  0.1378                       \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nAlternatively, if you want to test if a specific growth form has a significant temperature effect, you could either extract the p-value from a multiple regression (a bit complicated) or just run a univariate regression for this growth form\n\nfit = lm(loght ~ sTemp + 0, data = plantHeight[plantHeight$growthform == \"Tree\",])\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp + 0, data = plantHeight[plantHeight$growthform == \n##     \"Tree\", ])\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## 0.2636 0.7198 0.9672 1.3503 2.3914 \n## \n## Coefficients:\n##       Estimate Std. Error t value Pr(&gt;|t|)   \n## sTemp   0.5013     0.1699    2.95  0.00452 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.21 on 60 degrees of freedom\n##   (10 observations deleted due to missingness)\n## Multiple R-squared:  0.1267, Adjusted R-squared:  0.1121 \n## F-statistic: 8.704 on 1 and 60 DF,  p-value: 0.004522\n\nOr you could fit the interaction but turn-off the intercept (by saying +0 or -1) and remove the plantHeight intercepts:\n\nfit = lm(loght ~ sTemp:growthform + 0, data = plantHeight[,])\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp:growthform + 0, data = plantHeight[, \n##     ])\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.5156 -0.1396  0.3488  0.8103  2.3914 \n## \n## Coefficients:\n##                            Estimate Std. Error t value Pr(&gt;|t|)    \n## sTemp:growthformFern        -0.8949     2.9233  -0.306 0.759911    \n## sTemp:growthformHerb         0.3195     0.1077   2.967 0.003460 ** \n## sTemp:growthformHerb/Shrub   1.1788     5.5825   0.211 0.833026    \n## sTemp:growthformShrub        0.2375     0.1197   1.984 0.048974 *  \n## sTemp:growthformShrub/Tree   0.8833     0.2613   3.380 0.000908 ***\n## sTemp:growthformTree         0.5013     0.1171   4.281 3.17e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.8339 on 162 degrees of freedom\n##   (10 observations deleted due to missingness)\n## Multiple R-squared:  0.2083, Adjusted R-squared:  0.179 \n## F-statistic: 7.106 on 6 and 162 DF,  p-value: 9.796e-07\n\n\nInteraction with lat\n\n\nfit = lm(loght ~ sTemp * sLat, data = plantHeight)\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp * sLat, data = plantHeight)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.97905 -0.45112  0.01062  0.42852  1.74054 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  0.46939    0.06771   6.932 7.78e-11 ***\n## sTemp        0.26120    0.14200   1.839   0.0676 .  \n## sLat        -0.13072    0.13616  -0.960   0.3383    \n## sTemp:sLat   0.01209    0.04782   0.253   0.8007    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6869 on 174 degrees of freedom\n## Multiple R-squared:  0.2504, Adjusted R-squared:  0.2375 \n## F-statistic: 19.37 on 3 and 174 DF,  p-value: 6.95e-11\n\nAll is n.s. … how did this happen? If we check the correlation between temp and lat, we see that the two predictors are highly collinear.\n\ncor(plantHeight$temp, plantHeight$lat)\n## [1] -0.9249304\n\nIn principle, the regression model should be able to still separate them, but the higher the collinearity, the more difficult it becomes for the regression to infer if the effect is caused by one or the other predictor."
  },
  {
    "objectID": "4C-Exercise.html#analyzing-elk-data",
    "href": "4C-Exercise.html#analyzing-elk-data",
    "title": "Exercise - GLM",
    "section": "Analyzing Elk data",
    "text": "Analyzing Elk data\nDownload the elk_data from GRIPS and import the file using the load( ) function.\n\n\nRData is a R specific data type. You can save any R object by running save(object, file \"filename.RData\")\n\n\n\n\n\n\nExample - Elk Data\n\n\n\nYou will be given a data set of habitat use of Elks in Canada. Measured is the presence of Elks (0/1), and a number of other predictors. Description of variables:\n\ndist_roads - distance of the location to the next road\nNDVI - normalized difference vegetation index, essentially greeness of vegetation on the site\nruggedness of the terrain\ndem - digital eleveation model = elevation above sea level\npresence - presence of the elk\nhabitat - open or forest\n\nPerform either:\n\nA predictive analysis, i.e. a model to predict where Elks can be found.\nA causal analysis, trying to understand the effect of roads on Elk presence.\n\nHints:\n\nHypothesis: presence ~ dist_roads\nWhat are potential confounders? How can you see if a variable is a confounder?\n\n\n\n\n\nClick here to see the solution\n\nA. Predictive analysis\n\nload(file = \"elk_data.RData\")\n\nlibrary(MASS)\nfit &lt;- glm(presence ~ dist_roads  + dem + ruggedness, data = elk_data, family = \"binomial\")\npredictive_model = MASS::stepAIC(fit, direction = \"both\")\n## Start:  AIC=5109.03\n## presence ~ dist_roads + dem + ruggedness\n## \n##              Df Deviance    AIC\n## - dist_roads  1   5101.9 5107.9\n## &lt;none&gt;            5101.0 5109.0\n## - ruggedness  1   5171.4 5177.4\n## - dem         1   5241.3 5247.3\n## \n## Step:  AIC=5107.94\n## presence ~ dem + ruggedness\n## \n##              Df Deviance    AIC\n## &lt;none&gt;            5101.9 5107.9\n## + dist_roads  1   5101.0 5109.0\n## - ruggedness  1   5172.0 5176.0\n## - dem         1   5324.8 5328.8\nsummary(predictive_model)\n## \n## Call:\n## glm(formula = presence ~ dem + ruggedness, family = \"binomial\", \n##     data = elk_data)\n## \n## Coefficients:\n##               Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -6.7890658  0.4917287 -13.807   &lt;2e-16 ***\n## dem          0.0042951  0.0002994  14.343   &lt;2e-16 ***\n## ruggedness  -0.0289100  0.0035076  -8.242   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 5334.5  on 3847  degrees of freedom\n## Residual deviance: 5101.9  on 3845  degrees of freedom\n## AIC: 5107.9\n## \n## Number of Fisher Scoring iterations: 4\n\nB. Causal analysis\nThe predictive model has actually dropped the variable of interest (distance to roads) which shows the risks of tools that select for the best predictive model such as AIC selection: Collinear variables that we need to adjust our effects, are often dropped.\nFor the causal model, we really need to think about the causal relationships between the variables:\nWe are interested in the effect of dist_roads on presence:\n\nsummary(glm(presence ~ dist_roads, data = elk_data, family = \"binomial\"))\n## \n## Call:\n## glm(formula = presence ~ dist_roads, family = \"binomial\", data = elk_data)\n## \n## Coefficients:\n##               Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -4.101e-01  6.026e-02  -6.806  1.0e-11 ***\n## dist_roads   3.204e-04  3.977e-05   8.056  7.9e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 5334.5  on 3847  degrees of freedom\n## Residual deviance: 5268.1  on 3846  degrees of freedom\n## AIC: 5272.1\n## \n## Number of Fisher Scoring iterations: 4\n\nPositive effect of dist_roads on elk, or in other words, more elks closer to the roads? Does that make sense? No, we expect a negative effect!\nAltitude (dem) and the ruggedness probably affect both variables, presence and dist_roads, and thus they should be considered as confounders:\n\nfit = glm(presence ~ dist_roads+ dem + ruggedness, data = elk_data, family = \"binomial\")\n\nThe effect of dist_roads is now negative!\nLet’s check the residuals:\n\nlibrary(DHARMa)\nres &lt;- simulateResiduals(fit, plot = TRUE)\n\n\n\nplot(res, quantreg = TRUE)\n\n\n\nplotResiduals(res, form = elk_data$dem, quantreg = TRUE)\n\n\n\nplotResiduals(res, form = elk_data$ruggedness, quantreg = TRUE)\n\n\n\n\nThe functional forms of our confounders are not perfect.\nSince we are not really interested in them, a cool trick is to use a GAM (generalized addictive model) which automatically adjusts the functional for of the fitted curve to flexibly take care of the confounders. Our main predictor dist_roads is still modelled as a linear effect.\n\nlibrary(mgcv)\n## Loading required package: nlme\n## This is mgcv 1.8-42. For overview type 'help(\"mgcv-package\")'.\nfit2 &lt;- gam(presence ~ dist_roads + s(dem) + s(ruggedness), data = elk_data, family = \"binomial\")\nsummary(fit2)\n## \n## Family: binomial \n## Link function: logit \n## \n## Formula:\n## presence ~ dist_roads + s(dem) + s(ruggedness)\n## \n## Parametric coefficients:\n##               Estimate Std. Error z value Pr(&gt;|z|)   \n## (Intercept)  1.783e-01  8.229e-02   2.167  0.03025 * \n## dist_roads  -1.798e-04  5.771e-05  -3.115  0.00184 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Approximate significance of smooth terms:\n##                 edf Ref.df Chi.sq p-value    \n## s(dem)        8.283  8.845  220.3  &lt;2e-16 ***\n## s(ruggedness) 8.510  8.918  128.3  &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## R-sq.(adj) =  0.114   Deviance explained = 9.27%\n## UBRE = 0.26754  Scale est. = 1         n = 3848\nplot(fit2)\n\n\n\n\n\n\n\nLet’s take another look at the residual plots, in particular for the confounders.\n\nres &lt;- simulateResiduals(fit2, plot = TRUE)\n## Registered S3 method overwritten by 'GGally':\n##   method from   \n##   +.gg   ggplot2\n## Registered S3 method overwritten by 'mgcViz':\n##   method from  \n##   +.gg   GGally\n\n\n\nplot(res, quantreg = TRUE)\n\n\n\nplotResiduals(res, form = elk_data$dem, quantreg = TRUE)\n\n\n\nplotResiduals(res, form = elk_data$ruggedness, quantreg = TRUE)\n\n\n\n\nNow, everything looks perfect"
  },
  {
    "objectID": "8-MachineLearning.html#regression",
    "href": "8-MachineLearning.html#regression",
    "title": "11  Machine Learning",
    "section": "11.1 Regression",
    "text": "11.1 Regression\nWe call task with a numerical response variable a regression task:\n\nindices = sample.int(nrow(airquality), 50)\ntrain = airquality[-indices,]\ntest = airquality[indices,]\n\n# 1. Fit model on train data:\nmodel = randomForest(Ozone~., data = train)\n\n# 2. Make Predictions\npredictions = predict(model, newdata = test)\n\n# 3. Compare predictions with observed values:\n## the root mean squared error is commonly used as an error statistic:\nsqrt(mean((predictions-test$Ozone)**2))\n## [1] 20.41785\n# Or use a correlationf actor\ncor(predictions, test$Ozone)\n## [1] 0.9017803\n# Or Rsquared\ncor(predictions, test$Ozone)**2\n## [1] 0.8132077"
  },
  {
    "objectID": "8-MachineLearning.html#classification",
    "href": "8-MachineLearning.html#classification",
    "title": "11  Machine Learning",
    "section": "11.2 Classification",
    "text": "11.2 Classification\nWe call a task with a categorical response variable a classification task (see also multi-class and multi-label classification):\n\nindices = sample.int(nrow(iris), 50)\ntrain = iris[-indices,]\ntest = iris[indices,]\n\n# 1. Fit model on train data:\nmodel = randomForest(Species~., data = train)\n\n# 2. Make Predictions\npredictions = predict(model, newdata = test)\n\n# 3. Compare predictions with observed values:\nmean(predictions == test$Species) # accuracy\n## [1] 0.94\n\n96% accuracy, which means only 4% of the observations were wrongly classified by our random forest!\nVariable importance:\n\nvarImpPlot(model)\n\n\n\n\nPetal.Width and Petal.Length were the most important predictors!"
  },
  {
    "objectID": "8-MachineLearning.html#exercise",
    "href": "8-MachineLearning.html#exercise",
    "title": "11  Machine Learning",
    "section": "11.3 Exercise",
    "text": "11.3 Exercise\n\n11.3.1 birdabundance dataset\n\nlibrary(EcoData)\nlibrary(randomForest)\nset.seed(42)\nindices = sample.int(nrow(birdabundance), 30)\ntrain = birdabundance[-indices,]\ntest = birdabundance[indices,]\n# ABUND is the response variable\n\nTask:\n\nFit random forest on train data\nPredict for test data\nCalculate R2\nDo the same with a lm and compare the predictive performance of both models\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrf = randomForest(ABUND~., data = train)\nm = lm(ABUND~., data = train)\n\npred1 = predict(rf, newdata = test)\npred2 = predict(m, newdata = test)\n\ncor(pred1, test$ABUND)**2\n## [1] 0.6596678\ncor(pred2, test$ABUND)**2\n## [1] 0.1983452\n\nRF clearly outperforms the linear regression model!\n\n\n\n\n\n11.3.2 titantic dataset\n\nlibrary(EcoData)\nlibrary(randomForest)\nlibrary(dplyr)\n## \n## Attaching package: 'dplyr'\n## The following object is masked from 'package:randomForest':\n## \n##     combine\n## The following objects are masked from 'package:stats':\n## \n##     filter, lag\n## The following objects are masked from 'package:base':\n## \n##     intersect, setdiff, setequal, union\nset.seed(42)\ntitanic_sub = titanic %&gt;% select(survived, age, pclass, sex, fare)\ntitanic_sub = titanic_sub[complete.cases(titanic_sub),]\n\nindices = sample.int(nrow(titanic_sub), 200)\ntrain = titanic_sub[-indices,]\ntest = titanic_sub[indices,]\n\nTask:\n\nFit random forest on train data\nPredict for test data\nCalculate Accuracy\nDo the same with a glm (binomial) and compare the predictive performance of both models\nWhat is the most important variable?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrf = randomForest(as.factor(survived)~., data = train)\nm = glm(survived~., data = train, family = binomial)\n\npred1 = predict(rf, newdata = test)\npred2 = predict(m, newdata = test, type = \"response\")\n\n# pred2 are probabilities, we have to change them to levels\npred2 = ifelse(pred2 &lt; 0.5, 0, 1)\n\nmean(pred1 == test$survived) # RF\n## [1] 0.82\nmean(pred2 == test$survived) # glm\n## [1] 0.765\n\nRF is better than the glm!\n\nvarImpPlot(rf)\n\n\n\n\nSex is the most important variable!\n\n\n\n\n\n11.3.3 Bias-variance tradeoff\nAn important concept of statistics and, in particular, ML is the concept of the bias-variance tradeoff - or in other words, finding the right complexity of the model. So how flexible should our model be so that it generalizes well to other/new observations. Many ML algorithms have complexity parameters (e.g. nodesize or mtry in RF) that control their complexity. Have a look at the following youtube video about the bias-variance tradeoff:\n\nLet’s see how we can control the complexity in the Random Forest algorithm:\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\n\npred = predict(rf, data)\nimportance(rf)\n##         IncNodePurity\n## Solar.R      17969.59\n## Wind         31978.36\n## Temp         34176.71\n## Month        10753.73\n## Day          15436.47\n#&gt;         IncNodePurity\n#&gt; Solar.R      17969.59\n#&gt; Wind         31978.36\n#&gt; Temp         34176.71\n#&gt; Month        10753.73\n#&gt; Day          15436.47\ncat(\"RMSE: \", sqrt(mean((data$Ozone - pred)^2)), \"\\n\")\n## RMSE:  9.507848\n#&gt; RMSE:  9.507848\n\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n\n\n\n\nTry different values for the nodesize and mtry and describe how the predictions depend on these parameters. (randomForest(…, nodesize = …, mtry = …) (the exercise was taken from the ML course book)\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\n\nfor(nodesize in c(1, 5, 15, 50, 100)){\n  for(mtry in c(1, 3, 5)){\n    rf = randomForest(Ozone~., data = data, mtry = mtry, nodesize = nodesize)\n    \n    pred = predict(rf, data)\n    \n    plot(data$Temp, data$Ozone, main = paste0(\n        \"mtry: \", mtry, \"    nodesize: \", nodesize,\n        \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n    )\n    lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n11.3.4 ML pipeline\nIf you want to know more about a typical ML pipeline/workflow, read this chapter from the ML course!"
  },
  {
    "objectID": "5-MultipleRegression.html#confounder",
    "href": "5-MultipleRegression.html#confounder",
    "title": "9  Multiple regression",
    "section": "",
    "text": "smokers: higher mortality and lower BMI -&gt; people with lower BMI have higher mortality rates\nWhen we correct for the confounder smoking, the correlation between BMI and mortality goes in the other direction, i.e. obese people have higher mortality!\n\n\n\n\n\n\n\n\nWarning\n\n\n\nConclusion: Confounders can cause correlations where no causal relationship exists.",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#multiple-lm",
    "href": "5-MultipleRegression.html#multiple-lm",
    "title": "9  Multiple regression",
    "section": "9.2 Multiple LM",
    "text": "9.2 Multiple LM\n\n\n\n\n\n\nNote\n\n\n\nA linear regression with a quadratic effect (or any polinomial) of X is a “multiple regression” in the sense that the squared X can be considered another “variable”: \\[  y = a_0 + a_1*x_1 + a_2*x_1^2  \\]\n\n\nMultiple linear regression expands simple linear regression to a polynomial of several explanatory variables x1, x2… e.g.: \\[\n    y = a_0 + a_1*x_1 + a_2*x_2 + a_3*x_3\n    \\]\n\nIdea: if we jointly consider “all” variables in the model formula, the influence of confounding variables is incorporated.\n\nLet’s see an example with the airquality data:\n\n## first remove observations with NA values\nnewAirquality = airquality[complete.cases(airquality),]\nsummary(newAirquality)\n##      Ozone          Solar.R           Wind            Temp      \n##  Min.   :  1.0   Min.   :  7.0   Min.   : 2.30   Min.   :57.00  \n##  1st Qu.: 18.0   1st Qu.:113.5   1st Qu.: 7.40   1st Qu.:71.00  \n##  Median : 31.0   Median :207.0   Median : 9.70   Median :79.00  \n##  Mean   : 42.1   Mean   :184.8   Mean   : 9.94   Mean   :77.79  \n##  3rd Qu.: 62.0   3rd Qu.:255.5   3rd Qu.:11.50   3rd Qu.:84.50  \n##  Max.   :168.0   Max.   :334.0   Max.   :20.70   Max.   :97.00  \n##      Month            Day       \n##  Min.   :5.000   Min.   : 1.00  \n##  1st Qu.:6.000   1st Qu.: 9.00  \n##  Median :7.000   Median :16.00  \n##  Mean   :7.216   Mean   :15.95  \n##  3rd Qu.:9.000   3rd Qu.:22.50  \n##  Max.   :9.000   Max.   :31.00\n\nA simple regression:\n\n# simple regression\nm0 = lm(Ozone ~ Temp , data = newAirquality)\nsummary(m0)\n## \n## Call:\n## lm(formula = Ozone ~ Temp, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.922 -17.459  -0.874  10.444 118.078 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -147.6461    18.7553  -7.872 2.76e-12 ***\n## Temp           2.4391     0.2393  10.192  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 23.92 on 109 degrees of freedom\n## Multiple R-squared:  0.488,  Adjusted R-squared:  0.4833 \n## F-statistic: 103.9 on 1 and 109 DF,  p-value: &lt; 2.2e-16\n# have a look at the residuals:\nop &lt;- par(mfrow = c(2,2))\nplot(m0)\n\n\n\n\n\n\n\npar(op)\n\nplot(Ozone ~ Temp , data = newAirquality)\nabline(m0, col = \"blue\", lwd = 3)\n\n\n\n\n\n\n\n\nA multiple linear regression of Ozone affected by temperature and wind:\n\n# multiple linear regression\nm1 = lm(Ozone ~ Temp + Wind , data = newAirquality)\nsummary(m1)\n## \n## Call:\n## lm(formula = Ozone ~ Temp + Wind, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -42.156 -13.216  -3.123  10.598  98.492 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -67.3220    23.6210  -2.850  0.00524 ** \n## Temp          1.8276     0.2506   7.294 5.29e-11 ***\n## Wind         -3.2948     0.6711  -4.909 3.26e-06 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 21.73 on 108 degrees of freedom\n## Multiple R-squared:  0.5814, Adjusted R-squared:  0.5736 \n## F-statistic: 74.99 on 2 and 108 DF,  p-value: &lt; 2.2e-16\n# have a look at the residuals:\nop &lt;- par(mfrow = c(2,2))\nplot(m1)\n\n\n\n\n\n\n\npar(op)\n\nTo vizualize the effects of each predictor on the ozone, we can use the package effects. The package will plot the effects of each variable separately (plots called partial slopes) “controling” for the other variables in the model. Controling here means that for ploting the effect of Temp, the variable Wind was fixed at it’s average value (the fixed value can be changed by the user, but the default is to take the mean of a continuous variable).\nA predictor eﬀect plot summarizes the role of a selected focal predictor in a fitted regression model. These graphs are an alternative to tables of fitted coeﬃcients, which can be much harder to interpret than predictor eﬀect plots. (Info taken from the vignette of the effectspackage, take a look at it!).\n\n# plotting multiple regression outputs\nlibrary(effects)\n## Carregando pacotes exigidos: carData\n## lattice theme set by effectsTheme()\n## See ?effectsTheme for details.\nplot(allEffects(m1))\n\n\n\n\n\n\n\n\nLet’s interprete the partial slope plot for Temp. It shows that there is a positive relationship of temperature and Ozone. The shaded blue area\nThe intercept of the line aﬀects only the height of the line, and is determined by the choices made for averaging over the fixed predictors, but for any choice of averaging method, the slope of the line would be the same (because the model has no interactions between variables - next topic). The shaded area is a pointwise confidence band for the fitted values, based on standard errors computed from the covariance matrix of the fitted regression coeﬃcients. The rug plot at the bottom of the graph shows the location of the Temp data values.\nIf we omit Wind will we have a different effect of Temp in Ozone?\n\n## Omitted variable bias\nboth = lm(Ozone ~ Wind + Temp, newAirquality)\nwind = lm(Ozone ~ Wind , newAirquality)\ntemp = lm(Ozone ~ Temp, newAirquality)\n#summary(both)\nsummary(wind)\n## \n## Call:\n## lm(formula = Ozone ~ Wind, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -43.513 -18.597  -5.035  15.814  88.437 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  99.0413     7.4724   13.25  &lt; 2e-16 ***\n## Wind         -5.7288     0.7082   -8.09 9.09e-13 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 26.42 on 109 degrees of freedom\n## Multiple R-squared:  0.3752, Adjusted R-squared:  0.3694 \n## F-statistic: 65.44 on 1 and 109 DF,  p-value: 9.089e-13\n\nslopes &lt;- data.frame(\n  predictor = c(\"Wind\", \"Temp\"),\n  both.pred = round(coef(both)[2:3], digits = 2),\n  only.wind = c(round(coef(wind)[2], digits = 2), \"NA\"),\n  only.temp = c(\"NA\", round(coef(temp)[2], digits = 2))\n)\nslopes\n##      predictor both.pred only.wind only.temp\n## Wind      Wind     -3.29     -5.73        NA\n## Temp      Temp      1.83        NA      2.44\n\nYes, omitting Wind makes the effect of Temperature larger.\nProblem: Multiple regression can separate the effect of collinear explanatory variables, but only, if collinearity is not too strong.\nSolution: If the correlation is really strong, we can omit one variable and interpret the remaining collinear variable as representing both.",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#interactions-between-variables",
    "href": "5-MultipleRegression.html#interactions-between-variables",
    "title": "9  Multiple regression",
    "section": "9.3 Interactions between variables",
    "text": "9.3 Interactions between variables\nIf one predictor influences the effect of the other predictor, we can include an interaction term into our model:\n\\[\ny \\sim a + b + a:b\n\\]\nor:\n\\[\ny \\sim a*b\n\\]\nLet’s incude the interaction between Wind and Temp\n\n# Include interaction\nm2 = lm(Ozone ~  scale(Wind)* scale(Temp) , data = newAirquality)\n# if including interactions, always scale your predictor variables!\n# scale: subtracts the mean and divides by standard deviation\nsummary(m2)\n## \n## Call:\n## lm(formula = Ozone ~ scale(Wind) * scale(Temp), data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.930 -11.193  -3.034   8.193  97.456 \n## \n## Coefficients:\n##                         Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)               38.469      2.137  18.002  &lt; 2e-16 ***\n## scale(Wind)              -11.758      2.238  -5.253 7.68e-07 ***\n## scale(Temp)               17.544      2.239   7.837 3.62e-12 ***\n## scale(Wind):scale(Temp)   -7.367      1.848  -3.987 0.000123 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 20.37 on 107 degrees of freedom\n## Multiple R-squared:  0.6355, Adjusted R-squared:  0.6253 \n## F-statistic: 62.19 on 3 and 107 DF,  p-value: &lt; 2.2e-16\nop &lt;- par(mfrow = c(2,2))\nplot(m2)\n\n\n\n\n\n\n\npar(op)\n\nThe influence of temperature on ozone depends on the amount of wind. When wind is low, the relationship is strongly positive, but when wind is high this relationship becomes slightly negative.\n\nplot(predictorEffect(\"Temp\", m2,xlevels=3))\n## Warning in Analyze.model(focal.predictors, mod, xlevels, default.levels, : the\n## predictors scale(Wind), scale(Temp) are one-column matrices that were converted\n## to vectors",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#model-selection",
    "href": "5-MultipleRegression.html#model-selection",
    "title": "9  Multiple regression",
    "section": "9.4 Model selection",
    "text": "9.4 Model selection\nWe’ve learned that we should include variables in the model that are collinear, that is they correlate with other predictors, but how many and which factors should we include?\nFamous example: Female hurricanes are deadlier than male hurricanes (Jung et al., 2014)\nThey have analyzed the number of fatalities of hurricane and claimed that there is an effect of femininity of the name on the number of deads (while correcting for confounders). They recommend to give hurricans only male names because it would considerably reduce the number of deads.\n\nlibrary(DHARMa)\n## This is DHARMa 0.4.7. For overview type '?DHARMa'. For recent changes, type news(package = 'DHARMa')\nlibrary(effects)\n?hurricanes\nstr(hurricanes)\n## Classes 'tbl_df', 'tbl' and 'data.frame':    92 obs. of  14 variables:\n##  $ Year                    : num  1950 1950 1952 1953 1953 ...\n##  $ Name                    : chr  \"Easy\" \"King\" \"Able\" \"Barbara\" ...\n##  $ MasFem                  : num  6.78 1.39 3.83 9.83 8.33 ...\n##  $ MinPressure_before      : num  958 955 985 987 985 960 954 938 962 987 ...\n##  $ Minpressure_Updated_2014: num  960 955 985 987 985 960 954 938 962 987 ...\n##  $ Gender_MF               : num  1 0 0 1 1 1 1 1 1 1 ...\n##  $ Category                : num  3 3 1 1 1 3 3 4 3 1 ...\n##  $ alldeaths               : num  2 4 3 1 0 60 20 20 0 200 ...\n##  $ NDAM                    : num  1590 5350 150 58 15 ...\n##  $ Elapsed_Yrs             : num  63 63 61 60 60 59 59 59 58 58 ...\n##  $ Source                  : chr  \"MWR\" \"MWR\" \"MWR\" \"MWR\" ...\n##  $ ZMasFem                 : num  -0.000935 -1.670758 -0.913313 0.945871 0.481075 ...\n##  $ ZMinPressure_A          : num  -0.356 -0.511 1.038 1.141 1.038 ...\n##  $ ZNDAM                   : num  -0.439 -0.148 -0.55 -0.558 -0.561 ...\n\nlibrary(glmmTMB)\n\nm1 = glmmTMB(alldeaths ~ MasFem*\n                             (Minpressure_Updated_2014 + scale(NDAM)),\n                           data = hurricanes, family = nbinom2)\nsummary(m1)\n##  Family: nbinom2  ( log )\n## Formula:          alldeaths ~ MasFem * (Minpressure_Updated_2014 + scale(NDAM))\n## Data: hurricanes\n## \n##      AIC      BIC   logLik deviance df.resid \n##    660.7    678.4   -323.4    646.7       85 \n## \n## \n## Dispersion parameter for nbinom2 family (): 0.787 \n## \n## Conditional model:\n##                                  Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)                     69.661590  23.425598   2.974 0.002942 ** \n## MasFem                          -5.855078   2.716589  -2.155 0.031138 *  \n## Minpressure_Updated_2014        -0.069870   0.024251  -2.881 0.003964 ** \n## scale(NDAM)                     -0.494094   0.455968  -1.084 0.278536    \n## MasFem:Minpressure_Updated_2014  0.006108   0.002813   2.171 0.029901 *  \n## MasFem:scale(NDAM)               0.205418   0.061956   3.316 0.000915 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nInteractions -&gt; we need to scale variables:\n\nm2 = glmmTMB(alldeaths ~ scale(MasFem)*\n                             (scale(Minpressure_Updated_2014) + scale(NDAM)+scale(sqrt(NDAM))),\n                           data = hurricanes, family = nbinom2)\nsummary(m2)\n##  Family: nbinom2  ( log )\n## Formula:          \n## alldeaths ~ scale(MasFem) * (scale(Minpressure_Updated_2014) +  \n##     scale(NDAM) + scale(sqrt(NDAM)))\n## Data: hurricanes\n## \n##      AIC      BIC   logLik deviance df.resid \n##    634.9    657.6   -308.4    616.9       83 \n## \n## \n## Dispersion parameter for nbinom2 family (): 1.12 \n## \n## Conditional model:\n##                                               Estimate Std. Error z value\n## (Intercept)                                    2.28082    0.10850  21.022\n## scale(MasFem)                                  0.05608    0.10672   0.525\n## scale(Minpressure_Updated_2014)               -0.14267    0.17804  -0.801\n## scale(NDAM)                                   -1.11104    0.28030  -3.964\n## scale(sqrt(NDAM))                              2.10764    0.36487   5.776\n## scale(MasFem):scale(Minpressure_Updated_2014)  0.07371    0.19618   0.376\n## scale(MasFem):scale(NDAM)                     -0.10159    0.27080  -0.375\n## scale(MasFem):scale(sqrt(NDAM))                0.32960    0.36594   0.901\n##                                               Pr(&gt;|z|)    \n## (Intercept)                                    &lt; 2e-16 ***\n## scale(MasFem)                                    0.599    \n## scale(Minpressure_Updated_2014)                  0.423    \n## scale(NDAM)                                   7.38e-05 ***\n## scale(sqrt(NDAM))                             7.63e-09 ***\n## scale(MasFem):scale(Minpressure_Updated_2014)    0.707    \n## scale(MasFem):scale(NDAM)                        0.708    \n## scale(MasFem):scale(sqrt(NDAM))                  0.368    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThe effect of femininity is gone! Already with the scaled variables, but also with the transformation with the NDAM variable. The question was raised which of both is more reasonable, whether the relationship between damage and mortality isn’t a straight line or that the gender of the hurricane names affect deaths (Bob O’Hara and GrrlScientist). They argue that the model with the transformed variable fits the data better which brings us to the topic of this section, how to choose between different models? Answering this question if the goal of model selection.\nWhy not include all the variables we can measure in our model? Problem with the full model:\n\nIf you have more parameters than data points, the model cannot be fitted at all\nEven with n (samples) ~ k (number of parameters), model properties become very unfavorable (high p-values and uncertainties/standard errors) –&gt; Overfitting\n\nA “good model” depends on the goal of the analysis, do we want to optimize:\n\nPredictive ability – how well can we predict with the model?\nInferential ability – do we identify the true values for the parameters (true effects), are the p-values correct, can we correctly say that a variable has an effect?\n\nThe more complex a model gets, the better it fits to the data, but there’s a downside, the bias-variance tradeoff.\nExplanation bias-variance tradeoff\nExplanation LRT and AIC\nProblem of p-hacking\nDemonstration: Why interpretation of effect sizes and p-values after extensive model selection is not a good idea:\n\n####:\nlibrary(MASS)\nset.seed(1)\n#make up predictors:\ndat = data.frame(matrix(runif(20000), ncol = 100))\n# create a response variable\ndat$y = rnorm(200)\nfullModel = lm(y ~ ., data = dat)\nsum &lt;- summary(fullModel)\nmean(sum$coefficients[,4] &lt; 0.05)\n# 0.019: less than 2 % false positives = type I error rate\n\nselection = stepAIC(fullModel)\nsum.sel &lt;- summary(selection)\nmean(sum.sel$coefficients[,4] &lt; 0.05)\n# 0.48: Now almost 50 % of our results are false positives!!!",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#formula-syntax",
    "href": "5-MultipleRegression.html#formula-syntax",
    "title": "9  Multiple regression",
    "section": "9.5 Formula syntax",
    "text": "9.5 Formula syntax\n\nFormula syntax\n\n\n\n\n\n\n\nFormula\nMeaning\nDetails\n\n\n\n\ny~x_1\n\\(y=a_0 +a_1*x_1\\)\nSlope+Intercept\n\n\ny~x_1 - 1\n\\(y=a_1*x_1\\)\nSlope, no intercept\n\n\ny~I(x_1^2)\n\\(y=a_0 + a_1*(x_1^2)\\)\nQuadratic effect\n\n\ny~x_1+x_2\n\\(y=a_0+a_1*x_1+a_2*x_2\\)\nMultiple linear regression (two variables)\n\n\ny~x_1:x_2\n\\(y=a_0+a_1*(x_1*x_2)\\)\nInteraction between x1 and x2\n\n\ny~x_1*x_2\n\\(y=a_0+a_1*(x_1*x_2)+a_2*x_1+a_3*x_2\\)\nInteraction and main effects",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "6A-Exercise.html#birdabundance-dataset",
    "href": "6A-Exercise.html#birdabundance-dataset",
    "title": "12  Exercise",
    "section": "12.1 birdabundance dataset",
    "text": "12.1 birdabundance dataset\n\nlibrary(EcoData)\nlibrary(randomForest)\n## randomForest 4.7-1.1\n## Type rfNews() to see new features/changes/bug fixes.\nset.seed(42)\nindices = sample.int(nrow(birdabundance), 30)\ntrain = birdabundance[-indices,]\ntest = birdabundance[indices,]\n# ABUND is the response variable\n\n\n\n\n\n\n\nWarning\n\n\n\nTask:\n\nFit random forest on train data\nPredict for test data\nCalculate R2\nDo the same with a lm and compare the predictive performance of both models\n\n\n\n\n\nClick here to see the solution\n\n\nrf = randomForest(ABUND~., data = train)\nm = lm(ABUND~., data = train)\n\npred1 = predict(rf, newdata = test)\npred2 = predict(m, newdata = test)\n\ncor(pred1, test$ABUND)**2\n## [1] 0.6596678\ncor(pred2, test$ABUND)**2\n## [1] 0.1983452\n\nRF clearly outperforms the linear regression model!"
  },
  {
    "objectID": "6A-Exercise.html#titantic-dataset",
    "href": "6A-Exercise.html#titantic-dataset",
    "title": "12  Exercise",
    "section": "12.2 titantic dataset",
    "text": "12.2 titantic dataset\n\nlibrary(EcoData)\nlibrary(randomForest)\nlibrary(dplyr)\n## \n## Attaching package: 'dplyr'\n## The following object is masked from 'package:randomForest':\n## \n##     combine\n## The following objects are masked from 'package:stats':\n## \n##     filter, lag\n## The following objects are masked from 'package:base':\n## \n##     intersect, setdiff, setequal, union\nset.seed(42)\ntitanic_sub = titanic %&gt;% select(survived, age, pclass, sex, fare)\ntitanic_sub = titanic_sub[complete.cases(titanic_sub),]\n\nindices = sample.int(nrow(titanic_sub), 200)\ntrain = titanic_sub[-indices,]\ntest = titanic_sub[indices,]\n\n\n\n\n\n\n\nWarning\n\n\n\nTask:\n\nFit random forest on train data\nPredict for test data\nCalculate Accuracy\nDo the same with a glm (binomial) and compare the predictive performance of both models\nWhat is the most important variable?\n\n\n\n\n\nClick here to see the solution\n\n\nrf = randomForest(as.factor(survived)~., data = train)\nm = glm(survived~., data = train, family = binomial)\n\npred1 = predict(rf, newdata = test)\npred2 = predict(m, newdata = test, type = \"response\")\n\n# pred2 are probabilities, we have to change them to levels\npred2 = ifelse(pred2 &lt; 0.5, 0, 1)\n\nmean(pred1 == test$survived) # RF\n## [1] 0.82\nmean(pred2 == test$survived) # glm\n## [1] 0.765\n\nRF is better than the glm!\n\nvarImpPlot(rf)\n\n\n\n\nSex is the most important variable!"
  },
  {
    "objectID": "6A-Exercise.html#bias-variance-tradeoff",
    "href": "6A-Exercise.html#bias-variance-tradeoff",
    "title": "12  Exercise",
    "section": "12.3 Bias-variance tradeoff",
    "text": "12.3 Bias-variance tradeoff\nAn important concept of statistics and, in particular, ML is the concept of the bias-variance tradeoff - or in other words, finding the right complexity of the model. So how flexible should our model be so that it generalizes well to other/new observations. Many ML algorithms have complexity parameters (e.g. nodesize or mtry in RF) that control their complexity. Have a look at the following youtube video about the bias-variance tradeoff:\n\nLet’s see how we can control the complexity in the Random Forest algorithm:\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\n\npred = predict(rf, data)\nimportance(rf)\n##         IncNodePurity\n## Solar.R      17969.59\n## Wind         31978.36\n## Temp         34176.71\n## Month        10753.73\n## Day          15436.47\n#&gt;         IncNodePurity\n#&gt; Solar.R      17969.59\n#&gt; Wind         31978.36\n#&gt; Temp         34176.71\n#&gt; Month        10753.73\n#&gt; Day          15436.47\ncat(\"RMSE: \", sqrt(mean((data$Ozone - pred)^2)), \"\\n\")\n## RMSE:  9.507848\n#&gt; RMSE:  9.507848\n\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\nTry different values for the nodesize and mtry and describe how the predictions depend on these parameters. (randomForest(..., nodesize = ..., mtry = ...) (the exercise was taken from the ML course book)\n\n\n\n\nClick here to see the solution\n\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\n\nfor(nodesize in c(1, 5, 15, 50, 100)){\n  for(mtry in c(1, 3, 5)){\n    rf = randomForest(Ozone~., data = data, mtry = mtry, nodesize = nodesize)\n    \n    pred = predict(rf, data)\n    \n    plot(data$Temp, data$Ozone, main = paste0(\n        \"mtry: \", mtry, \"    nodesize: \", nodesize,\n        \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n    )\n    lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n  }\n}"
  },
  {
    "objectID": "6A-Exercise.html#ml-pipeline",
    "href": "6A-Exercise.html#ml-pipeline",
    "title": "12  Exercise",
    "section": "12.5 ML pipeline",
    "text": "12.5 ML pipeline\nIf you want to know more about a typical ML pipeline/workflow, read this chapter from the ML course!"
  },
  {
    "objectID": "6A-Exercise.html#deep-neural-networks",
    "href": "6A-Exercise.html#deep-neural-networks",
    "title": "12  Exercise",
    "section": "12.4 Deep Neural Networks",
    "text": "12.4 Deep Neural Networks\nTask description: Predict the spatial distribution of the African elephant. In Ecology we call such model a species distribution model.\n\nlibrary(EcoData)\n?elephant\n\nThe object elephant contains two subdatasets\n\nelephant$occurenceData contains presence / absence data as well as bioclim variables (environmental predictors) for the African elephant\nelephant$predictionData data with environmental predictors for spatial predictions\n\nThe environmental data consists of 19 environmental variables, called bio1 through bio19, which are public and globally available bioclimatic variables (see https://www.worldclim.org/data/bioclim.html for a description of the variables). For example, bio1 is the mean annual temperature. No understanding of these variables is required for the task, the only difficulty is that many of them are highly correlated because they encode similar information (e.g. there are several temperature variables).\nThe goal of this exercise is to fit a deep neural network based on the observed presence / absences, and then make new predictions of habitat suitability in space across Africa based on the fitted model. Thus, our workflow consists of two steps:\n\nbuilding and optimizing the predictive model, and\nusing the predictive model to make predictions on new data and visualizing the results.\n\nHere an example of how you could do this\nBuild predictive model:\n\n# Use subsample of data because too many observations and use the rest of data to validate our model\ntrain_indices = sample.int(nrow(elephant$occurenceData), 500)\ndf = elephant$occurenceData[train_indices, ]\n\nlibrary(cito)\nmodel = dnn(Presence~bio1, \n            data = df, \n            loss = 'binomial', \n            verbose = FALSE)\n\n\n\nplot(model)\n\n\n\n\nTo check the predictive power of the model for the observations we have not used to train the model ([-train_indices,])\n\nlibrary(pROC)\nauc(df$Presence[-train_indices], \n    predict(model, newdata = df[-train_indices,],type = \"response\"))\n## Warning in roc.default(response, predictor, auc = TRUE, ...): Deprecated use a\n## matrix as predictor. Unexpected results may be produced, please pass a numeric\n## vector.\n## Area under the curve: 0.7117\n\nThe AUC is a common measure of goodness of fit for binary classification.\n\n\n\n\n\n\nTasks\n\n\n\n\nDrop some of the highly correlated variables (don’t use all of them).\nChange architecture of the dnn (using the hidden=c(...)argument)\nChange the number of epochs and the learning rate (see documentation of dnn)\n\nMake new predictions\nThe data for making spatial predictions is in elephant$predictionData. This new dataset is not a data.frame but a raster object, which is a special data class for spatial data. You can plot one of the predictors in the following way.\n\nlibrary(sp)\nlibrary(raster)\nplot(elephant$predictionData$bio1)\n\n\n\n\nAs our new_data object is not a typical data.frame, we are not using the standard predict function for a dnn, which is ?predict.citodnn, but the predict function from the raster object (which internally transforms the new_data into a classical data.frame, pass then the data.frame to our model, and then transforms the output back to a raster object). Therefore, the syntax is slightly different to how we previously used predict().\n\npredictions =  predict(elephant$predictionData, model = model, type = \"response\")\nhead(as.data.frame(predictions))\n##        layer\n## 1 0.04989933\n## 2 0.04631172\n## 3 0.04300154\n## 4 0.04146853\n## 5 0.03866339\n## 6 0.03732348\n\nThe advantage of the raster object is that we can directly use it to create a map (the raster object has coordinates for each observation):\n\nspplot(predictions, colorkey = list(space = \"left\") )\n\n\n\n\nTask: play around with the DNN to improve predictive accuracy. You can check predictive accuracy by looking the AUC of the test data. When improving the predictive power of the model, does the map change?"
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
>>>>>>> Stashed changes
    "title": "Introduction",
    "section": "",
    "text": "Sample, population, and the data-generating process\nThe very reason for doing statistics is that the data that we observe is somehow random. But how does this randomness arise?\nImagine that we are interested in the average growth rate of trees in Germany during two consecutive years. Ideally, we would measure them all and be done, without having to do statistics. In practice, however, we hardly ever have the resources to do so. We therefore have to make a selection of trees, and infer the growth rate of all trees from that. The statistical term for all the trees is the “population”, and the term for the trees that you have observed is the “sample”. Hence, we want to infer properties of the population from a sample.\nThe population as such is fixed and does not change, but every time we observe a random selection (sample) of the population, we may get elements with slightly different properties. As a concrete example: imagine we have the resources to only sample 1000 trees across Germany. Thus, every time we take a random selection of 1000 trees out of the population, we will get a slightly different average growth rate.\nThe process of sampling from the population does explain how randomness arises in our data. However, a slight issue with this concept is that it does not match very well with more complex random processes. Imagine, for example, that data arises from a person going to randomly selected plots to measure radiation (which varies within minutes due to cloud cover), using a measurement instrument that measures with some random error. Does it really make sense to think of the data arising from sampling from a “population” of possible observations?\nA more modern and general concept to describe how data is created is the concept of the “data-generating process”, which is pretty self-explanatory: the data-generating process describes how the observations from a random sample arise, including systematic and stochastic processes. It therefore includes the properties of what would classically be called “sampling from a population”, but it is broader and includes all other processes that would create systematic and random patterns in our data. In this picture, instead of inferring properties of the population from a sample, we would say we want to infer the properties of the data-generating process from a sample of observations created by this process.\nWhether you think in populations or data-generating processes: the important point to remember from this section is that there are two objects that we have to distinguish well: on the one hand, there is our sample. We may describe it in terms of it’s properties (mean, minimum, maximum), but the sample is not the final goal. Ultimately, we want to infer the properties of the population / data-generating process from the sample. We will explain how to do this in the next sections, in particular in the section on inferential statistics. Before we come to that, however, let us talk in a bit more detail about the representation of the sample, i.e. the data that we observe.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "0-Introduction.html#sample-population-and-the-data-generating-process",
    "href": "0-Introduction.html#sample-population-and-the-data-generating-process",
    "title": "Introduction",
    "section": "",
    "text": "The population is the set of all observations that you could have made. The sample is the observations that you have actually made.\n\n\n\nSampling creates randomness.\n\n\n\nHowever, not all randomness comes from sampling from a population.\n\n\n\nA more modern concept that replaces the “population” is the “data-generating process”. The data-generating process describes how the observations from a random sample arise, including systematic and stochastic processes.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "0-Introduction.html#representation-and-classes-of-data",
    "href": "0-Introduction.html#representation-and-classes-of-data",
    "title": "Introduction",
    "section": "Representation and classes of data",
    "text": "Representation and classes of data\nA typical dataset consists of multiple observations of a number of variables (e.g. temperature, precipitation, growth). You can think of this situation as a spreadsheet where the columns are the variables and the rows are the observations. Of course, there are other data structures, but this is the most common one (also known as Tabular Data).\nUsually, this data will contain one variable that is our focus, meaning that we want to understand how this variable is influenced by other variables.\n\n\nThe response variable is the variable for which we try to understand how it responds to other factors.\nWe call this variable the response variable (sometimes also the dependent variable or outcome variable), because we are interested if and how this variable of interest varies (responds, depends) when something else changes. The variables that affect the response could be environmental factors (e.g. temperature), treatments (fertilized vs. non fertilized), or anything else.\n\n\nThe predictor variables are those that affect the response.\nThose other variables that affect our response are called predictor variables (synonymous terms are explanatory variables, covariates or independent variables).\nThe most common case is that the response variable is a single variable (e.g. a single number or a categorical outcome), and we will concentrate on this case. However, there are cases when the response has more than one dimension, or when we are interested in the change of several response variables at a time. The analysis of such data is known as multivariate statistics. We will not cover these methods here; find some further links here.\n\n\nMultivariate statistics deal with response variables that have several dimensions, such as species composition.\nAnother important distinction is the type of each variables independent of whether we are speaking about the response or the predictor, we distinguish:\n\n\nVariables can be continuous, discrete or categorical. Categorical variables can be ordered, unordered, or binary.\n\nContinuous numeric variables (ordered and continuous / real), e.g. temperature\nInteger numeric variables (ordered, integer). An important special case of those are count data, i.e. 0,1,2,3, …\nCategorical variables (e.g. a fixed set of options such as red, green blue), which can further be divided into\n\nUnordered categorical variables (Nominal) such as red, green, blue\nBinary (Dichotomous) variables (dead / survived, 0/1)\nOrdered categorical variables (small, medium, large)\n\n\nIt is important that you record the variables according to their nature. And if you use a statistics software, you have to make sure that the type is properly recognized after reading in the data, because many methods treat a variable differently if it is numeric or categorical.\n\n\nCheck that your variables have the right type after reading them in in your statistics software.\nExperience shows that there is certain tendency of beginners to use categorical variables for things that are actually continuous, e.g. by coding body weight of animals into light, medium, heavy.\n\n\n\n\n\n\nDon’t use categorical variables for things that can also be recorded numerically! The justification stated is often that this avoids the measurement uncertainty. In short: it doesn’t, it just creates more problems. Don’t use categorical variables for things that can also be recorded numerically!\n\n\n\nLet’s come back to one of the first point in this script: the data. If we have to collect data ourselves, we have to answer a number of questions. Which variables should we collect? At which values of those variables should we collect data? And how many replicates do we need?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "0-GettingStarted.html",
    "href": "0-GettingStarted.html",
    "title": "1  Getting Started with R",
    "section": "",
    "text": "1.1 Your R System\nIn this course, we work with the combination of R + RStudio.\nMake sure you have a recent version of R + RStudio installed on your computer. If you have never used RStudio, here is a good video introducing the basic system and how R and RStudio interact.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "0-GettingStarted.html#your-r-system",
    "href": "0-GettingStarted.html#your-r-system",
    "title": "1  Getting Started with R",
    "section": "",
    "text": "R is the calculation engine (language and enviromnet) that performs the computations.\nRStudio is the editor (IDE) that helps you sending inputs to R and collect outputs.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "0-GettingStarted.html#libraries-that-you-will-need",
    "href": "0-GettingStarted.html#libraries-that-you-will-need",
    "title": "1  Getting Started with R",
    "section": "1.2 Libraries that you will need",
    "text": "1.2 Libraries that you will need\nThe R engine comes with a number of base functions, but one of the great things about R is that you can extend these base functions by libraries that can be programmed by anyone. In principle, you can install libraries from any website or file. In practice, however, most commonly used libraries are distributed via two major repositories. For statistical methods, this is CRAN, and for bioinformatics, this is ioconductor](https://www.bioconductor.org/).\n\n\n\n\n\n\nClick to see more on installing libraries in R\n\n\n\n\n\nTo install a package from a library, use the command:\n\ninstall.packages(\"LIBRARY\")\n\nExchange “LIBRARY” with the name of the library you want to install. The default is to search the package in CRAN, but you can specify other repositories or file locations in the function. For Windows / Mac, R should work out of the box. For other UNIX based systems, may also need to install\nbuild-essential\ngfortran\nlibmagick++-dev\nr-base-dev\ncmake\nIf you are new to installing packages on Debian / Ubuntu, etc., type the following:\nsudo apt update && sudo apt install -y --install-recommends build-essential gfortran libmagick++-dev r-base-dev cmake\n\n\n\nIn this book, we will often use data sets from the EcoData package, which is not on CRAN, but on a GitHub page. To install the package, if you don’t have the devtools package installed already, first install devtools from CRAN by running:\n\ninstall.packages(\"devtools\")\n\nThen, install the EcoData package via:\n\ndevtools::install_github(repo = \"TheoreticalEcology/EcoData\",\n                         dependencies = T, build_vignettes = T)\n\nFor your convenience, the EcoData installation also forces the installation of most of the packages needed in this book, so this may take a while. If you want to load only the EcoData package, or if you encounter problems during the install, set dependencies = F, build_vignettes = F.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "0-GettingStarted.html#extra-resources",
    "href": "0-GettingStarted.html#extra-resources",
    "title": "1  Getting Started with R",
    "section": "1.3 Extra resources",
    "text": "1.3 Extra resources\nTo get to know Rstudio better, here is the link for a brief tour from another “bookdown” page with simple and good explanations for each panel and the many resources.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "1A-basicOperations.html",
    "href": "1A-basicOperations.html",
    "title": "2  Basic data operations with R",
    "section": "",
    "text": "2.1 Data manipulation in R\nR works like a calculator:\n2+2\n## [1] 4\n5*4\n## [1] 20\n2^2\n## [1] 4\nWe can also use functions that perform specific calculations:\nsqrt(4)\n## [1] 2\nsum(c(2,2))\n## [1] 4\nWe can assign values/data to variables:\nobject.name &lt;- 1\nNote that both operators ‘&lt;-’ or “=” work. Functions in R (e.g. sum(), mean(), etc.) have arguments that control/change their behavior and are also used to pass the data to the function:\nmean(x = c(2, 2))\n## [1] 2",
    "crumbs": [
      "Data input and manimulation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basic data operations with R</span>"
    ]
  },
  {
    "objectID": "1A-basicOperations.html#data-manipulation-in-r",
    "href": "1A-basicOperations.html#data-manipulation-in-r",
    "title": "2  Basic data operations with R",
    "section": "",
    "text": "Help\n\n\n\nA list and description of all arguments can be found in the help of a function (which can be accessed via ?mean or if you place the cursor on the function and press F1)\n\n\n\n2.1.1 Data types and data structures\nThere are four important data types in R (there are more but we focus on these 5):\n\nNumeric: 1, 2, 3, 4\nLogical: TRUE or FALSE\nCharacters: “A”, “B”,…\nFactors which are characters but we have to tell R explicitly that they are factors\nNot a number: NA, NaN (empty value)\n\nBased on the data types we can build data structures which contain either only specific data types or a mixture of data types:\n\nVector: Several values of one data type, can be created with the c function:\n\nc(5, 3, 5, 6) # numeric vector\nc(TRUE, TRUE, FALSE, TRUE) # logical vector\nc(\"A\", \"B\", \"C\") # character vector\nas.factor(c(\"A\", \"B\", \"C\")) # factor vector\n\nMatrix: two-dimensional data structure of one data type, can be created with the matrix function (we can pass a vector to the matrix function and tell it via arguments how the matrix should be constructed):\n\nmatrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2)\n##      [,1] [,2]\n## [1,]    1    4\n## [2,]    2    5\n## [3,]    3    6\n\nData.frame: Often our data has variables of different types which makes a matrix unsuitable data structure. Data.frames can handle different data types and is organized in columns (one column = one variables) and can be created with the data.frame function:\n\ndata.frame(A = c(1, 2, 3), B = c(\"A\", \"B\", \"C\"), C = c(TRUE, FALSE, FALSE))\n##   A B     C\n## 1 1 A  TRUE\n## 2 2 B FALSE\n## 3 3 C FALSE\n\n\n\n\n2.1.2 Data manipulation\nA vector is a one dimensional data structure and we can access the values by using [ ]:\n\nvec = c(1, 2, 3, 4, 5)\nvec[1] # access first element\n## [1] 1\nvec[5] # access last element\n## [1] 5\n\nA data.frame is a two dimensional data structure. Let’s define a data.frame from two vectors:\n\ndf = data.frame(\n  x = c(2,2,2,3,2,2,1), #add column named x with 2 elements\n  y = c(4,5,5,4,5,3,5) #add a second column named y\n)\n#Let's see how this looks like:\ndf\n##   x y\n## 1 2 4\n## 2 2 5\n## 3 2 5\n## 4 3 4\n## 5 2 5\n## 6 2 3\n## 7 1 5\n\nAccess parts of the data.frame:\n\ndf[1,2] #get element in row 1, column 1\n## [1] 4\ndf[7,1] #get element in row 7, column 1\n## [1] 1\ndf[2,] #get row 2\n##   x y\n## 2 2 5\ndf[,2] #get column 2\n## [1] 4 5 5 4 5 3 5\n#or use the $ sign to access columns:\ndf$y\n## [1] 4 5 5 4 5 3 5\ndf[2:4,1:2] #get rows 2 to 4 and only columns 1 and 2\n##   x y\n## 2 2 5\n## 3 2 5\n## 4 3 4\n\nWe can also set filters:\n\ndf[df$x &gt; 2,] # show only data where x is larger than 2\n##   x y\n## 4 3 4\ndf[df$y == 5,] #show only data where y equals 5\n##   x y\n## 2 2 5\n## 3 2 5\n## 5 2 5\n## 7 1 5\ndf[df$y == 5 & df$x == 1,] #show only data where y equals 5 AND x equals 1\n##   x y\n## 7 1 5\ndf[df$y == 5 | df$x == 3,] #show data where y equals 5 OR x equals 3\n##   x y\n## 2 2 5\n## 3 2 5\n## 4 3 4\n## 5 2 5\n## 7 1 5\n\n\n\n\n\n\n\nLogical operators\n\n\n\n\n\n\nLogical operators in R\n\n\nOperators\nMeaning\n\n\n\n\n&lt;\nLess than\n\n\n&lt;=\nLess than or equal to\n\n\n&gt;\nMore than\n\n\n&gt;=\nMore than or equal to\n\n\n==\nEqual to\n\n\n!=\nNot equal to\n\n\n!a\nNot a\n\n\na|b\na or b\n\n\na & b\na and b\n\n\nisTRUE(a)\nTest if a is true\n\n\n\n\n\n\nAdd an additional column with NA values:\n\ndf$NAs = NA #fills up a new column named NAs with all NA values\ndf\n##   x y NAs\n## 1 2 4  NA\n## 2 2 5  NA\n## 3 2 5  NA\n## 4 3 4  NA\n## 5 2 5  NA\n## 6 2 3  NA\n## 7 1 5  NA\n\n\n\n2.1.3 Data analysis workflow\nThis is a simple version of what you’re going to learn during this course:\n\nLet’s say we measured the size of individuals in two different treatment groups\n\ngroup1 = c(2,2,2,3,2,2,1.1)\ngroup2 = c(4,5,5,4,5,3,5.1) \n\nclass(group2)\n## [1] \"numeric\"\n\nDescriptive statistics and visualization\n\nmean(group1)\n## [1] 2.014286\nmean(group2)\n## [1] 4.442857\n\nboxplot(group1, group2)\n\n\n\n\n\n\n\n\nTesting for differences. Question: Is there a difference between group1 and group2?\n\nt.test(group1, group2)\n## \n##  Welch Two Sample t-test\n## \n## data:  group1 and group2\n## t = -6.6239, df = 10.628, p-value = 4.413e-05\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  -3.238992 -1.618151\n## sample estimates:\n## mean of x mean of y \n##  2.014286  4.442857\n\nInterpretation of the results. Individuals in Group 2 were larger than those in group 1 (t test, t = -6.62, p &lt; 0.0001)\n\nIn the course we will work a lot with datasets implemented in R or in R packages which can be accessed via their name:\n\ndat = airquality\nhead(dat)\n##   Ozone Solar.R Wind Temp Month Day\n## 1    41     190  7.4   67     5   1\n## 2    36     118  8.0   72     5   2\n## 3    12     149 12.6   74     5   3\n## 4    18     313 11.5   62     5   4\n## 5    NA      NA 14.3   56     5   5\n## 6    28      NA 14.9   66     5   6",
    "crumbs": [
      "Data input and manimulation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basic data operations with R</span>"
    ]
  },
  {
    "objectID": "1B-PreparingData.html",
    "href": "1B-PreparingData.html",
    "title": "3  Preparing your data",
    "section": "",
    "text": "3.1 Importing data\nThe recommended data format for your raw data is csv. You can export to csv from excel. If you have a csv file in standard (international) format, the command to import is simply\ndat = read.csv(file = \"../data/myData.csv\")\nIf your csv file departs from standard settings (e.g. you use a , insted of a . as decimal points), you will have to modify the function. Go on the read.csv function and press F1 to get the help, which explains all that. Alternatively, you can use the import menu to the top right in RStudio.\nHere is a video Video of how to read in csv data in R.",
    "crumbs": [
      "Data input and manimulation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preparing your data</span>"
    ]
  },
  {
    "objectID": "1B-PreparingData.html#importing-data",
    "href": "1B-PreparingData.html#importing-data",
    "title": "3  Preparing your data",
    "section": "",
    "text": "You can open the documentation of a R function by pressing F1 while the cursor is on the function name or by runnin ?read.scv\n\n\n\n\n\n\n\n\nRemarks on data handling\n\n\n\n\n\nTypically, data will be recorded electronically with a measurement device, or you have to enter it manually using a spreadsheet program, e.g. MS Excel. The best format for data storage is csv (comma separated values) because it is long-term compatibility with all kinds of programs / systems (Excel can export to csv).\nAfter raw data is entered, it should never be manipulated by hand! If you modify data by hand, make a copy and document all changes (additional text file). Better: Make changes using a script\nData handling in R:\n\ncreate R script “dataprep.R” or similar and import dataset\npossibly combine different datasets\nclean data (remove NAs, impossible values etc.)\nsave as Rdata (derived data)\n\n\n\n\n\n\nR can also import data from nearly any data source, including xls or xlsx files. Here and here two websites with import explanations for many different data formats",
    "crumbs": [
      "Data input and manimulation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preparing your data</span>"
    ]
  },
  {
    "objectID": "1B-PreparingData.html#cleaning-the-data",
    "href": "1B-PreparingData.html#cleaning-the-data",
    "title": "3  Preparing your data",
    "section": "3.2 Cleaning the data",
    "text": "3.2 Cleaning the data\nChecking / cleaning means that you ensure that you have written in your data correctly, and that you resolve issues with the data. Most real data has some problems, e.g. missing values etc. The basic checks that I would recommend is:\nUsually, this will immediately uncover some problems. The exact solution will depend very much on the nature of the data, but common things are typos in the raw data (e.g. letters in a column that should be numeric, etc), but minimally you should\n\nLook at your data (double click in Rstudio, or view() to see if anything is weird)\nRun summary() and str() to check range, NAs, and type of all variables (e.g. categorical variables are often imported as character, change them to factors with the as.factor() function)\n\nHere is a video that shows an example of a cleaning process.",
    "crumbs": [
      "Data input and manimulation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preparing your data</span>"
    ]
  },
  {
    "objectID": "1B-PreparingData.html#subsetting-aggregating-or-re-structuring-your-data",
    "href": "1B-PreparingData.html#subsetting-aggregating-or-re-structuring-your-data",
    "title": "3  Preparing your data",
    "section": "3.3 Subsetting, aggregating or re-structuring your data",
    "text": "3.3 Subsetting, aggregating or re-structuring your data\nOften, you just want to use a part of your data, or copy, merge or split data. All you need to know is explained here ?sec-datamanipulation",
    "crumbs": [
      "Data input and manimulation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preparing your data</span>"
    ]
  },
  {
    "objectID": "1C-Exercise.html",
    "href": "1C-Exercise.html",
    "title": "Exercise - R basics",
    "section": "",
    "text": "Setting up the working environment in RStudio\nYour first task is to open RStudio and create a new project for the course.\nFor all exercises during this week, use this project! You can open it via the file system as follows (please try this out now):\nYou should now be back to RStudio in your project.\nIn the directory of the R project, generate a folder “scripts” and a folder “data”. You can do this either in the file directory or in RStudio. For the latter:\nThe idea is that you will create an R script for each exercise and save all these files in the scripts folder. You can do this as follows:",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#setting-up-the-working-environment-in-rstudio",
    "href": "1C-Exercise.html#setting-up-the-working-environment-in-rstudio",
    "title": "Exercise - R basics",
    "section": "",
    "text": "Click the ‘File’ button in the menu, then ‘New Project’ (or the second icon in the bar below the menu “Create a project”).\nClick “New Directory”.\nClick “New Project”.\nType in the name of the directory to store your project, e.g. “IntroStatsR”.\n“Browse” to the folder on your computer where you want to have your project created.\nClick the “Create Project” button.\n\n\n\n\n(Exit RStudio).\nNavigate to the directory where you created your project.\nDouble click on the “IntroStatsR.Rproj” file in that directory.\n\n\n\n\nGo to the “Files” panel in R Studio (bottom right panel).\nClick the icon “New Folder” in the upper left corner.\nEnter the folder name.\nThe new folder is now visible in your project directory.\n\n\n\nClick the “File” button in the menu, then “New File” and “R Script” (or the first icon in the bar below the menu and then “R Script” in the dropdown menu).\nClick the “File” button in the menu, then “Save” (or the “Save” icon in the menu).\nNavigate to your scripts folder.\nEnter the file name, e.g. “Exercise_01.R”.\nSave the file.",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#a-few-hints-before-you-can-start",
    "href": "1C-Exercise.html#a-few-hints-before-you-can-start",
    "title": "Exercise - R basics",
    "section": "A few hints before you can start",
    "text": "A few hints before you can start\nRemember the different ways of running code:\n\nclick the “Run” button in the top right corner of the top left panel (code editor) OR\nhit “Ctrl”+“Enter” (MAC: “Cmd”+“Return”)\n\nRStudio will then run\n\nthe code that is currently marked OR\nthe line of code where the text cursor currently is (simply click into that line)\n\nIf you face any problems with executing the code, check the following:\n\nall brackets closed?\ncapital letters instead of small letters?\ncomma is missing?\nif RStudio shows red attention signs (next to the code line number), take it seriously\ndo you see a “+” (instead of a “&gt;”) in the console? stop executions with “esc” key and then try again.\n\nHave a look at the shortcuts by clicking “Tools” and than “Keybord Shortcuts Help”!!",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#basic-data-structures-in-r",
    "href": "1C-Exercise.html#basic-data-structures-in-r",
    "title": "Exercise - R basics",
    "section": "Basic data structures in R",
    "text": "Basic data structures in R\nBefore we work with real data, we should first recap important data structures in R\nA single value (type does not matter) is called a scalar (it is just one value):\n\na = 5\nprint(a)\n## [1] 5\n\nthis_letter = \"A\"\nprint(this_letter)\n## [1] \"A\"\n\n\n\n&lt;- and = are assignment operators, they are equivalent and are used to assign values, data, or objects to a variable.\nIn R you can use any type of name for a variable, you can even mix numbers and dots in the name: test5 or test.5, but there is one restriction, no special symbols (as they are usually operators or functions) and a name cannot start with a number, for example 5test will throw an error.\nHowever, usually we want to assign several values to a variable. For example, a dataset consists of several columns (=variables). We can use the function c(...) to connect (or concatenate) several values:\n\nage = c(20, 50, 30, 70)\nprint(age)\n## [1] 20 50 30 70\nnames = c(\"Anna\", \"Daniel\", \"Martin\", \"Laura\")\nprint(names)\n## [1] \"Anna\"   \"Daniel\" \"Martin\" \"Laura\"\n\n\nVectors\n\n\nYou can only concatenate values from the same data type! If they are different, all will be casted to the same data type!\n\nprint(c(\"Age\", 5, TRUE))\n## [1] \"Age\"  \"5\"    \"TRUE\"\n\nThe c(...) function returns a vector which is a one-dimensional array. You can access elements of the vector by using the square brackets [which_element]:\n\nage[2] # second element\n## [1] 50\nage[1] # first element\n## [1] 20\n\nThis is known as indexing. And there are a few tricks:\n\nUse [-n] to return all elements except for n:\n\nage[-2] # return all except for the second element\n## [1] 20 30 70\n\nUse another vector to return several elements at once:\n\nage[c(1, 3)] # return first and third elements\n## [1] 20 30\nage[-c(1,3)] # return all elements except for first and third elements\n## [1] 50 70\n\nUse &lt;- or = to re-assign/change elements in your vector\n\nage[2] = 99\nprint(age)\n## [1] 20 99 30 70\n\n\n\n\nThe : operator in R is not the division operator. It actually creates a range of integer values with start:end:\n\n1:5\n## [1] 1 2 3 4 5\n\nWhich is really useful for indexing:\n\nage[1:3]\n## [1] 20 99 30\n\n\n\nMatrix\nUsually a dataset consist not of only one variable/vector but of several variables (columns) and observations (rows), for example:\n\nage = c(20, 30, 32, 40)\nweight = c(60, 70, 72, 80)\n\nwe can use higher order data structures to combine these variables in a two dimensional array (like we would, for example, do in excel) using the matrix(...) function:\n\ndataset = matrix(NA, 4, 2)\ndataset # empty dataset\n##      [,1] [,2]\n## [1,]   NA   NA\n## [2,]   NA   NA\n## [3,]   NA   NA\n## [4,]   NA   NA\ndataset[,1] = age\ndataset[,2] = weight\ndataset\n##      [,1] [,2]\n## [1,]   20   60\n## [2,]   30   70\n## [3,]   32   72\n## [4,]   40   80\n\nSimilar to a vector we can index certain elements in the matrix or at the same time entire rows or columns. Since is has now two dimensions, we change [i] to [row_i, col_j]. The first argument specifies which row and the second argument which column should be returned. There are again a few handy tricks, above we left the rows empty (dataset[,1]) which will R interpret as “use all rows”, in that way we can print/return entire columns or rows:\n\ndataset[,1] # first column\n## [1] 20 30 32 40\ndataset[1,] # first row\n## [1] 20 60\n\n\n\nDon’t worry, you don’t have to create your own data sets like we did in this section. When you import your data into R, it is automatically returned as a matrix (or as data.frame, see below).\nA limitation of the matrix() is that is can only consist of one data type (like the vectors), if we mix the data types, all will be cast to the same data type:\n\ncbind(age, names)\n##      age  names   \n## [1,] \"20\" \"Anna\"  \n## [2,] \"30\" \"Daniel\"\n## [3,] \"32\" \"Martin\"\n## [4,] \"40\" \"Laura\"\n\n\n\ncbind() is a function that combines columns (“column binds”), it can be used as a shortcut to create a matrix from several vectors. Another important command is rbind(...) which combines vectors (or matrices) over their rows:\n\nrbind(age, names)\n##       [,1]   [,2]     [,3]     [,4]   \n## age   \"20\"   \"30\"     \"32\"     \"40\"   \n## names \"Anna\" \"Daniel\" \"Martin\" \"Laura\"\n\n\n\nData.frames\nThe data.frame() can handle variables with different data types. Data.frames are similar to matrices, they are two dimensional and the indexing is the same:\n\ndf = data.frame(age, names, weight)\ndf\n##   age  names weight\n## 1  20   Anna     60\n## 2  30 Daniel     70\n## 3  32 Martin     72\n## 4  40  Laura     80\nstr(df)\n## 'data.frame':    4 obs. of  3 variables:\n##  $ age   : num  20 30 32 40\n##  $ names : chr  \"Anna\" \"Daniel\" \"Martin\" \"Laura\"\n##  $ weight: num  60 70 72 80\n\n(we will talk below more about data.frames)",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#getting-an-overview-of-a-dataset",
    "href": "1C-Exercise.html#getting-an-overview-of-a-dataset",
    "title": "Exercise - R basics",
    "section": "Getting an overview of a dataset",
    "text": "Getting an overview of a dataset\nWe work with the airquality dataset:\n\ndat = airquality\n\n\n\nSeveral example datasets are already available in R. The airquality dataset with daily air quality measurements (see ?airquality). Another famous dataset is the iris dataset with flower trait measurements for three species (see ?iris).\nCopy the code into your code editor and execute it.\nBefore working with a dataset, you should always get an overview of it. Helpful functions for this are:\n\nstr()\nView()\nhead() and tail()\n\nTry out these functions and provide answers to the following questions:\n\n\n\n\n\n\nQuestions\n\n\n\n\nWhat is the most common atomic class in the airquality dataset? integernumericcharacterfactor\nHow many rows does the dataset have? \nWhat is the last value in the column “Temp”? \n\n\nTo see all this, run\n\ndat = airquality\nView(dat)\nstr(dat)\nhead(dat)\ntail(dat)\n\n\n\n\nHints:\n\nRun str(airquality)\nSee ?nrow or ?dim\nRun tail(airquality$Temp)\n\n\n\nClick here to see the solution\n\nWhat is the most common atomic class in the airquality dataset?\n\ninteger\nfunction str() helps to find this out\n\nHow many rows does the dataset have?\n\n153\nthis is easiest to see when using the function str(dat)\ndim(dat) or nrow(dat) give the same information\n\nWhat is the last value in the column “Temp”?\n\n68\ntail(dat) helps to find this out very fast",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#accessing-rows-and-columns-of-a-data-frame",
    "href": "1C-Exercise.html#accessing-rows-and-columns-of-a-data-frame",
    "title": "Exercise - R basics",
    "section": "Accessing rows and columns of a data frame",
    "text": "Accessing rows and columns of a data frame\nYou have seen how you can use squared brackets [ ] and the dollar sign $ to extract parts of your data. Some people find this confusing, so let’s repeat the basic concepts:\n\nsquared brackets are used as follows: data[rowNumber, columnNumber]\nthe dollar sign helps to extract colums with their name (good for readability): data$columnName\nthis syntax can also be used to assign new columns, simply use a new column name and the assign operator: data$newColName &lt;-)\n\n\n\n\n\n\n\nQuestion\n\n\n\nThe following lines of code assess parts of the data frame. Try out what they do and sort the code lines and their meaning:\nWhich of the following commands\n\ndat[2, ]\ndat[, 2]\ndat[, 1]\ndat$Ozone\nnew = dat[, 3] + dat[, 4]\ndat$new = dat[, 3] + dat[, 4]\ndat$NAs = NA\nNA -&gt; dat$NAs \n\nwill get you\n\nget the second row\nget column Ozone\ngenerate a new column with NA’s\ncalculate the sum of columns 3 and 4 and assign to a new column\n\n\n\n\n\nHint: Some of the code lines actually do the same; chose the preferred way in these cases.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nget second row\n\ndat[2, ] is correct\ndat[, 2] gives the second column\n\nget column Ozone\n\ndat$Ozone is the best option\ndat[, 1] gives the same result, but is much harder to understand later on\n\ngenerate a new column with NA’s\n\ndat$NAs = NA is the best option\nNA -&gt; dat$NAs does the same, but the preferred syntax in R is having the new variable on the left hand side (the arrow should face to the left not right)\n\ncalculate the sum of columns 3 and 4 and assign to a new column\n\ndat$new = dat[, 3] + dat[, 4] is correct\nnew = dat[, 3] + dat[, 4] creates a new object but not a new column in the existing data frame",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#filtering-data",
    "href": "1C-Exercise.html#filtering-data",
    "title": "Exercise - R basics",
    "section": "Filtering data",
    "text": "Filtering data\nTo use the data, you must also be able to filter it. For example, we may be interested in hot days in July and August only. Hot days are typically defined as days with a temperature equal or &gt; 30°C (or 86°F as in the dataset here). Imagine, your colleague tried to query the data accordingly. She/he also found a mistake in each of the first 4 rows and wants to exclude these, but she/he is very new to R and made a few common errors in the following code:\n\n# Return only rows where the temperature is exactly is 86\ndat[dat$Temp = 86, ]\n\n# Return only rows where the temperature is equal or larger than 86\ndat[dat$Temp &gt;= 86]\n\n# Exclude rows 1 through 4\ndat[-1:4, ]\n\n# Return only rows for the months 7 or 8\ndat[dat$Month == 7 | 8, ]\n\n\n\n\n\n\n\nQuestion\n\n\n\nCan you fix his/her mistakes? These hints may help you:\n\nrows or columns can be excluded, if the numbers are given as negative numbers\n== means “equals”\n& means “AND”\n| means “OR” (press “AltGr”+“&lt;” to produce |, or “option”+“7” on MacOS)\nexecuting the erroneous code may help you to spot the problem\nrun parts of the code if you don’t understand what the code does\nthe last question is a bit trickier, no problem if you don’t find a solution\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis is the corrected code:\n\n# Return only rows where the temperature is exactly is 86\ndat[dat$Temp == 86, ]\n\n# Return only rows where the temperature is equal or larger than 86\ndat[dat$Temp &gt;= 86, ]\n\n# Exclude rows 1 through 4\ndat[-(1:4), ]\n\n# Return only rows for the months 7 or 8\ndat[dat$Month == 7 | dat$Month == 8, ]\ndat[dat$Month %in% 7:8, ] # alternative expression\n\n\n\n\n\n\nThe %in% operator is useful when you want to check whether a value is inside a vector or not:\n\n5 %in% c(1, 2, 3, 4, 5)\n## [1] TRUE\n\nWe will discuss the results together.\nWhen you are finished, save your R script!",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#last-task---install-ecodata-package",
    "href": "1C-Exercise.html#last-task---install-ecodata-package",
    "title": "Exercise - R basics",
    "section": "Last task - Install EcoData package",
    "text": "Last task - Install EcoData package\nDuring the course, we will use some datasets that we compiled in the \\(EcoData\\) package. To access the datasets, you need to install the package from github. To do this, you will also need to install the \\(devtools\\) package.\nTry the following code to install the two packages:\n\ninstall.packages(\"devtools\")\nlibrary(devtools)\ndevtools::install_github(repo = \"TheoreticalEcology/EcoData\", \n                         dependencies = F, build_vignettes = F)\nlibrary(EcoData)\n\nRemember that you have to install a package only once. If you open R Studio the next time, it is enough to run library(EcoData).\n\nAlternative ways to get EcoData\nIf the installation didn’t work, download the package file manually from\nhttps://github.com/TheoreticalEcology/ecodata/releases/download/v0.2.1/EcoData_0.2.1.tar.gz\nStore the file on your computer in the same folder where you created your R project. Then run the following code:\n\ninstall.packages(\"EcoData_0.2.1.tar.gz\", \n                 repos = NULL, type = \"source\")\nlibrary(EcoData)\n\nIf this wasn’t successful either, you can download the combined datasets from elearning (see Organisation and every-day material)\nStore the file on your computer in the same folder where you created your R project. Then run the following code:\n\nload(\"EcoData.Rdata\")\n\n(Note that you will not be able to access the dataset descriptions when you use this option).",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "1C-Exercise.html#bonus---advanced-programming",
    "href": "1C-Exercise.html#bonus---advanced-programming",
    "title": "Exercise - R basics",
    "section": "Bonus - Advanced programming",
    "text": "Bonus - Advanced programming\nUntil now we have only learned how to use functions and indexing of data structures. But what are functions?\n\nFunctions\nA functions are self contained blocks of code that do something, for example, the average of a vector is given by:\n\\[\nAverage = \\frac{1}{N} \\sum_{i=1}^N x_i\n\\]\nIn R we can easily calculate the sum over a vector by using the function sum():\n\nvalues = 1:10\nprint(values)\n##  [1]  1  2  3  4  5  6  7  8  9 10\n\n# Average \nsum(values)/length(values)\n## [1] 5.5\n\nTo do that now more easily and in a comprehensive way for many different variables, we can define a function to calculate the mean:\n\naverage = function(x) {\n  average = sum(x)/length(x)\n  return(average)\n}\naverage(values)\n## [1] 5.5\n\nA function consists of: - An expressive name - Arguments function(arg1, arg2, arg3), the arguments can be used to pass the data to the function, or to change the behaviour of the function (see below) - A function body, inside curly brackets { } where the actual magic happens - return(...) what should be returned from the function\nThe advantages: - you can compress big code blocks within one function call - reproducibility, we avoid writing the same code again and again, if we want to change the way how we calculate the average, we have to change it only in one place - clarity, the name of the function can give us a hint about what the function is doing\nArguments\nArguments can be either used to pass data to the function or to change the behaviour of the function. Moreover, you can set default values to the function. If arguments have default values, they do not have to be specified (specifiying means that we have to fill this argument):\n\n# Should NAs be removed or not\naverage = function(x, remove_na) {\n  if(!remove_na) {\n    average = sum(x)/length(x)\n  } else {\n    average = sum(x, na.rm = TRUE)/length(x[complete.cases(x)])\n  }\n  return(average)\n}\n\nvalues = c(5, 4, 3, NA, 5, 2)\n\n# no default option for remove_na, we have to specify it!\naverage(values, remove_na = TRUE)\n## [1] 3.8\n\n# In this case, it is better to set a default option for remova_na:\naverage = function(x, remove_na = TRUE) {\n  if(!remove_na) {\n    average = sum(x)/length(x)\n  } else {\n    average = sum(x, na.rm = TRUE)/length(x[complete.cases(x)])\n  }\n  return(average)\n}\n\naverage(values)\n## [1] 3.8\n\n\n\nif(condition) {  } else { } the if/else statements runs code if a certain condition is true or not. If the condition is true, the first code block {  } is run, if it is false, the second (after the else) is run:\n\nvalues = 1:5\nif(length(values) == 5) {\n  print(\"This vector has length 5\")\n} else {\n  print(\"This vector has not length 5\")\n}\n## [1] \"This vector has length 5\"\n\nArguments are matched by the name or, if names are not specified, by the order:\nfunc(x1, x2, x3) will be interpreted as func(arg1 = x1, arg2 = x2, arg3 = x3)\nBut be careful, if you are unsure about the correct order, you should pass them by their name (func(arg1 = x1, arg2 = x2, arg3 = x3))\n\n\nLoops\nLoops are another important code structure. Example: We want to go over all values of a vector, calculate the square root of it, and overwrite the old value with the new value:\n\nvalues = c(20, 33, 25, 16)\nvalues[1] = sqrt(values[1])\nvalues[2] = sqrt(values[2])\nvalues[3] = sqrt(values[3])\nvalues[4] = sqrt(values[4])\n\nNow what should we do if we have thousands of observations? Loops are the solution! We can use them to automatically “run” a specific vector and then do something with it (well it sounds cryptic but it is actually quite easy):\n\nfor(i in 1:4) { # i in 1:4 means that i should be 1, 2, 3, and 4\n  print(i)\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n\n# Let's use it to automatize the previous computation:\nfor(i in 1:4) {\n  values[i] = sqrt(values[i])\n}\nvalues\n## [1] 2.114743 2.396782 2.236068 2.000000\n\n# Even better: do not hardcode the length of the vector:\nfor(i in 1:length(values)) {\n  values[i] = sqrt(values[i])\n}\nvalues\n## [1] 1.454215 1.548154 1.495349 1.414214\n\nOur code will now always work, even if we change the length of the values variable!\n\n\n\n\n\n\nBonus Question\n\n\n\nWrite functions for:\n\nCalculate the sum for all values in a matrix given by (we want to write our own implementation of the internal sum(...) function):\n\nmy_matrix = matrix(1:200, 20, 10)\n\nUse the internal sum(...) function to check whether your function is correct!\nExtend the function with arguments that specify that the sum should be calculate over rows, columns, or both (if we calculate the sum over rows or columns, then a vector with n sums for n rows or n columns should be returned).\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsum_matrix function\n\n\n\nsum_matrix = function(X) {\n\n  n_row = nrow(X)\n  n_col = ncol(X)\n  result = 0\n  for(i in 1:n_row) {\n    for(j in 1:n_col) {\n      result = result + X[i,j]\n    }\n  }\n  return(result)\n}\n\n\nsum_matrix_extended function\n\n\n  sum_matrix_extended = function(X, which = \"both\") {\n  if(which == \"both\") {\n    result = sum_matrix(X)\n  } else if(which == \"row\") {\n    result = apply(X, 1, sum)\n  } else if(which == \"row\") {\n    result = apply(X, 2, sum)\n  }\n  return(result)\n}\n\nThe apply(...) function can be used to automatically loop over rows (MARGIN=1) or columns (MARGIN=2) and apply a function on each element (rows or columns) which can be specified via apply(data, MARGIN = 1, FUN = sum)",
    "crumbs": [
      "Data input and manimulation",
      "Exercise - R basics"
    ]
  },
  {
    "objectID": "2A-DescriptiveStatistics.html",
    "href": "2A-DescriptiveStatistics.html",
    "title": "4  Plotting and describing data",
    "section": "",
    "text": "4.1 Plotting",
    "crumbs": [
      "Descriptive Statistics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Plotting and describing data</span>"
    ]
  },
  {
    "objectID": "2A-DescriptiveStatistics.html#plotting",
    "href": "2A-DescriptiveStatistics.html#plotting",
    "title": "4  Plotting and describing data",
    "section": "",
    "text": "4.1.1 One variable\n\n4.1.1.1 Numerical variable - Histogram and Boxplot\n\nThe histogram plots the frequency of the values of a numerical variable with bins (otherwise each unique value will appear only once, the range will be cut in n elements). The number of bins is automatically inferred by the function but can be also changed by the user\nThe boxplot plots the distribution of a numerical variable based on summary statistics (the quantiles). The boxplot is particular useful for comparing/contrasting a numerical with a categorical variable (see below)\n\n\nBase Rggplot2\n\n\n\npar(mfrow = c(1,2)) # number of plots, one row, two columns\nhist(iris$Sepal.Length, \n     main = \"Histogram\", # title\n     xlab = \"Sepal.Length\", \n     ylab = \"Frequency\",\n     las = 1) # rotation of x and y values (las = 1, all of them should be horizontal)\n\nboxplot(iris$Sepal.Length,      \n        main = \"Boxplot\", # title\n        ylab = \"Values\")\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nplt1 = \n  ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram() +\n    ggtitle(\"Histogram\") +\n    xlab(\"Sepal.Length\") +\n    ylab(\"Frequency\") +\n    theme_bw() # scientific theme (white background)\n\nplt2 = \n  ggplot(iris, aes(y = Sepal.Length)) +\n    geom_boxplot() +\n      ggtitle(\"Boxplot\") +\n      ylab(\"Values\") +\n      theme_bw() \n\n\nggarrange(plt1, plt2, ncol = 2L, nrow = 1L)\n## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.1.2 Categorical variable - Barplot\n\nstr(mtcars)\n## 'data.frame':    32 obs. of  11 variables:\n##  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n##  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n##  $ disp: num  160 160 108 258 360 ...\n##  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n##  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n##  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n##  $ qsec: num  16.5 17 18.6 19.4 17 ...\n##  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n##  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n##  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n##  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\ncounts = table(mtcars$cyl)\ncounts\n## \n##  4  6  8 \n## 11  7 14\n\n\nBase Rggplot2\n\n\n\nbarplot(counts, \n        main = \"Barplot of Cyl\",\n        ylab = \"Number of occurrences\",\n        xlab = \"Cyl levels\",\n        col = \"#4488AA\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(mtcars, aes(x = cyl)) +\n  geom_bar(fill = \"#4488AA\") +\n    ggtitle(\"Barplot of Cyl\") +\n    xlab(\"Number of occurrences\") +\n    ylab(\"Cyl levels\") +\n    theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.2 Two variables\nThe general idea of plotting is to look for correlations / associations between variables, i.e. is there a non-random pattern between the two variables.\n\n4.1.2.1 Numerical vs numerical variable - Scatterplot\n\nBase Rggplot2\n\n\n\n# Scatterplot\npar(mfrow = c(1,2))\nplot(airquality$Solar.R, airquality$Ozone)\n\n# plot(Ozone ~ Solar.R, data = airquality) #the same\n\n# different symbol for each month\nplot(Ozone ~ Solar.R, data = airquality, pch = Month)\n\n\n\n\n\n\n\n\nWe can also add other objects such as lines to our existing plot:\n\npar(mfrow = c(1,1))\nplot(Ozone ~ Solar.R, data = airquality)\nabline(h = 50)\n\n\n\n\n\n\n\n\n\n\n\nplt1 = ggplot(airquality, aes(x = Solar.R, y = Ozone)) +\n        geom_point() +\n        theme_bw()\n\nplt2 = ggplot(airquality, aes(x = Solar.R, y = Ozone)) +\n        geom_point(shape = airquality$Month) +\n        theme_bw()\n\nggarrange(plt1, plt2, ncol = 2L, nrow = 1L)\n## Warning: Removed 42 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n## Removed 42 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n\n\n\n\n\n\n\n\nWe can also add other objects such as lines to our existing plot:\n\nggplot(airquality, aes(x = Solar.R, y = Ozone)) +\n  geom_point(shape = airquality$Month) +\n  geom_abline(intercept = 50, slope = 0) +\n    theme_bw()\n## Warning: Removed 42 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.2.2 Categorical vs numerical variable - Boxplot\nOften we have a numerical variable (e.g. weight/fitness) and a categorical vairable that tells us the group of the observation (e.g. control or treatment). To compare visually now the distributions of the numerical variable between the levels of the grouping variable, we can use a boxplot\n\nBase Rggplot2\n\n\n\nboxplot(mpg ~ cyl, mtcars, notch=TRUE) # formula notation\n## Warning in (function (z, notch = FALSE, width = NULL, varwidth = FALSE, :\n## alguns entalhes saíram fora das dobradiças ('caixa'): talvez definir\n## notch=FALSE\n\n\n\n\n\n\n\n# boxplot(x = mtcars$cyl, y = mtcars$mpg) # the same\n\n\n\n\nggplot(mtcars, aes(y = mpg, group = cyl)) +\n  geom_boxplot(notch=TRUE) +\n    theme_bw()\n## Notch went outside hinges\n## ℹ Do you want `notch = FALSE`?\n## Notch went outside hinges\n## ℹ Do you want `notch = FALSE`?",
    "crumbs": [
      "Descriptive Statistics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Plotting and describing data</span>"
    ]
  },
  {
    "objectID": "2B-SummaryStatistics.html",
    "href": "2B-SummaryStatistics.html",
    "title": "5  Summary statistics",
    "section": "",
    "text": "5.1 Correlation\nIf two variables A and B are related, we say that they are correlated (correlation != causality!!). We can calculate the magnitude of this relatedness with correlation factors. Correlation factors are normalized covariances (two variables have two variances, how they vary independent of each other, and they share a covariance, how much they vary together) are in the range of \\([-1,1]\\). The Pearson’s correlation coefficient/factor can be calculated by:\n\\[\nr = cor(x_1, x_2) = \\frac{ \\frac{1}{N} \\sum_{i=1}^n (x_{1i} - \\overline{x_{1}}) (x_{2i} - \\overline{x_{2}}) }{ \\sqrt{\\frac{1}{N} \\sum_{i=1}^n (x_{1i} - \\overline{x_{1}})^2 (x_{2i} - \\overline{x_{2}})^2} }\n\\]\nThe Pearson correlation works well with linear relationship, but poorly with non-linear relationships and is sensitive to outliers. Also transforming one of the variables affects the correlation:\nCode\nA = runif(1000, -6, 6)\nB = plogis(A*3.5)\npar(mfrow = c(1, 2))\nplot(B, A)\ntext(x = 0.6, y = -4, paste0(\"Pearson: \", round(cor(A, B, method = \"pearson\"), 3)))\nplot(log(B), A)\ntext(x = -12, y = 0, paste0(\"Pearson: \", round(cor(A, log(B), method = \"pearson\"), 3)))\nThe correlation factor for the untransformed data is 0.9 but they have a perfect relationship.\nRank correlation factors\nIdea: Arranging the data following their order and using their rank 1…n for x und y, respectively. There two different rank correlation factors:\ncor(A, B)\n## [1] 0.9096673\ncor(order(A), order(B)) # Spearman\n## [1] 1\ncor(A, B, method = \"spearman\") # Spearman\n## [1] 1\ncor(A, B, method = \"kendall\")\n## [1] 1\nExample:\ncor(airquality$Solar.R, airquality$Ozone, use = \"complete.obs\") # pearson = default\n## [1] 0.3483417\ncor(airquality$Solar.R, airquality$Ozone, use = \"complete.obs\", method = \"spearman\")\n## [1] 0.3481865\n\n# pairs plot: correlates all variables to each other\nplot(airquality)\n\n\n\n\n\n\n\npairs(airquality) #the same\n\n# you can change what is plotted in upper and lower panel:\n# copy function from help\npanel.cor &lt;- function(x, y, digits = 2, prefix = \"\", cex.cor, ...)\n{\n  usr &lt;- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(0, 1, 0, 1))\n  r &lt;- abs(cor(x, y, use = \"complete.obs\")) ### complete.obs must be added manually\n  txt &lt;- format(c(r, 0.123456789), digits = digits)[1]\n  txt &lt;- paste0(prefix, txt)\n  if(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * r)\n}\npairs(airquality, lower.panel = panel.smooth, upper.panel = panel.cor)",
    "crumbs": [
      "Descriptive Statistics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary statistics</span>"
    ]
  },
  {
    "objectID": "2B-SummaryStatistics.html#correlation",
    "href": "2B-SummaryStatistics.html#correlation",
    "title": "5  Summary statistics",
    "section": "",
    "text": "Spearman: calculate Pearson based on ranks\nKendall: counts the number of data pairs that point in the same direction\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nDescriptive statistics characterize properties of the data without providing any test or statement of probability.",
    "crumbs": [
      "Descriptive Statistics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary statistics</span>"
    ]
  },
  {
    "objectID": "2A-Exercise.html",
    "href": "2A-Exercise.html",
    "title": "Exercise - Plots and summary statistics",
    "section": "",
    "text": "Contingency tables\nHere, we will have a look at the data set “arthritis” from the “EcoData” package. The study was conducted as a double-blind clinical trial investigating a new treatment against arthritis. The improvement was measured as a categorical variable with the possible outcomes “Improved”, “Some” or “None”.\nInstall and then load the package “EcoData” and have a look at the data using the View() function. This will open a new tab next to your R script. To return to your script, close the new tab or click on your script.\nlibrary(EcoData)\n# View(arthritis)\n\n# Get the data\ndat &lt;- arthritis\n\n# Coerce columns ’Improved' and 'Treatment' to (ordered) factors\n# (When the factor is ordered, other functions like table() and barplot() will use this order.\n# Otherwise, the levels will be ordered alphabetically.)\ndat$Improved &lt;- factor(dat$Improved, levels = c(\"None\",\"Some\",\"Marked\"), ordered = TRUE)\ndat$Treatment &lt;- as.factor(dat$Treatment)\nstr(dat)\n## 'data.frame':    84 obs. of  5 variables:\n##  $ ID       : int  57 46 77 17 36 23 75 39 33 55 ...\n##  $ Treatment: Factor w/ 2 levels \"Placebo\",\"Treated\": 2 2 2 2 2 2 2 2 2 2 ...\n##  $ Sex      : chr  \"Male\" \"Male\" \"Male\" \"Male\" ...\n##  $ Age      : int  27 29 30 32 46 58 59 59 63 63 ...\n##  $ Improved : Ord.factor w/ 3 levels \"None\"&lt;\"Some\"&lt;..: 2 1 1 3 3 3 1 3 1 1 ...\nAn important function for categorical data is table(). It produces a contingency table counting the occurrences of the different categories of one variable or of each combination of the categories of two (or more) variables.\nWe are curious how many patients actually improved in the study and how this is influenced by the treatment. To show this graphically, we produced two plots (see below) using the following functions:",
    "crumbs": [
      "Descriptive Statistics",
      "Exercise - Plots and summary statistics"
    ]
  },
  {
    "objectID": "2A-Exercise.html#contingency-tables",
    "href": "2A-Exercise.html#contingency-tables",
    "title": "Exercise - Plots and summary statistics",
    "section": "",
    "text": "table()\nplot() and barplot()\n(str())\n(summary())\n\n\n\n\n\n\n\nTask\n\n\n\nYour task is now to reconstruct the two plots shown below by using these functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat do you think of the study now? Could you already draw conclusions from this plot?\n\n\n\n\nHints for plot 1\nWhat kind of plot is shown here? How many variables are shown in the plot? Approach: First, create a new object consisting of the table of the variable of interest. Then use this object for plotting. Changing plot elements: Have a look at the help of the plotting-function to find out how to change the y- and x-axis labels. What do you notice on the y-axis? You can change the limits of the y-axis using “ylim = c(from, to)” as an argument in the plotting function.\n\nHints for plot 2\nWhat kind of plot can you see here? How many variables does it show? To plot this you need to create a contingency table with the variables of interest. Changing plot elements: You can name the variables in your contingency table (e.g. name = variable, othername = othervariable). The name you assign to your table will be used as the title in the plot.\n\n\n\nClick here to see the solution\n\nPlot 1\n\ncounts &lt;- table(dat$Improved)  # create a table which gives you counts of the three categories in the \"Improved\" variable\n\nbarplot(counts,            # create a barplot of your table\n        ylim = c(0,50),    # change the limits of your y axis: starting from zero to 50\n        xlab = \"Improved\",  # add a label to your x axis\n        ylab = \"Frequency\")  # add a label to your y axis\n\n\n\n\n\n\n\n\nPlot 2\n\nRatios &lt;- table(Improved = dat$Improved, Treatment = dat$Treatment)  # create a table with the assigned name \"ratios\", give the name \"Improved\" to the first variable which is the variable Improved from the data set Arthritis, give the name \"Treatment\" to the second variable which is the variable Treatment from the data set Arthritis\nplot(Ratios)  # create a plot of the table \"ratios\"\n\n\n\n\n\n\n\n\nTo view the tables with the names “counts” and “Ratios” you can simply execute their names:\n\ncounts\n## \n##   None   Some Marked \n##     42     14     28\nRatios\n##         Treatment\n## Improved Placebo Treated\n##   None        29      13\n##   Some         7       7\n##   Marked       7      21\n\nCould you already draw conclusions from this plot? No, because this is only a descriptive plot. You can say that a large proportion of the patients that got a placebo treatment did not improve while a large proportion of the patients that got the new treatment improved markedly. However, this could also be the result of random variation and sampling. We need inferential statistics to make conclusions about the effectiveness of the treatment.",
    "crumbs": [
      "Descriptive Statistics",
      "Exercise - Plots and summary statistics"
    ]
  },
  {
    "objectID": "2A-Exercise.html#histogram",
    "href": "2A-Exercise.html#histogram",
    "title": "Exercise - Plots and summary statistics",
    "section": "Histogram",
    "text": "Histogram\nNow let’s have a look at the “birdabundance” dataset, which is in the “EcoData” package. This is not stored at CRAN (the official platform for R packages, but at github where we host our own code collections). If you haven’t done this yet, use the code below to install the package (note that you also need the “devtools” package to do this. Again, to load it and make the data set accessible, execute the function library(EcoData). To view the data set you can use the View() function again.\nYou can also get more explanations on the data set via the help.\n\ninstall.packages(\"devtools\")\nlibrary(devtools)\ndevtools::install_github(repo = \"TheoreticalEcology/EcoData\", dependencies = T, build_vignettes = T)\nlibrary(EcoData)\nView(birdabundance)\n\nThe dataset has been assessed by scientists in Australia who counted birds in forest fragments and looked for drivers that influence these bird abundances, e.g. the size of a forest fragment and the distance to the next fragment. We want to see how these distances vary. A histogram is the standard figure to depict one numerical variable, such as for example distance measurements.\n\n\n\n\n\n\nTask\n\n\n\nYour task is now to reconstruct the following histogram including the labels, colors and lines using the functions:\n\nhist() to create a histogram\nabline() to add (vertical) lines to your histogram\n\nThink about what the histogram tells you about the distances between each forest fragment and the next forest fragment. What do the red and purple lines represent? Which site was the furthest away from forest fragments?\n\n\n\n\n\n\n\n\n\nHints for plotting\nChange the color (look at the help to see how). You can also try other colors, e.g. your favorite color (you can find all available colors with the function colors()). Change the bar widths (breaks). Play around to see how they change. When changing the bar widths, what do you notice on the y-axis? You can change the y-axis limits using “ylim” (see examples for hist(), second last line). Change the title and the x-axis name of your histogram using the arguments “main” and “xlab”.\nTo add the lines, try the abline() function with the argument “v = 90” and look what happens. To remove the line, you have to execute the code producing your histogram again. Remember that abline() is a low level plotting function, which means it only adds an element to an existing plot! Instead of calculating the depicted values with a function and then pasting the values into your abline function, you can also directly use the function in abline().\nSee an example on the right.\n\n\n\n\nClick here to see the solution\n\nYou can plot the histogram like this:\n\nhist(birdabundance$DIST,  # plot a histogram of the varriable distance from the data set birdabundance\n     breaks = 20,  # change bar widths, here we make them smaller\n     col = \"blue\",  # change color to blue\n     ylim = c(0,20),  # change the range of the y axis to from 0 to 20\n     main = \"Distance distribution\",  # change title of the plot\n     xlab = \"Distance to the next forest fragment\")  # change x axis name\nabline(v = mean(birdabundance$DIST), col = \"red\")  # add a vertical line with an x value equal to the mean of the variable distance\nabline(v = median(birdabundance$DIST), col = \"purple\")  # add a vertical line with an x value equal to the median of the variable distance\n\n\n\n\n\n\n\n\nWhat do the red and purple lines represent?\nThe red line represents the mean distance between forest fragments, while the purple line represents the median.\nWhich site was the furthest away from forest fragments?\n\n# Extract the line in which the variable DIST takes its maximum\nbirdabundance[which.max(birdabundance$DIST),]\n##    Site ABUND AREA DIST LDIST YR.ISOL GRAZE ALT\n## 48   48  39.6   49 1427  1557    1972     1 180\n\nThe site number 48 was the furthest away.\n\n\n\n\nhist(airquality$Temp)\nabline(v = 90, col = \"blue\")\nabline(v = median(airquality$Temp), col = \"red\")",
    "crumbs": [
      "Descriptive Statistics",
      "Exercise - Plots and summary statistics"
    ]
  },
  {
    "objectID": "2A-Exercise.html#scatterplot",
    "href": "2A-Exercise.html#scatterplot",
    "title": "Exercise - Plots and summary statistics",
    "section": "Scatterplot",
    "text": "Scatterplot\nAs you’ve learned by now, plot() can create different types of plots depending on the type of the input data. It creates a scatterplot when plotting two numerical variables. Now we are interested to see how the abundance of birds is affected by the distance to the next forest fragment, and if there is another variable that is important for this relationship (visualized here by the color of the points).\n\n\n\n\n\n\nTask\n\n\n\nAgain, your task is to reconstruct the following plot using the following functions:\n\nplot()\n(str())\n(summary())\n\nWhat do you notice about the distribution of the colors along bird abundance?\nWhat is the mean bird abundance per color?\n\n\n\n\n\n\n\n\n\nHints for plotting:\nWhat is plotted on the x-axis, what on the y-axis?\nThere are two different ways to write the plot function. One is to stick with the “Usage” in the help of the plot function (giving coordinates along the x-axis as the first attribute and those along the y-axis as the second attribute). The other way is to write the relationship between x and y as a formula that is: y~x, data = dataset Use google to find out how you can change the point shapes in your plot.\nLook at the dataset to find out which variable is indicated by the color of the points in the plot. Hint: It is a variable indicating 5 intensity levels. To change the color, include the attribute “col” in your plot function and set it equal to the variable.\nTo get a color gradient you can create a function with the following code. Apply it before producing your plot and use the created function rbPal() as the color in the plot.\n\n# Palettes can be created with a function for the grDevices package\ninstall.packages(\"grDevices\")\nlibrary(grDevices)\n\n# Create a function to generate a continuous color palette from red to blue\nrbPal &lt;- colorRampPalette(c('red','blue'))\n\n# Example for color in a plot\nplot(Ozone ~ Solar.R, data = airquality, \n     col = rbPal(12)[Month]) # you can use any number, here it's 12 because we have 12 months\n\n\n\n\n\nClick here to see the solution\n\nYou can either create a scatterplot of two numerical variables like this:\n\n#Create a function to generate a continuous color palette from red to blue\nrbPal &lt;- colorRampPalette(c('red','blue')) # rpPal for red to blue palette\n\nplot(birdabundance$DIST, birdabundance$ABUND,  # create a plot of the variables DIST against ABUND from the data set birdabundance\n     ylab = \"Distance (m)\",  # add the label \"Distance\" to the y axis\n     xlab = \"Bird abundance\",  # add the label \"Bird abundance\" to the x axis\n     col = rbPal(5)[birdabundance$GRAZE],  # color the data points according to their category in the variable GRAZE from the data set birdabundance\n     pch = 17) # change the point shape\n\n\n\n\n\n\n\n\nOr like this:\n\nplot(ABUND ~ DIST, data = birdabundance,  # create a plot of the variables DIST against ABUND from the data set birdabundance\n     xlab = \"Distance (m)\",  # add the label \"Distance\" to the x axis\n     ylab = \"Bird abundance\",  # add the label \"Bird abundance\" to the y axis\n     col = rbPal(5)[GRAZE],  # color the data points according to their category in the variable GRAZE as a gradient\n     pch = 17) # change the point shape\n\n\n\n\n\n\n\n\nThe advantage of the second version is that it uses the structure of “response variable (y) explained by (~) explanatory variable (x)”. Also, you tell the plot function which data set to use once and it will automatically draw the variables from there, while in the first version you name the data set and the respective variable each time (even for the color).\nWhat do you notice about the distribution of the colors along bird abundance?\nYou can see that the blue data points are only at the low abundances, whereas the red data points are rather at the higher abundances. Purple data points are throughout all abundances. There thus seems to be a correlation between the grazing classes and bird abundances.\nWhat is the mean bird abundance per color / level of grazing intensity?\n\n# Option 1: Using tidyverse / dplyr as shown at the end of section 2.0.1 Summary statistics:\nlibrary(dplyr)\n## \n## Anexando pacote: 'dplyr'\n## Os seguintes objetos são mascarados por 'package:stats':\n## \n##     filter, lag\n## Os seguintes objetos são mascarados por 'package:base':\n## \n##     intersect, setdiff, setequal, union\nbird_grouped &lt;- birdabundance %&gt;% # define dataset to be summarized\n  group_by(GRAZE) %&gt;% # define grouping factor\n  summarise(mean.abund = mean(ABUND)) # summarize by taking the mean of abundance\n\n# Option 2: Using base R and formula notation:\nbird_grouped &lt;- aggregate(ABUND~GRAZE, data = birdabundance, FUN = mean)\n\nbird_grouped\n##   GRAZE     ABUND\n## 1     1 28.623077\n## 2     2 21.950000\n## 3     3 21.286667\n## 4     4 20.571429\n## 5     5  6.292308",
    "crumbs": [
      "Descriptive Statistics",
      "Exercise - Plots and summary statistics"
    ]
  },
  {
    "objectID": "2A-Exercise.html#boxplot",
    "href": "2A-Exercise.html#boxplot",
    "title": "Exercise - Plots and summary statistics",
    "section": "Boxplot",
    "text": "Boxplot\nThe boxplot() function can be used to create boxplots - to visualize associations between continuous and categorical variables.\nThe function can be used in two ways (similar to the plot() function): a) by specifcing x and y arguments and b) the formula syntax (the preferred way!):\n\nboxplot(Sepal.Length~Species, data = iris)\n\n\n\n\n\n\n\n\n(Syntax: continuous variable ~ categorical variable )\n\n\n\n\n\n\nTask\n\n\n\nIn the MASS package there is a dataset (Melanoma) about patients with malignant melanoma:\n\nlibrary(MASS)\n## \n## Anexando pacote: 'MASS'\n## O seguinte objeto é mascarado por 'package:dplyr':\n## \n##     select\n## O seguinte objeto é mascarado por 'package:EcoData':\n## \n##     snails\ndf = Melanoma\ndf$sex = ifelse(df$sex == 0, \"female\", \"male\")\ndf$status = as.factor(df$status)\nstr(df)\n## 'data.frame':    205 obs. of  7 variables:\n##  $ time     : int  10 30 35 99 185 204 210 232 232 279 ...\n##  $ status   : Factor w/ 3 levels \"1\",\"2\",\"3\": 3 3 2 3 1 1 1 3 1 1 ...\n##  $ sex      : chr  \"male\" \"male\" \"male\" \"female\" ...\n##  $ age      : int  76 56 41 71 52 28 77 60 49 68 ...\n##  $ year     : int  1972 1968 1977 1968 1965 1971 1972 1974 1968 1971 ...\n##  $ thickness: num  6.76 0.65 1.34 2.9 12.08 ...\n##  $ ulcer    : int  1 0 0 0 1 1 1 1 1 1 ...\n\nWe want to check for associations between the age of the patients and the status of the melanoma, and later, at the same time for their sex:\nTasks:\n\nCreate boxplot with age against status\nCreate boxplot with age against status AND sex (both groups at the same time)\nAdd colors (for sex)\nAdd Notch\nIncrease spacing between the different groups (status)\nBonus: add the observations/points on top of the boxplot using the library(beeswarm) package\n\nCan we use boxplots to make inference (are there significant differences)? What is the Notch?\n\n\n\nHints:\n\nIf you need help with the boxplot for age against status AND sex, check google, for example this query\nSpacing: at argument in the boxplot( ) function\nInstall the beeswarm package via install.packages(\"beeswarm\")\n\n\n\n\nClick here to see the solution\n\nIf we use colors, we also need a legend!\nSometimes it is helpful to add the points/observations into the boxplot:\n\nlibrary(beeswarm) \nb = boxplot(age~sex+status, \n            at = c(1:2, 4:5, 7:8), # x coordinates\n            col = c(\"#FF002387\", \"#5544FF77\"),\n            data = df,\n            las = 1, # rotate labels so that all are horizontal \n            xaxt = \"n\", # omit x-axis labels+ticks, we will add them manually\n            xlab = \"\", # no xlab, unncessary\n            notch = TRUE\n            )\nbeeswarm(age~sex+status, \n         data = df, \n         add = TRUE,\n         at = c(1:2, 4:5, 7:8) # x - coordinates\n         )\naxis(1, # which side of the plot, 1 == x-axis\n     at = c(1.5, 4.5, 7.5), # x coordinates\n     labels = c(\"Status 1\", \"Status 2\", \"Status 3\") # labels\n     )\nlegend(\"bottomright\", # position of the legend (x and y coordinates can be also used)\n       bty = \"n\", # omit border line, personal preference\n       legend = c(\"Female\", \"Male\"),\n       col = c(\"#FF002387\", \"#5544FF77\"),\n       pch = 15 # point type (squares)\n       )\n\n\n\n\n\n\n\n\nCan we use boxplots to make inference (are there significant differences)? What is the Notch?:\nBox plots by themselves cannot be used to make conclusions about significant differences. Tomorrow we will learn that we have two statistics for hypothesis testing, the effects (e.g., means) and the uncertainties of those effects/estimates. The box plot shows the medians, which we could theoretically use for testing. However, the boxplot doesn’t report the uncertainty of the reports. The uncertainty of the estimate is not the width/height of the box, it is just the distribution of the variable, for example:\n\nset.seed(2)\nvar1 = rnorm(50)\nvar2 = rnorm(10000)\nsd(var1)/sqrt(50)\n## [1] 0.1597612\nsd(var2)/sqrt(10000)\n## [1] 0.009994205\ndf = data.frame(values = c(var1, var2), group = as.factor(c(rep(\"var1\", 50), rep(\"var2\", 10000))))\n\npar(mfrow = c(1,1))\nboxplot(values~group, data = df, notch = TRUE)\ntext(1, 4.5,xpd = NA, labels = paste0(\"N = 50, standard error = \", round(sd(var1)/sqrt(50), 4)))\ntext(2, 4.5,xpd = NA, labels = paste0(\"N = 10000, standard error = \", round(sd(var1)/sqrt(10000), 4)))\n\n\n\n\n\n\n\n\nThe standard error changes with the number of observations (more on this tomorrow), while the distribution (the box) remains relatively stable!\nThe notch is the confidence interval of the median, so 2*the standard error of the median. We can roughly say that there is a significant difference when the confidence intervals overlap!",
    "crumbs": [
      "Descriptive Statistics",
      "Exercise - Plots and summary statistics"
    ]
  },
  {
    "objectID": "2A-Exercise.html#correlation",
    "href": "2A-Exercise.html#correlation",
    "title": "Exercise - Plots and summary statistics",
    "section": "Correlation",
    "text": "Correlation\n\n\n\n\n\n\nTask\n\n\n\nIn the previous plot on bird abundance you’ve seen three variables. Now we want to know, how they are correlated with each other. Remember that we can use the function cor() to calculate correlations. Which of the following correlation coefficients (Pearson) belongs to which variable pair? Can you see these correlations in your previous plot?\n\n## [1] 0.2361125\n## [1] -0.6825114\n## [1] -0.2558418\n\nThink about the meaning of the correlation values (positive/negative, strength). Is it what you would have expected by looking at the plot?\n\n\n\n\nClick here to see the solution\n\n#### Solution\n\ncor(birdabundance$ABUND, birdabundance$DIST)\n## [1] 0.2361125\ncor(birdabundance$ABUND, birdabundance$GRAZE)\n## [1] -0.6825114\ncor(birdabundance$GRAZE, birdabundance$DIST)\n## [1] -0.2558418\n\nThe first correlation (abundance to distance) tells us that there is a small positive correlation between the two variables, but it does not tell us whether it is significant or not. We will properly test such relationships later in the course. In the scatter plot we have seen this weak positive correlation already. The second correlation (abundance to grazing) tells us that there is a stronger negative correlation between abundance and grazing. We have already seen a pattern of the color of the data points along bird abundances (red towards higher, blue towards lower abundances). The third correlation (grazing to distance) tells us that there is a small negative correlation between the two variables. However, the color pattern along distance is not as obvious as for abundance.",
    "crumbs": [
      "Descriptive Statistics",
      "Exercise - Plots and summary statistics"
    ]
  },
  {
    "objectID": "2A-Exercise.html#bonus---advanced-visualization-with-the-base-r-package",
    "href": "2A-Exercise.html#bonus---advanced-visualization-with-the-base-r-package",
    "title": "Exercise - Plots and summary statistics",
    "section": "Bonus - Advanced visualization with the base R package",
    "text": "Bonus - Advanced visualization with the base R package\nYou can create any kind of plot or even visualization in R. If you want to plot abstract objects in R, start with an empty plot window (plot(NULL,NULL, xlim = c(0,1), ylim = c(0,1), axes = F) and then fill it however you like, two examples:\nIn Pichler et al. 2020 we created Figure 5 A (an overview over the data used in the paper) using base R:\n\npar(mfrow = c(1,1),mar = c(0.3,3,1,3)+0.0,oma = c(1,0.3,2,1))\n# Fig5a\nplot(NULL,NULL, xlim = c(0,1), ylim = c(0,1), axes = F, xlab = \"\", ylab = \"\")\n#text(x = -0.06, y = 1.03, labels = \"(a)\", cex = 0.9, xpd = NA, font = 2)\npolygon(c(0,0.125,0.17,0.19,0.35,0.51,0.65,0.85), c(0,0.25,0.5,0.42,1,0.35,0.09,0), lwd = 2, col = \"lightgrey\", xpd = NA)\nbaseX = 0.72\nbaseYv = c(0.1,0.4,0.7)\ncols = RColorBrewer::brewer.pal(3, \"Accent\")\naltitude = c(\"50 m.a.s.l\", \"1000 m.a.s.l\", \"2000 m.a.s.l\")\nlineY = baseYv+0.05\nfor(i in 1:3) {\n  baseY = baseYv[i]\n  rect(xleft = baseX, xright = baseX+0.025,ybottom = baseY,ytop = baseY+0.1, col = cols[i], lwd = 0.8)\n  rect(xleft = baseX+0.035, xright = baseX+0.135,ybottom = baseY,ytop = baseY+0.1, col = cols[i], lwd = 0.8)\n  rect(xleft = baseX+0.035, xright = baseX+0.135,ybottom = baseY+0.11,ytop = baseY+0.135, col = cols[i], lwd = 0.8)\n  y = lineY[i]\n  lines(y = rep(y,2), x = c(0.0,baseX-0.05), lty = 3, lwd = 1.2, xpd = NA)\n  text(y = y+0.03, x = -0.15, labels = altitude[i], cex = 0.7, pos = 4, xpd = NA, font = 2)\n}\ntext(x = 0.85, y = baseYv[1]+0.05,pos = 4, xpd = NA, cex = 0.9, labels = \"Low\", font = 2)\ntext(x = 0.85, y = baseYv[2]+0.05,pos = 4, xpd = NA, cex = 0.9, labels = \"Mid\", font = 2)\ntext(x = 0.85, y = baseYv[3]+0.05,pos = 4, xpd = NA, cex = 0.9, labels = \"High\", font = 2)\ntext(x = 0.35, y = 0, pos = 3, labels = \"Costa Rica\", cex = 0.9, font = 2)\n\n\n\n\n\n\n\n\nGo through the code and try to understand which line or function call creates which element in the plot!\nFigure 3 in the same paper is based on the following function (which we have developed just for this paper!):\n\n\n\nspider = function(x1 = NULL,x2 = NULL, colRec = \"#ff9999\", alphaRec = 0.5,colRecBorder = NULL, titles = NULL, stepsText = NULL,singlePanel = F,\n                  rectangular = F,\n                  colSpider = \"#e6e6e6\" ,alphaSpider = 0.5,\n                  colBorder = c(\"#cccccc\",\"#cccccc\",\"#666798\",\"#cccccc\",\"#cccccc\"),\n                  maxValues = NULL,minValues = NULL,\n                  rad = 5, cexSteps = 1.4, cexProcent = 0.8,\n                  parValues = list(pty = \"s\"), cexPoints = 1.0, circleLines = 5, twistSteps = 90, cexTitles = 0.7){\n  if(is.null(colRecBorder)) colRecBorder = colRec\n  if(is.null(dim(x1))) x1 = matrix(x1, ncol = length(x1), nrow = 1)\n  if(!is.null(x2)){\n    if(is.null(dim(x2))) x2 = matrix(x2, ncol = length(x2), nrow = 1)\n  }\n  if(is.null(maxValues)) maxValues = rep(1, ncol(x1))\n  if(is.null(minValues)) minValues = rep(0, ncol(x1))\n  if(!is.null(colRec)) colRec2 = addA(colRec, 0.5*alphaRec)\n  if(!is.null(colRec)) colRec = addA(colRec, alphaRec)\n  if(length(colRec) == 1) {\n    colRec = rep(colRec, nrow(x1))\n    colRecBorder = rep(colRecBorder, nrow(x1))\n  }\n\n  ## scale:\n  for(i in 1:ncol(x1)){\n    x1[,i] = (x1[,i] + abs(minValues[i]))/(abs(minValues[i]) + maxValues[i])\n    if(!is.null(x2)) x2[,i] = (x2[,i] + abs(minValues[i]))/(abs(minValues[i]) + maxValues[i])\n    if(any(x1[,i] &gt; maxValues[i])) stop(\"Max values are lower than actual values\")\n    if(any(x1[,i] &lt; minValues[i])) stop(\"Min values are higher than actual values\")\n\n  }\n  if(!is.null(x2)){\n    if(nrow(x2) != nrow(x1)) stop(\"x1 and x2 do not have equal number of rows\")\n  }\n\n  ## init:\n  lineSeq = seq(rad*0.1,rad, length.out = 5)\n  tmpSinglePanel = T\n  do.call(par, parValues)\n  nseg=1440\n  nSeg = ncol(x1)\n\n  procent = matrix(0,circleLines,2)\n  colSpider &lt;- addA(colSpider, alphaSpider)\n\n  lines = circleLines\n  lineSeq = seq(rad*0.1,rad, length.out = lines)\n  angles = seq(0+twistSteps,360+twistSteps,length.out = nSeg+1)[1:(nSeg)]\n  baseRadar = function() {\n    plot(NULL, NULL, xlim = c(-5,5), ylim =c(-5,5),pty=\"s\", axes = F, xlab = \"\", ylab = \"\")\n    if(!rectangular)\n      for(i in 1:length(lineSeq)){\n        xx = lineSeq[i]*cos( seq(0,2*pi, length.out=nseg) )\n        yy = lineSeq[i]*sin( seq(0,2*pi, length.out=nseg) )\n        if(i == lines) polygon(xx,yy, col= colSpider, border = colBorder[lines], lty = 2, lwd = 1)\n        else if(i == ceiling(lines)) polygon(xx,yy, border = colBorder[ceiling(lines)], lty = 2)\n        else if(i == 1) polygon(xx,yy,  border = colBorder[lines], lty = 2)\n        else polygon(xx,yy, border = colBorder[i], lty = 2)\n      }\n    else\n      for(i in 1:length(lineSeq)){\n        xx = cos(deg2rad(angles))*lineSeq[i]\n        yy = sin(deg2rad(angles))*lineSeq[i]\n        if(i == lines) polygon(xx,yy, col= colSpider, border = colBorder[lines], lty = 2, lwd = 1)\n        else if(i == ceiling(lines)) polygon(xx,yy, border = colBorder[ceiling(lines)], lty = 2)\n        else if(i == 1) polygon(xx,yy,  border = colBorder[lines], lty = 2)\n        else polygon(xx,yy, border = colBorder[i], lty = 2)\n      }\n\n    for(counter in 1:length(angles)) {\n      segments(x0 = cos(deg2rad(angles[counter]))*lineSeq[1],\n               y0 =  sin(deg2rad(angles[counter]))*lineSeq[1],\n               x1 = cos(deg2rad(angles[counter]))*rad ,\n               y1 = sin(deg2rad(angles[counter]))*rad ,\n               col = colBorder[5])\n    }\n  }\n\n\n  ## plot rect\n  for(data in 1:nrow(x1)){\n    if(data == 1 || !singlePanel) baseRadar()\n    valuesP = matrix(0,nSeg,2)\n    textP = matrix(0,nSeg,2)\n    valuesPtrain = matrix(0,nSeg,2)\n    drTest = x1[data,,drop = F]\n    drTrain = x2[data,,drop = F]\n    for(i in 1:nSeg){\n      valuesP[i,1] = cos(deg2rad(angles[i]))*drTest[1,i]*(rad-lineSeq[1]) +\n        cos(deg2rad(angles[i]))*lineSeq[1]\n      valuesP[i,2] = sin(deg2rad(angles[i]))*drTest[1,i]*(rad-lineSeq[1]) +\n        sin(deg2rad(angles[i]))*lineSeq[1]\n\n      if(!is.null(x2)){\n        valuesPtrain[i,1] = cos(deg2rad(angles[i]))*drTrain[1,i]*(rad-lineSeq[1]) +\n          cos(deg2rad(angles[i]))*lineSeq[1]\n        valuesPtrain[i,2] = sin(deg2rad(angles[i]))*drTrain[1,i]*(rad-lineSeq[1]) +\n          sin(deg2rad(angles[i]))*lineSeq[1]\n      }\n\n      textP[i,1] = cos(deg2rad(angles[i]))*1.0*rad\n      textP[i,2] = sin(deg2rad(angles[i]))*1.08*rad\n    }\n    polygon(y = valuesP[,2], x = valuesP[,1], col = colRec[data],border = colRecBorder[data], lwd = 1.5)\n    points(y = valuesP[,2], x = valuesP[,1], pch = 16, col = colRecBorder[data], cex = cexPoints)\n\n    if(!is.null(x2)){\n      polygon(y = valuesPtrain[,2], x = valuesPtrain[,1], col = colRec2[data],border = colRecBorder[data], lwd = 1.5, lty = 2)\n      points(y = valuesPtrain[,2], x = valuesPtrain[,1], pch = 16, col = colRecBorder[data], cex = cexPoints, lty = 2)\n    }\n\n    ## Text\n    if(data == 1 || !singlePanel){\n      measures = stepsText\n      if(!is.null(measures)){\n        strl = max(sapply(measures,nchar))\n        anglesP = angles - 90\n        pos = sapply(angles, function(x) {\n          if(x &gt;= 45 && x &lt;= 95 ) return(3)\n          if(x&gt;95 && x&lt;240) return(2)\n          if(x&gt;=240 && x&lt;=300) return(1)\n          if(x&gt;300 &&x&lt;=450) return(4)\n          if(x&lt;45) return(4)\n        })\n        if(!is.na(cexSteps)) text(x = textP[,1], y = textP[,2], labels = measures, xpd = T, font = 2, cex = cexSteps, pos = pos)\n      }\n      if(!is.null(titles)) title(main = titles, outer = F, cex.main = cexTitles)\n    }\n    if(nrow(procent) == 3) procentLabels = c(\"  0%\",  \" 50%\",  \"100%\")\n    else procentLabels = c(\"  0%\", \" 25%\", \" 50%\", \" 75%\", \"100%\")\n    if(!singlePanel){\n      procent[,1] = 0.2\n      procent[,2] = lineSeq\n      text(x = procent[,1], y = procent[,2], labels = procentLabels,\n           adj = c(-0.2,0.8), font = 2, cex = cexProcent)\n    } else {\n      if(data == nrow(x1)){\n        procent[,1] = 0.2\n        procent[,2] = lineSeq\n        text(x = procent[,1], y = procent[,2], labels = procentLabels,\n             adj = c(-0.2,0.8), font = 2, cex = cexProcent)\n      }\n    }\n  }\n}\n\ndeg2rad &lt;- function(deg) {(deg * pi) / (180)} # degrees to radial\naddA    &lt;- function(col, alpha = 0.25) apply(sapply(col, col2rgb)/255, 2, function(x) rgb(x[1], x[2], x[3], alpha=alpha)) # change contrast\n\n\nspider(runif(10), runif(10))\n\n\n\n\n\n\n\n\nTry to roughly understand the different parts of the spider function!\n\n\n\n\n\n\nTask:\n\n\n\nPlot/Draw a donut!\n\n\n\n\nClick here to see the solution\n\n\nplot(NULL, NULL, type = \"n\", axes = FALSE, xlim = c(-1, 1), ylim = c(-1,1), xlab = \"\", ylab = \"\", pty=\"s\")\ntheta = seq(0, 2 * pi, length = 500) \npolygon(x = cos(theta), y =  sin(theta), col = \"#A58800\")\npolygon(x = 0.5*cos(theta), y =  0.5*sin(theta), col = \"#FFFFFF\")",
    "crumbs": [
      "Descriptive Statistics",
      "Exercise - Plots and summary statistics"
    ]
  },
  {
    "objectID": "3A-NHST.html",
    "href": "3A-NHST.html",
    "title": "6  Null Hypothesis Testing",
    "section": "",
    "text": "6.1 A recipe for hypothesis testing\nAim: We want to know if there is a difference between the control and the treatment.\nExample:\nImagine we do an experiment with two groups, one treatment and one control group. Test outcomes are binary, e.g. whether individuals are cured (1) or not (0).\nLet’s create a true world without effect:\nset.seed(123)\nPperGroup = 50 # number of replicates (e.g., persons per treatment group)\npC = 0.5 #probability of being cured in control group\npT = 0.5 #probability of being cured in treatment group;\n# pT is the same as pC, because we want to use these to get the distribution of the test statistic we define below when H0 is true (no effect)\n\n# Let's draw a sample from this world without effect\ncontrol = rbinom(n = 1, size = PperGroup, prob = pC)\ntreat = rbinom(n = 1, size = PperGroup, prob = pT)\n# calculate the test statistic: \ntreat/(treat+control)\n## [1] 0.5490196\n# and plot\nbarplot(c(control, treat), ylim = c(0, 50), \n        names.arg = c(\"control\", \"treatment\"),\n        ylab = \"Counts (cured patients)\",\n        main= \"Number of cured patients out of 50\")\nThe table with the results of the experiment would be:\ndata &lt;- data.frame(treatment = rep(c(\"control\", \"treatment\"), each = 50),\n                   cured = c(rep(c(0,1), times=c(50-control, control)),\n                           rep(c(0,1), times=c(50-treat, treat))))\ntable(data$treatment, data$cured)\n##            \n##              0  1\n##   control   27 23\n##   treatment 22 28\ntestStatistic = rep(NA, 100000) # to store our results\nfor (i in 1:100000) {\n  control = rbinom(n = 1, size = PperGroup, prob = pC)\n  treat = rbinom(n = 1, size = PperGroup, prob = pT)\n  testStatistic[i] = treat/(treat+control) # test statistic \n}\nhist(testStatistic, breaks = 50)\nhist(testStatistic, breaks = 50)\ntestStatisticData = 28/(28+23)\nabline(v = testStatisticData, col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n\nmean(testStatistic &gt; testStatisticData)\n## [1] 0.16044\n# compare each value in our testStatistic distribution with\n# the observed value and calculate proportion of TRUE values \n# (where testStatistic &gt; testStatisticData)\nBut we know actually that the test statistic follows a Chi2 distribution. So to get correct p-values we can use the prop.test for this test statistic:\nprop.test(c(28, 23), c(PperGroup, PperGroup))\n## \n##  2-sample test for equality of proportions with continuity correction\n## \n## data:  c(28, 23) out of c(PperGroup, PperGroup)\n## X-squared = 0.64026, df = 1, p-value = 0.4236\n## alternative hypothesis: two.sided\n## 95 percent confidence interval:\n##  -0.1149746  0.3149746\n## sample estimates:\n## prop 1 prop 2 \n##   0.56   0.46\n# other test statistic with known distribution\n# Pearson's chi-squared test statistic\n# no need to simulate\nWe pass the data to the function which first calculates the test statistic and then calculates the p-value using the Chi2 distribution.",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Null Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "3A-NHST.html#a-recipe-for-hypothesis-testing",
    "href": "3A-NHST.html#a-recipe-for-hypothesis-testing",
    "title": "6  Null Hypothesis Testing",
    "section": "",
    "text": "We introduce a Null hypothesis H0 (e.g. no effect, no difference between control and treatment)\nWe invent a test statistic\nWe calculate the expected distribution of our test statistic given H0 (this is from our data-generating model)\nWe calculate the p-value = probability of getting observed test statistic or more extreme given that H0 is true (there is no effect): \\(p-value = P(d\\ge D_{obs} | H_0)\\)\n\n\n\n\n\n\n\nInterpretation of the p-value\n\n\n\n\n\np-values make a statement on the probability of the data or more extreme values given H0 (no effect exists), but not on the probability of H0 (no effect) and not on the size of the effect or on the probability of an effect!\nIf you want to read more about null hypothesis testing and the p-value, take a look at Daniel Lakens Book\n\n\n\n\n\n\nWe need a test statistic. For example: proportion of cured patients in the treatment group from the total number of cured patients: treat/(treat+control)\nWe need the distribution of this test statistic under the null hypothesis (of no diference in proportion of cured patients between .\n\n\n\n\n\nwhy do whe use set.seed() here? Read the help file of the function to understand it! help(set.seed). Experiment changing the number in the set seed in your code and compare the results for tne number of cured patients in the treatment and control groups.\n\n\n\nNow, let’s do this very often (100,000 times!) to get the distribution under H0 (generating a null distribution of proportion of cured patients in the treatment group):\n\n\n\n\nIf you are confused with the for loop, read about it here\n\nWe now have our test statistic + the frequency distribution of our statistic if the H0 is true. Now we make an experiment: Assume that we observed the data we simulated first (our barplot): Control = 23, Treatment = 28.",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Null Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "3A-NHST.html#t-test",
    "href": "3A-NHST.html#t-test",
    "title": "6  Null Hypothesis Testing",
    "section": "6.2 t-test",
    "text": "6.2 t-test\nOriginally developed by Wiliam Sealy Gosset (1876-1937) who has worked in the Guinness brewery. He wanted to measure which ingredients result in a better beer. The aim was to compare two beer recipes and decide whether one of the recipes was better (e.g. to test if it results in more alcohol). He published under the pseudonym ‘Student’ because the company considered his statistical methods as a commercial secret.\n\n\n\n\n\n\nt-test assumptions\n\n\n\n\nData in both groups is normally distributed\nH0 : the means of both groups are equal\n\n\n\nThe idea is that we have two normal distributions (e.g. alcohol distributions):\n\n\nCode\nset.seed(1)\nA = rnorm(100, mean = -.3)\nB = rnorm(100, mean = .3)\nplot(density(A), col = \"red\", xlim = c(-2, 2), ylim = c(0, 0.6))\nlines(density(B))\nabline(v = mean(A), col = \"red\")\nabline(v = mean(B))\n\n\n\n\n\n\n\n\n\nAnd our goals is now to test if the difference between the two means of the variables is statistically significant or not.\nProcedure:\n\nCalculate variances and means of both variables\n\nA_m = mean(A)\nB_m = mean(B)\nA_v = var(A)\nB_v = var(B)\n\nCalculate t-statistic (difference between means / (Standard deviation/sample size)\n\nt_statistic = (A_m - B_m) / sqrt( A_v  / length(A) + B_v / length(B))\nt_statistic\n## [1] -3.452108\n\nCompare observed t with t distribution under H0 (which we can do by using the CDF function of the t-distribution:\n\npt( t_statistic,  # test statistic\n   df = length(A)+length(B)-2, # degrees of freedom, roughly = n_obs - n_parameters\n   lower.tail = TRUE\n  )*2\n## [1] 0.0006799933\n\n\n\n\n\n\n\n\nOne-sided or two-sided\n\n\n\nIf we do NOT know if the dataset from one group is larger or smaller than the other, we must use two-sided tests (that’s why we multiply the p-values with 2). Only if we are sure that the effect MUST be positive / negative, we can test for greater / less. Decide BEFORE you look at the data!\n\n\nLet’s compare it to the output of the t.test function which does everything for us, we only need to pass the data to the function:\n\nt.test(A, B, var.equal = TRUE)\n## \n##  Two Sample t-test\n## \n## data:  A and B\n## t = -3.4521, df = 198, p-value = 0.00068\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  -0.7122549 -0.1943542\n## sample estimates:\n##  mean of x  mean of y \n## -0.1911126  0.2621919\n\nUsually we also have to test for normality of our data, which we can do with another test.\nExample airquality\n\n# with real data\nhead(PlantGrowth)\n##   weight group\n## 1   4.17  ctrl\n## 2   5.58  ctrl\n## 3   5.18  ctrl\n## 4   6.11  ctrl\n## 5   4.50  ctrl\n## 6   4.61  ctrl\nboxplot(weight ~ group, data = PlantGrowth)\n\n\n\n\n\n\n\n\nctrl = PlantGrowth$weight[PlantGrowth$group == \"ctrl\"]\ntrt1 = PlantGrowth$weight[PlantGrowth$group == \"trt1\"]\n\n# attention: t test assumes normal dirstribution of measurements in both groups!\n# test normality before doing the t test:\nshapiro.test(ctrl)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  ctrl\n## W = 0.95668, p-value = 0.7475\nshapiro.test(trt1)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  trt1\n## W = 0.93041, p-value = 0.4519\n\n\nt.test(ctrl, trt1)\n## \n##  Welch Two Sample t-test\n## \n## data:  ctrl and trt1\n## t = 1.1913, df = 16.524, p-value = 0.2504\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  -0.2875162  1.0295162\n## sample estimates:\n## mean of x mean of y \n##     5.032     4.661\n# note that this is a \"Welch\" t-test\n# we will have a look at the differences among t-tests in the next large exercise\n\n# What is H0? equal means\n# What is the result? test is not significant, H0 is not rejected\n# Explain the different values in the output!\n\n\n\n\n\n\n\nShapiro - Test for normality\n\n\n\nIf you have a small sample size, the shapiro.test will always be non-significant (i.e. not significantly different from a normal distribution)! This is because small sample size leads to low power for rejecting H0 of normal distribution",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Null Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "3A-NHST.html#type-i-error-rate",
    "href": "3A-NHST.html#type-i-error-rate",
    "title": "6  Null Hypothesis Testing",
    "section": "6.3 Type I error rate",
    "text": "6.3 Type I error rate\nLet’s start with a small simulation example:\n\nresults = replicate(1000, {\n  A = rnorm(100, mean = 0.0)\n  B = rnorm(100, mean = 0.0)\n  t.test(A, B)$p.value\n})\nhist(results)\n\n\n\n\n\n\n\n\nWhat’s happening here? We have no effect in our simulation but there are many p-values lower than \\(\\alpha = 0.05\\):\n\nmean(results &lt; 0.05)\n## [1] 0.043\n\nSo in 0.043 of our experiments we would reject H0 even when there is no effect at all! This is called the type I error rate. Those are false positives.\n\n\n\n\n\n\nType I error rate and multiple testing\n\n\n\n\n\nIf there is no effect, the probability of having a positive test result is equal to the significance level \\(\\alpha\\). If you test 20 things that don’t have an effect, you will have one significant result on average when using a significance level of 0.05. If multiple tests are done, a correction for multiple testing should be used.\nThis problem is called multiple testing\n\ne.g.: if you try 20 different analyses (Null hypotheses), on average one of them will be significant.\ne.g.: if you test 1000 different genes for their association with cancer, and in reality, none of them is related to cancer, 50 out of the tests will still be significant.\nIf multiple tests are done, a correction for multiple testing should be used\nincreases the p-values for each test in a way that the overall alpha level is 0.05\n\n\n# conduct a t-test for each of the treatment combinations\n# save each test as a new object (test 1 to 3)\ncontrol = PlantGrowth$weight[PlantGrowth$group == \"ctrl\"]\ntrt1 = PlantGrowth$weight[PlantGrowth$group == \"trt1\"]\ntrt2 = PlantGrowth$weight[PlantGrowth$group == \"trt2\"]\n\ntest1 = t.test(control, trt1)\ntest2 = t.test(control, trt2)\ntest3 = t.test(trt1, trt2)\n\nc(test1$p.value, test2$p.value, test3$p.value)\n## [1] 0.250382509 0.047899256 0.009298405\n\n# now adjust these values\np.adjust(c(test1$p.value, test2$p.value, test3$p.value)) # standard is holm, average conservative\n## [1] 0.25038251 0.09579851 0.02789521\np.adjust(c(test1$p.value, test2$p.value, test3$p.value), method = \"bonferroni\") # conservative\n## [1] 0.75114753 0.14369777 0.02789521\np.adjust(c(test1$p.value, test2$p.value, test3$p.value), method = \"BH\") # least conservative\n## [1] 0.25038251 0.07184888 0.02789521\n# for details on the methods see help\n\n\n\n\nIf multiple testing is a problem and if we want to avoid false positives (type I errors), why don’t we use a smaller alpha level? Because if would increase the type II error rate",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Null Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "3A-NHST.html#type-ii-error-rate",
    "href": "3A-NHST.html#type-ii-error-rate",
    "title": "6  Null Hypothesis Testing",
    "section": "6.4 Type II error rate",
    "text": "6.4 Type II error rate\nIt can also happen the other way around:\n\nresults = replicate(1000, {\n  A = rnorm(100, mean = 0.0)\n  B = rnorm(100, mean = 0.2) # effect is there\n  t.test(A, B)$p.value\n})\nhist(results)\n\n\n\n\n\n\n\n\n\nmean(results &lt; 0.05)\n## [1] 0.292\n\nNo we wouldn’t reject the H0 in 0.708% of our experiments. This is the type II error rate (false negatives).\nThe type II error rate (\\(\\beta\\)) is affected by\n\nsample size \\(\\uparrow\\) , decreases \\(\\beta\\)\ntrue effect size \\(\\uparrow\\), decreases \\(\\beta\\)\n\\(\\alpha\\) \\(\\uparrow\\), decreases \\(\\beta\\)\nvariability (variance) \\(\\uparrow\\), increases \\(\\beta\\)\n\nAfter the experiment, the only parameter we could change would be the significance level \\(\\alpha\\), but increasing it would result in too high Type I error rates.",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Null Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "3A-NHST.html#statistical-power",
    "href": "3A-NHST.html#statistical-power",
    "title": "6  Null Hypothesis Testing",
    "section": "6.5 Statistical power",
    "text": "6.5 Statistical power\nWe can reduce \\(\\alpha\\) and we will get fewer type I errors (false positives), but type II errors (false negatives) will increase. So what can we do with this in practice?\n1- \\(\\beta\\) is the so called statistical power which is the rate at which a test is significant if the effect truly exists. Power increases with stronger effect, smaller variability, (larger \\(\\alpha\\) ), and more data (sample size). So, collect more data? How much data do we need?\nBefore the experiment, you can estimate the effect size and the variability. Together with alpha (known), you can calculate the power depending on the sample size:\n\n\nCode\nresults = \n  sapply(seq(10, 500, by = 20), function(n) {\n    results = replicate(100, {\n      A = rnorm(n, mean = 0.0)\n      B = rnorm(n, mean = 0.2) # effect is there\n      t.test(A, B)$p.value\n    })\n    power = 1 - mean(results &gt; 0.05)\n    return(power)\n  })\nplot(seq(10, 500, by = 20), results, xlab = \"Sample size\", ylab = \"Power\", main = \"\")\n\n\n\n\n\n\n\n\n\nWe call that a power analysis and there’s a function in R to do that:\n\npower.t.test(n = 10, delta = 1, sd = 1, type = \"one.sample\")\n## \n##      One-sample t test power calculation \n## \n##               n = 10\n##           delta = 1\n##              sd = 1\n##       sig.level = 0.05\n##           power = 0.8030962\n##     alternative = two.sided\n\n# Power increases with sample size (effect size constant, sd constant):\npow &lt;- function(n) power.t.test(n, delta = 1, sd = 1, type = \"one.sample\")$power\nplot(1:20, sapply(1:20, pow), xlab = \"Sample size\", ylab = \"Power\", pch = 20)\n\n\n\n\n\n\n\n\n# Power increases with effect size\npow &lt;- function(d) power.t.test(n = 20, delta = d, sd = 1, \n                                type = \"one.sample\")$power\nplot(seq(0,1,0.05), sapply(seq(0,1,0.05), pow), xlab = \"Effect size\", \n     ylab = \"Power\", pch = 20)\n\n\n\n\n\n\n\n\n# Power decreases with increasing standard deviation (or variance):\npow &lt;- function(s) power.t.test(n = 20, delta = 1, sd = s, \n                                type = \"one.sample\")$power\nplot(seq(0.5,1.5,0.05), sapply(seq(0.5,1.5,0.05), pow), \n     xlab = \"Standard deviation\", ylab = \"Power\", pch = 20)",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Null Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "3A-NHST.html#false-discovery-rate",
    "href": "3A-NHST.html#false-discovery-rate",
    "title": "6  Null Hypothesis Testing",
    "section": "6.6 False discovery rate",
    "text": "6.6 False discovery rate\nYou may have realized that if we do an experiment with a (weak) effect, we can get a significant result because of the effect but also significant results because of the Type I error rate. How to distinguish between those two? How can we decide whether a significant result is a false positive? This error rate is called the false discovery rate and to lower it we need to increase the power:\n\\[\nFDR = \\frac{p(H_0)\\cdot\\alpha}{p(H_0)\\cdot\\alpha + p(!H_0)\\cdot(1-\\beta)}\n\\]\n\\(p(H_0)\\) = probability of H0 (no effect); \\(p(!H_0)\\) = probability of not H0 (effect exists). Both are unknown and the only parameters we can influence are \\(\\alpha\\) and \\(\\beta\\). But decreasing \\(\\alpha\\) leads to too high false negatives, so \\(\\beta\\) is left.",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Null Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "3B-HypothesisTests.html",
    "href": "3B-HypothesisTests.html",
    "title": "7  Statistical tests",
    "section": "",
    "text": "7.1 Comparison of mean of two or more groups\nMany tests aim at showing that variables are significantly different between groups, i.e. have different means/medians. In all these tests, H0 is that there is no difference between the groups. The following decision tree helps to select the appropriate test.\nDecision tree for statistical tests\nRemark 1: Tests for 2 groups also work for one group only. Then they test whether the mean is equal to 0.\nRemark 2: Paired / unpaired: this means that observations in the groups are linked to each other. An example for unpaired data is a typical experiment with 10 observations in the control group and 10 observations in the treatment group. An example for paired data is when the same individuals were exposed to the treatment and to the control. The observations of each individual would belong together (pairs).\nRemark 3: Parametric: assumption of normal distribution. Non-parametric = no assumption for the distribution.\nRemark 4: Blue text: If a test for more than two groups is significant, post-hoc tests are carried out in a second step. These check all possible comparisons of groups for significant differences by adjusting p-values for multiple testing.",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Statistical tests</span>"
    ]
  },
  {
    "objectID": "3B-HypothesisTests.html#comparison-of-mean-of-two-or-more-groups",
    "href": "3B-HypothesisTests.html#comparison-of-mean-of-two-or-more-groups",
    "title": "7  Statistical tests",
    "section": "",
    "text": "7.1.1 Tests for 2 groups\n\n7.1.1.1 t-Test\nThe t-test can draw conclusions about the mean(s) of 1 or 2 normally-distributed groups.\n\n## Classical example: Student's sleep data\nplot(extra ~ group, data = sleep)\n\n\n\n\n\n\n\n\nBe aware: The line in the box plot does not show the mean but the median.\n\n## Formula interface\nt.test(extra ~ group, data = sleep)\n## \n##  Welch Two Sample t-test\n## \n## data:  extra by group\n## t = -1.8608, df = 17.776, p-value = 0.07939\n## alternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0\n## 95 percent confidence interval:\n##  -3.3654832  0.2054832\n## sample estimates:\n## mean in group 1 mean in group 2 \n##            0.75            2.33\n\nThis output tells us, that the difference in means between the 2 groups is not significant(p-value ≥ 0.05, specifically: p-value = 0.07939), provided that our significance level is 0.05.\nThe underlying Null-hypothesis is that the true difference in means is equal to 0. In the last two lines of the output you can see the means of the respective groups. Even though the means seem to be quite different, the difference is not significant, this could be due to the small sample size of only 10 students per group.\nLet’s look at different settings of the t-test:\n\n\n7.1.1.2 t-test, H0: one group, mean = 0\nThe Null-hypothesis here is that the mean of the observed group is equal to 0.\n\nx = rnorm(20, mean = 2)\nt.test(x)\n## \n##  One Sample t-test\n## \n## data:  x\n## t = 7.4679, df = 19, p-value = 4.587e-07\n## alternative hypothesis: true mean is not equal to 0\n## 95 percent confidence interval:\n##  1.577591 2.806249\n## sample estimates:\n## mean of x \n##   2.19192\n\np-value &lt; 0.05 means we can reject the Null-hypothesis, i.e. the mean of the observed group is significantly different from 0.\n\n\n7.1.1.3 t-test, H0: two groups, equal means, equal variances\nThe Null-hypothesis here is that the two observed groups have the same mean and the same variance (specified by the argument var.equal = T).\n\nx1 = rnorm(20, mean = 2)\nx2 = rnorm(20, mean = 3)\nt.test(x1,x2, var.equal = T)\n## \n##  Two Sample t-test\n## \n## data:  x1 and x2\n## t = -3.7626, df = 38, p-value = 0.0005672\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  -1.9534247 -0.5867374\n## sample estimates:\n## mean of x mean of y \n##  1.729008  2.999089\n\n\n\n7.1.1.4 t-test, H0: two groups, equal means, variable variance\nThe Null-hypothesis here is that the two observed groups have the same mean and variable variances (the default setting of the argument var.equal = F).\n\nx1 = rnorm(20, mean = 2, sd = 1)\nx2 = rnorm(20, mean = 3, sd = 2)\nt.test(x1,x2)\n## \n##  Welch Two Sample t-test\n## \n## data:  x1 and x2\n## t = -2.2345, df = 26.177, p-value = 0.0342\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  -1.92593937 -0.08068265\n## sample estimates:\n## mean of x mean of y \n##  2.160601  3.163912\n\n\n\n7.1.1.5 t-test, H0: two groups, equal means, variance can be different (can also set to equal)\nThe Null-hypothesis here is that the two groups are paired observations (e.g. group 1 before treatment and group 2 after treatment) have the same mean and variable variance (specified by the argument var.equal = F, which is also the default setting).\n\nx1 = rnorm(20, mean = 2)\nx2 = rnorm(20, mean = 3)\nt.test(x1,x2, paired = T, var.equal = F)\n## \n##  Paired t-test\n## \n## data:  x1 and x2\n## t = -2.0252, df = 19, p-value = 0.05713\n## alternative hypothesis: true mean difference is not equal to 0\n## 95 percent confidence interval:\n##  -1.40778309  0.02318272\n## sample estimates:\n## mean difference \n##      -0.6923002\n\n\n\n\n7.1.2 Wilcoxon Rank Sum and Mann-Whitney U Test\nIn R, there is only one function for both tests together: wilcox.test(). The Wilcoxon rank sum test with (paired = F) is classically called Mann-Whitney U test.\n\n7.1.2.1 Mann-Whitney U Test\n\nx1 = rnorm(20, mean = 2)\nx2 = rlnorm(20, mean = 3)\n\nwilcox.test(x1, x2)\n## \n##  Wilcoxon rank sum exact test\n## \n## data:  x1 and x2\n## W = 0, p-value = 1.451e-11\n## alternative hypothesis: true location shift is not equal to 0\n\n\n\n7.1.2.2 Wilcoxon signed rank test\n\nx1 = rnorm(20, mean = 2)\nx2 = rlnorm(20, mean = 3)\n\nwilcox.test(x1, x2, paired = T)\n## \n##  Wilcoxon signed rank exact test\n## \n## data:  x1 and x2\n## V = 0, p-value = 1.907e-06\n## alternative hypothesis: true location shift is not equal to 0\n\n\n\n\n7.1.3 Tests for &gt; 2 groups\n\n7.1.3.1 Anova, unpaired\nH0 &gt;2 groups, normal distribution, equal variance, equal means, unpaired\n\nx = aov(weight ~ group, data = PlantGrowth)\nsummary(x)\n##             Df Sum Sq Mean Sq F value Pr(&gt;F)  \n## group        2  3.766  1.8832   4.846 0.0159 *\n## Residuals   27 10.492  0.3886                 \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nAn ANOVA only tests, if there is a difference, but not between which groups. To perform pairwise comparisons, you can use post-hoc tests. Common for ANOVA results is\n\nTukeyHSD(x)\n##   Tukey multiple comparisons of means\n##     95% family-wise confidence level\n## \n## Fit: aov(formula = weight ~ group, data = PlantGrowth)\n## \n## $group\n##             diff        lwr       upr     p adj\n## trt1-ctrl -0.371 -1.0622161 0.3202161 0.3908711\n## trt2-ctrl  0.494 -0.1972161 1.1852161 0.1979960\n## trt2-trt1  0.865  0.1737839 1.5562161 0.0120064\n\nAlternatively, you can also perform several tests each comparing two groups and then correct for multiple testing. This is what we did before.\nPairwise comparisons are often visualized using different letters to significantly different groups:\n\n# install.packages(\"multcomp\")\nlibrary(multcomp)\ntuk = glht(x, linfct = mcp(group = \"Tukey\")) #performs Tukey pairwise comparisons\ntuc.cld = cld(tuk) # assigns different letters to significantly different groups\n\nold.par = par(mai = c(1, 1, 1.25, 1), no.readonly = T)\nplot(tuc.cld) # draws boxplot + letters from cld function\n\n\n\n\n\n\n\npar(old.par)\n\n\n\n7.1.3.2 Anova, paired\naov is not good in doing repeated = paired ANOVA. For this task, you should use so-called mixed models!\n\n\n7.1.3.3 Kruskal-Wallis\nNon-parametric test for differences in the mean of &gt;2 groups, unpaired\n\nboxplot(Ozone ~ Month, data = airquality)\n\n\n\n\n\n\n\nkruskal.test(Ozone ~ Month, data = airquality)\n## \n##  Kruskal-Wallis rank sum test\n## \n## data:  Ozone by Month\n## Kruskal-Wallis chi-squared = 29.267, df = 4, p-value = 6.901e-06\n\n\n\n7.1.3.4 Friedmann Test\nNon-parametric test for differences in the mean of &gt;2 groups, paired.\n\nwb &lt;- aggregate(warpbreaks$breaks,\n                by = list(w = warpbreaks$wool,\n                          t = warpbreaks$tension),\n                FUN = mean)\n#wb\nfriedman.test(wb$x, wb$w, wb$t)\n## \n##  Friedman rank sum test\n## \n## data:  wb$x, wb$w and wb$t\n## Friedman chi-squared = 0.33333, df = 1, p-value = 0.5637\n# Alternative: friedman.test(x ~ w | t, data = wb)\n# Note that x is the response, w is the group, and t are the blocks that are paired",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Statistical tests</span>"
    ]
  },
  {
    "objectID": "3B-HypothesisTests.html#comparison-of-variances",
    "href": "3B-HypothesisTests.html#comparison-of-variances",
    "title": "7  Statistical tests",
    "section": "7.2 Comparison of variances",
    "text": "7.2 Comparison of variances\nH0 in variance tests is always that the variances are equal.\n\n7.2.1 F-Test for two normally-distributed samples\n\nx &lt;- rnorm(50, mean = 0, sd = 2)\ny &lt;- rnorm(30, mean = 1, sd = 1)\nvar.test(x, y)                  # Do x and y have the same variance? - Significantly different\n## \n##  F test to compare two variances\n## \n## data:  x and y\n## F = 6.9377, num df = 49, denom df = 29, p-value = 3.998e-07\n## alternative hypothesis: true ratio of variances is not equal to 1\n## 95 percent confidence interval:\n##   3.485685 13.052795\n## sample estimates:\n## ratio of variances \n##           6.937749\n\n\n\n7.2.2 Bartlett test for more than two normally-distributed samples\n\nx &lt;- rnorm(50, mean = 0, sd = 1)\ny &lt;- rnorm(30, mean = 1, sd = 1)\nz &lt;- rnorm(30, mean = 1, sd = 1)\nbartlett.test(list(x, y, z))                # Do x, y and z have the same variance? - Not sigificantly different\n## \n##  Bartlett test of homogeneity of variances\n## \n## data:  list(x, y, z)\n## Bartlett's K-squared = 1.6542, df = 2, p-value = 0.4373",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Statistical tests</span>"
    ]
  },
  {
    "objectID": "3B-HypothesisTests.html#comparison-of-probabilities",
    "href": "3B-HypothesisTests.html#comparison-of-probabilities",
    "title": "7  Statistical tests",
    "section": "7.3 Comparison of probabilities",
    "text": "7.3 Comparison of probabilities\nProportions are typically analyzed assuming the binomial model (k/n with probability p)\n\n7.3.1 Exact Binomial Test\nH0 is that the data are binomially distributed with a fixed probability p.\n\n## Conover (1971), p. 97f.\n## Under (the assumption of) simple Mendelian inheritance, a cross\n##  between plants of two particular genotypes produces progeny 1/4 of\n##  which are \"dwarf\" and 3/4 of which are \"giant\", respectively.\n##  In an experiment to determine if this assumption is reasonable, a\n##  cross results in progeny having 243 dwarf and 682 giant plants.\n##  If \"giant\" is taken as success, the null hypothesis is that p =\n##  3/4 and the alternative that p != 3/4.\nbinom.test(c(682, 243), p = 3/4)\n## \n##  Exact binomial test\n## \n## data:  c(682, 243)\n## number of successes = 682, number of trials = 925, p-value = 0.3825\n## alternative hypothesis: true probability of success is not equal to 0.75\n## 95 percent confidence interval:\n##  0.7076683 0.7654066\n## sample estimates:\n## probability of success \n##              0.7372973\nbinom.test(682, 682 + 243, p = 3/4)   # The same.\n## \n##  Exact binomial test\n## \n## data:  682 and 682 + 243\n## number of successes = 682, number of trials = 925, p-value = 0.3825\n## alternative hypothesis: true probability of success is not equal to 0.75\n## 95 percent confidence interval:\n##  0.7076683 0.7654066\n## sample estimates:\n## probability of success \n##              0.7372973\n## =&gt; Data are in agreement with H0\n\n\n\n7.3.2 Test of Equal or Given Proportions\nbased on Chi-squared-test, H0 is that the data in two groups are binomially distributed with the same probability p.\n\n## Data from Fleiss (1981), p. 139.\n## H0: The null hypothesis is that the four populations from which\n##     the patients were drawn have the same true proportion of smokers.\n## A:  The alternative is that this proportion is different in at\n##     least one of the populations.\nsmokers  &lt;- c( 83, 90, 129, 70 )\npatients &lt;- c( 86, 93, 136, 82 )\nprop.test(smokers, patients)\n## \n##  4-sample test for equality of proportions without continuity correction\n## \n## data:  smokers out of patients\n## X-squared = 12.6, df = 3, p-value = 0.005585\n## alternative hypothesis: two.sided\n## sample estimates:\n##    prop 1    prop 2    prop 3    prop 4 \n## 0.9651163 0.9677419 0.9485294 0.8536585\n##  =&gt; Data are not in agreement with H0\n\n\n\n7.3.3 Contingency tables\nChi-squared-test for count data, H0 is that the joint distribution of the cell counts in a 2-dimensional contingency table is the product of the row and column marginals\n\n## From Agresti(2007) p.39\nM &lt;- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))\ndimnames(M) &lt;- list(gender = c(\"F\", \"M\"),\n                    party = c(\"Democrat\",\"Independent\", \"Republican\"))\nchisq.test(M)\n## \n##  Pearson's Chi-squared test\n## \n## data:  M\n## X-squared = 30.07, df = 2, p-value = 2.954e-07",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Statistical tests</span>"
    ]
  },
  {
    "objectID": "3B-HypothesisTests.html#distribution-tests",
    "href": "3B-HypothesisTests.html#distribution-tests",
    "title": "7  Statistical tests",
    "section": "7.4 Distribution tests",
    "text": "7.4 Distribution tests\nOften we are interested in the distribution of a variable. This can be tested with distribution tests. All these tests are defined as follows: H0 is that the data follow a specific distribution. So in case H0 is rejected, the data significantly deviates from the specified distribution.\nOften, we want to know whether a variable is normally distributed because this is an important assumption for parametric hypothesis tests. But data can follow many other distributions:\n\n\n7.4.1 Shapiro-Wilk Normality Test\nBecause many tests require normal distribution, this is the test needed most often.\n\nshapiro.test(rnorm(100, mean = 5, sd = 3))\n## \n##  Shapiro-Wilk normality test\n## \n## data:  rnorm(100, mean = 5, sd = 3)\n## W = 0.9874, p-value = 0.4649\n\n\n\n7.4.2 Kolmogorov-Smirnov Test\nFor everything else, the KS test can be used. It compares two different distributions, or a distribution against a reference.\n\nx &lt;- rnorm(50)\ny &lt;- runif(30)\n# Do x and y come from the same distribution?\nks.test(x, y)\n## \n##  Exact two-sample Kolmogorov-Smirnov test\n## \n## data:  x and y\n## D = 0.54, p-value = 1.598e-05\n## alternative hypothesis: two-sided\n\n# Does x come from a shifted gamma distribution with shape 3 and rate 2?\nks.test(x+2, \"pgamma\", 3, 2) # two-sided, exact\n## \n##  Exact one-sample Kolmogorov-Smirnov test\n## \n## data:  x + 2\n## D = 0.35969, p-value = 2.674e-06\n## alternative hypothesis: two-sided\nks.test(x+2, \"pgamma\", 3, 2, exact = FALSE)\n## \n##  Asymptotic one-sample Kolmogorov-Smirnov test\n## \n## data:  x + 2\n## D = 0.35969, p-value = 4.81e-06\n## alternative hypothesis: two-sided\nks.test(x+2, \"pgamma\", 3, 2, alternative = \"gr\")\n## \n##  Exact one-sample Kolmogorov-Smirnov test\n## \n## data:  x + 2\n## D^+ = 0.068834, p-value = 0.5957\n## alternative hypothesis: the CDF of x lies above the null hypothesis\n\nFor an overview on distribution see here: http://www.stat.umn.edu/geyer/old/5101/rlook.html",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Statistical tests</span>"
    ]
  },
  {
    "objectID": "3B-HypothesisTests.html#other-tests",
    "href": "3B-HypothesisTests.html#other-tests",
    "title": "7  Statistical tests",
    "section": "7.5 Other tests",
    "text": "7.5 Other tests\n\n7.5.1 Correlation\nA test for the significance of a correlation:\n\ncor.test(airquality$Ozone, airquality$Wind)\n## \n##  Pearson's product-moment correlation\n## \n## data:  airquality$Ozone and airquality$Wind\n## t = -8.0401, df = 114, p-value = 9.272e-13\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  -0.7063918 -0.4708713\n## sample estimates:\n##        cor \n## -0.6015465\n\nInterpretation: Ozone and Wind are significantly negatively correlated with a p-value &lt; 0.05 and a correlation coefficient of -0.6015465.\n\n\n7.5.2 Mantel test\nThe Mantel test compares two distance matrices\n\nlibrary(vegan)\n## Is vegetation related to environment?\ndata(varespec)\ndata(varechem)\nveg.dist &lt;- vegdist(varespec) # Bray-Curtis\nenv.dist &lt;- vegdist(scale(varechem), \"euclid\")\nmantel(veg.dist, env.dist)\n## \n## Mantel statistic based on Pearson's product-moment correlation \n## \n## Call:\n## mantel(xdis = veg.dist, ydis = env.dist) \n## \n## Mantel statistic r: 0.3047 \n##       Significance: 0.002 \n## \n## Upper quantiles of permutations (null model):\n##   90%   95% 97.5%   99% \n## 0.118 0.152 0.178 0.201 \n## Permutation: free\n## Number of permutations: 999\nmantel(veg.dist, env.dist, method=\"spear\")\n## \n## Mantel statistic based on Spearman's rank correlation rho \n## \n## Call:\n## mantel(xdis = veg.dist, ydis = env.dist, method = \"spear\") \n## \n## Mantel statistic r: 0.2838 \n##       Significance: 0.001 \n## \n## Upper quantiles of permutations (null model):\n##   90%   95% 97.5%   99% \n## 0.119 0.156 0.183 0.206 \n## Permutation: free\n## Number of permutations: 999",
    "crumbs": [
      "Hypothesis Testing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Statistical tests</span>"
    ]
  },
  {
    "objectID": "3A-Exercise.html",
    "href": "3A-Exercise.html",
    "title": "Exercise - NHST and statistical tests",
    "section": "",
    "text": "Streams\nThe dataset ‘streams’ contains water measurements taken at different location along 16 rivers: ‘up’ and ‘down’ are water quality measurements of the same river taken before and after a water treatment filter, respectively. We want to find out if this water filter is effective. Use the decision tree to identify the appropriate test for this situation.\nThe filters were installed between upstream (‘up’) and downstream (‘down’).\ndat = read.table(\"https://raw.githubusercontent.com/biometry/APES/master/Data/Simone/streams.txt\", header = T)",
    "crumbs": [
      "Hypothesis Testing",
      "Exercise - NHST and statistical tests"
    ]
  },
  {
    "objectID": "3A-Exercise.html#streams",
    "href": "3A-Exercise.html#streams",
    "title": "Exercise - NHST and statistical tests",
    "section": "",
    "text": "Hint: Are the up and down observations independent? (paired or unpaired)\n\n\n\n\n\n\n\n1. Task\n\n\n\n1. Visualize the data\nHints: categorical and numerical..(two column == two levels)\n\n\nClick here to see the solution\n\nmatplot() can be used to plot several lines at once\n\npar(mfrow = c(1,2))\nboxplot(dat, notch = TRUE)\n\ncol_num = as.integer(dat[,2] &gt; dat[,1]) + 1\n\nmatplot(t(dat), \n        type = \"l\", \n        las = 1, \n        lty = 1, \n        col = c(\"#FA00AA\", \"#1147AA\")[col_num])\nlegend(\"topleft\", legend = c(\"worse\", \"better\"), lty = 1, col = c(\"#FA00AA\", \"#1147AA\"), bty = \"n\")\n\n\n\n\n\n\n\npar(mfrow = c(1,1))\n\n\n\n\n\n\n\n\n\n\n2. Task\n\n\n\n2. For identifying an appropriate test for the effect of the water treatment filter, what are your first two choices in the decision tree?\n\n Two groups, unpaired observations Two groups, paired observations Three or more groups, unpaired observations Three or more groups, paired observations\n\n\n\nFeedback\n\nThe number of groups to compare is two, up versus down stream. The observations are paired because the water tested up and down stream of the filter is not independent from each other, i.e. the “same” water is measured twice!\n\n\n\n\n\n\n\n\n\n3. Task\n\n\n\n3. The next decision you have to make is whether you can use a parametric test or not. Apply the Shapiro-Wilk test to check if the data are normally distributed. Are the tests significant and what does that tell you?\n\n One test is significant. The downstream data significantly deviate from a normal distribution. The upstream data does not significantly deviate from a normal distribution. Both tests are significant. Both data significantly deviate from a normal distribution. One test is significant. The downstream data significantly deviate from a normal distribution. The upstream data does not significantly deviate from a normal distribution.\n\n\n\nClick here to see the solution\n\nThe Shapiro-Wilk test is significant (p &lt; 0.05) for down stream data, i.e. we reject H0 (the data is normally distributed). Thus, the data significantly deviate from a normal distribution. The test is not significant for upstream data; the data does not significantly deviate from a normal distribution.\n\nshapiro.test(dat$down)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  dat$down\n## W = 0.86604, p-value = 0.02367\nshapiro.test(dat$up)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  dat$up\n## W = 0.93609, p-value = 0.3038\n\n\n\n\n\n\n\n\n\n\n4. Task\n\n\n\n4. Which test is appropriate for evaluating the effect of the filter?\n\n Wilcoxon signed rank test Student t-test Welch t-test Mann-Whitney U test Paired t-test\n\n\n\nFeedback\n\nWe select a Wilcoxon signed rank test that is appropriate to compare not-normal, paired observations in two groups.\n\n\n\n\n\n\n\n\n\n5. Task\n\n\n\n5. Does the filter influence the water quality? (The warnings are related to identical values, i.e. ties, and zero differences; we ignore these here) Use to appropriate test to answer this question!\n\n The filter significantly influences water quality (Wilcoxon signed rank test, p = 0.00497). Equal or greater rank differences between the pairs would occur under H0 (no effect of the filter) only with a probability of 0.497 %. We could prove an effect of the water filter with &gt;95% certainty. The filter has no significant influence on the water quality (Wilcoxon signed rank test, p = 0.00497).\n\n\n\nClick here to see the solution\n\nH0 of the Wilcoxon signed rank test is that the location shift between the two groups equals zero, i.e. the difference between the pairs follows a symmetric distribution around zero. As p &lt; 0.05, we can reject H0. The filter significantly influences water quality. (In case of ties also see the function wilcox.test() in the package coin for exact, asymptotic and Monte Carlo conditional p-values)\n\nwilcox.test(dat$down, dat$up, paired = TRUE)\n## \n##  Wilcoxon signed rank test with continuity correction\n## \n## data:  dat$down and dat$up\n## V = 8, p-value = 0.004971\n## alternative hypothesis: true location shift is not equal to 0\n\n\n\n\n\nH_0_ Hypothesis:\n\nShapiro: Data is normal distributed\nWilcoxon: No differences in their ranks",
    "crumbs": [
      "Hypothesis Testing",
      "Exercise - NHST and statistical tests"
    ]
  },
  {
    "objectID": "3A-Exercise.html#chicken",
    "href": "3A-Exercise.html#chicken",
    "title": "Exercise - NHST and statistical tests",
    "section": "Chicken",
    "text": "Chicken\nThe ‘chickwts’ experiment was carried out to measure and compare the effectiveness of various feed supplements on the growth rate of chickens. We are interested in two questions: Does the feed type influence the chickens weight at all? Which feed types result in significantly different chicken weights?\n\ndat = chickwts\n\n\n\n\n\n\n\n1. Task\n\n\n\nAnalyze the data and answer the following questions.\n1. Visualize the data. What is an appropriate plot for this kind of data?\n\n Histogram Mosaicplot Scatterplot Boxplot\n\n\n\nClick here to see the solution\n\nAn appropriate visualization for one numeric and one categorial variable is a boxplot. Using notch = T in the function boxplot(), adds confidence interval for the median (the warning here indicates that we are not very confident in the estimates of the medians as the number of observations is rather small, you can see at the notches that go beyond the boxes).\n\ndat = chickwts\nboxplot(weight ~ feed, data = dat)\n\n\n\n\n\n\n\nboxplot(weight ~ feed, data = dat, notch = T)\n## Warning in (function (z, notch = FALSE, width = NULL, varwidth = FALSE, :\n## alguns entalhes saíram fora das dobradiças ('caixa'): talvez definir\n## notch=FALSE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Task\n\n\n\n2. Can you apply an ANOVA to this data? What are the assumptions for an ANOVA? Remember: you have to test two things for the groups (for this exercise it is enough if you test the groups “casein” and “horsebean” only).\n\n We have no indication to assume that the data is not-normally distributed or that the variances are different. We should use a Kruskal-Wallis test. The Shapiro-Wilk test of normality and the test for equal variances are not signficant. We cannot use an ANOVA. We have no indication to assume that the data is not-normally distributed or that the variances are different. We can use an ANOVA.\n\n\n\nClick here to see the solution\n\nThe two requirements for applying an ANOVA are 1) the data in each group are normally distributed, and 2) the variances of the different groups are equal. For 1) we again use a Shapiro-Wilk test. For 2) we can use the function var.test() or for all feed types the function bartlett.test(). All tests are not significant, and we thus have no indication to assume that the data is not-normally distributed or that the variances are different. We can use an ANOVA.\n\n# get data of each group\ncasein = dat$weight[dat$feed == \"casein\"]\nhorsebean = dat$weight[dat$feed == \"horsebean\"]\n\nshapiro.test(casein)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  casein\n## W = 0.91663, p-value = 0.2592\nshapiro.test(horsebean)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  horsebean\n## W = 0.93758, p-value = 0.5264\n# H0 normally distributed\n# not rejected, normality assumption is okay\n\nvar.test(casein, horsebean)\n## \n##  F test to compare two variances\n## \n## data:  casein and horsebean\n## F = 2.7827, num df = 11, denom df = 9, p-value = 0.1353\n## alternative hypothesis: true ratio of variances is not equal to 1\n## 95 percent confidence interval:\n##  0.711320 9.984178\n## sample estimates:\n## ratio of variances \n##           2.782737\n# H0 ratio of variances is 1 = groups have the same variance\n# not rejected, same variances is okay\n\n\n### Extra: testing the assumptions for all groups:\n\n# Normality test using the dplyr package\nlibrary(dplyr)\n## \n## Anexando pacote: 'dplyr'\n## Os seguintes objetos são mascarados por 'package:stats':\n## \n##     filter, lag\n## Os seguintes objetos são mascarados por 'package:base':\n## \n##     intersect, setdiff, setequal, union\ndat %&gt;% \n  group_by(feed) %&gt;% \n  summarise(p = shapiro.test(weight)$p)\n## # A tibble: 6 × 2\n##   feed          p\n##   &lt;fct&gt;     &lt;dbl&gt;\n## 1 casein    0.259\n## 2 horsebean 0.526\n## 3 linseed   0.903\n## 4 meatmeal  0.961\n## 5 soybean   0.506\n## 6 sunflower 0.360\n\n# Bartlett test for equal variances\nbartlett.test(weight ~ feed, dat)\n## \n##  Bartlett test of homogeneity of variances\n## \n## data:  weight by feed\n## Bartlett's K-squared = 3.2597, df = 5, p-value = 0.66\n\n\n\n\n\n\n\n\n\n\n3. Task\n\n\n\n3. Apply an ANOVA or the non-parametric test. How would you describe the result in a thesis or publication?\n\n We have proven that the feed type influences the chicken weight (ANOVA, p = 5.94e-10). The chicken weights differ significantly between the six feed types (ANOVA, p = 5.94e-10). The feed type significantly influences the chicken weight (ANOVA, p = 5.94e-10).\n\n\n\nClick here to see the solution\n\nH0 of the ANOVA is that feed has no influence on the chicken weight. As p &lt; 0.05, we reject H0. In the result section, we would write something like: “The feed type significantly influenced the chicken weight (ANOVA, p = 5.94e-10).”\n\nfit = aov(weight ~ feed, data = dat)\nsummary(fit)\n##             Df Sum Sq Mean Sq F value   Pr(&gt;F)    \n## feed         5 231129   46226   15.37 5.94e-10 ***\n## Residuals   65 195556    3009                     \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThe answer “The chicken weights differ significantly between the six feed types (ANOVA, p = 5.94e-10).” is not precise enough - there are significant differences, but an ANOVA doesn’t test if this is true for all comparisons. ANOVA only tests globally.\n\n\n\n\n\n\n\n\n\n4. Task\n\n\n\n4. Also apply the alternative test and compare p-values. Which of the tests has a higher power?\n\n ANOVA The alternative test Both have the same power The p-value doesn't help us to identify the power.\n\n\n\nClick here to see the solution\n\nThe non-parametric alternative of an ANOVA is the Kruskal-Wallis test, which should be applied if the data is not normally distributed. In this example, the test comes to the same conclusion: H0 is rejected, the feed type has a significant effect on the chicken weight. The p-value, however, is not as small as in the ANOVA. The reason for this is that non-parametric tests have a lower power than parametric ones as they only use the ranks of the data. Therefore, the ANOVA is preferred over the non-parametric alternative in case its assumptions are fulfilled.\n\nkruskal.test(chickwts$weight, chickwts$feed)\n## \n##  Kruskal-Wallis rank sum test\n## \n## data:  chickwts$weight and chickwts$feed\n## Kruskal-Wallis chi-squared = 37.343, df = 5, p-value = 5.113e-07\n\nThe p-value in the Kruskal-Wallis test is not as small as in the ANOVA. The reason for this is that non-parametric tests have a lower power than parametric ones as they only use the ranks of the data. Therefore, the ANOVA is preferred over the non-parametric alternative in case its assumptions are fulfilled.\n\n\n\n\n\n\n\n\n\n5. Task\n\n\n\n5. Use the result of the ANOVA to carry out a post-hoc test. How many of the pairwise comparisons indicate significant differences between the groups? \n\n\nClick here to see the solution\n\n\nTukeyHSD(fit)\n##   Tukey multiple comparisons of means\n##     95% family-wise confidence level\n## \n## Fit: aov(formula = weight ~ feed, data = dat)\n## \n## $feed\n##                            diff         lwr       upr     p adj\n## horsebean-casein    -163.383333 -232.346876 -94.41979 0.0000000\n## linseed-casein      -104.833333 -170.587491 -39.07918 0.0002100\n## meatmeal-casein      -46.674242 -113.906207  20.55772 0.3324584\n## soybean-casein       -77.154762 -140.517054 -13.79247 0.0083653\n## sunflower-casein       5.333333  -60.420825  71.08749 0.9998902\n## linseed-horsebean     58.550000  -10.413543 127.51354 0.1413329\n## meatmeal-horsebean   116.709091   46.335105 187.08308 0.0001062\n## soybean-horsebean     86.228571   19.541684 152.91546 0.0042167\n## sunflower-horsebean  168.716667   99.753124 237.68021 0.0000000\n## meatmeal-linseed      58.159091   -9.072873 125.39106 0.1276965\n## soybean-linseed       27.678571  -35.683721  91.04086 0.7932853\n## sunflower-linseed    110.166667   44.412509 175.92082 0.0000884\n## soybean-meatmeal     -30.480519  -95.375109  34.41407 0.7391356\n## sunflower-meatmeal    52.007576  -15.224388 119.23954 0.2206962\n## sunflower-soybean     82.488095   19.125803 145.85039 0.0038845\n\nYou can also summarize this more formally:\n\naov_post &lt;- TukeyHSD(fit)\nsum(aov_post$feed[,4] &lt; 0.05)\n## [1] 8\n\n\n\n\n\n\n\n\n\n\n6. Task\n\n\n\n6. Which conclusion about the feed types ‘meatmeal’ and ‘casein’ is correct?\n\n It is statistically proven that the feed types 'meatmeal' and 'casein' produce the same chicken weight. The Null-hypothesis, i.e. there is no weight difference between the feed types 'meatmeal' and 'casein', is accepted. The experiment did not reveal a significant weight difference between the feed types 'meatmeal' and 'casein'.\n\n\n\nFeedback\n\nThe experiment did not reveal a significant weight difference between the feed types ‘meatmeal’ and ‘casein’. Remember that we cannot prove or accept H0; we can only reject it.\nYou can also visualize the comparisons using the function glht() from the multcomp package.\n\nlibrary(multcomp) # install.packages(\"multcomp\")\n## Carregando pacotes exigidos: mvtnorm\n## Carregando pacotes exigidos: survival\n## Carregando pacotes exigidos: TH.data\n## Carregando pacotes exigidos: MASS\n## \n## Anexando pacote: 'MASS'\n## O seguinte objeto é mascarado por 'package:dplyr':\n## \n##     select\n## \n## Anexando pacote: 'TH.data'\n## O seguinte objeto é mascarado por 'package:MASS':\n## \n##     geyser\ntuk &lt;- glht(fit, linfct = mcp(feed = \"Tukey\"))\n\n# extract information\ntuk.cld &lt;- cld(tuk)\n\n# use sufficiently large upper margin\nold.par &lt;- par(mai=c(1,1,1.25,1), no.readonly = TRUE)\n\n# plot\nplot(tuk.cld)\n\n\n\n\n\n\n\npar(old.par)",
    "crumbs": [
      "Hypothesis Testing",
      "Exercise - NHST and statistical tests"
    ]
  },
  {
    "objectID": "3A-Exercise.html#titanic",
    "href": "3A-Exercise.html#titanic",
    "title": "Exercise - NHST and statistical tests",
    "section": "Titanic",
    "text": "Titanic\nThe dataset ‘titanic’ from the EcoData package (not to confuse with the dataset ‘Titanic’) provides information on individual passengers of the Titanic.\n\nlibrary(EcoData) #or: load(\"EcoData.Rdata\"), if you had problems with installing the package\ndat = titanic\n\nAnswer the following questions.\n\n\n\n\n\n\n1. Task\n\n\n\n\nWe are interested in first and second class differences only. Reduce the dataset to these classes only. How can you do this in R?\n\n\n\nClick here to see the solution\n\nThe dataset can be reduced in different ways. All three options result in a dataset with class 1 and 2 only.\n\nlibrary(EcoData)\ndat = titanic\n\ndat = dat[dat$pclass == 1 | dat$pclass == 2, ]\ndat = dat[dat$pclass %in% 1:2, ] # the same\ndat = dat[dat$pclass != 3, ] # the same\n\n\n\n\n\n\n\n\n\n\n2. Task\n\n\n\n\nDoes the survival rate between the first and second class differ? Hint: you can apply the test to a contigency table of passenger class versus survived, i.e. table(dat$pclass, dat$survived). TRUEFALSE\n\n\n\nClick here to see the solution\n\nWe use the test of equal proportions here. H0, proportions in the two groups are equal, is rejected. The survival probability in class 1 and class 2 is significantly different. Note that the estimated proportions are for mortality not for survival because 0=died is in the first column of the table. Thus it is considered the “success” in the prop.test().\n\ntable(dat$pclass, dat$survived)\n##    \n##       0   1\n##   1 123 200\n##   2 158 119\nprop.test(table(dat$pclass, dat$survived))\n## \n##  2-sample test for equality of proportions with continuity correction\n## \n## data:  table(dat$pclass, dat$survived)\n## X-squared = 20.772, df = 1, p-value = 5.173e-06\n## alternative hypothesis: two.sided\n## 95 percent confidence interval:\n##  -0.2717017 -0.1074826\n## sample estimates:\n##    prop 1    prop 2 \n## 0.3808050 0.5703971\n\n\n\n\n\n\n\n\n\n\n3. Task\n\n\n\n\nIs the variable passenger age normally distributed?\n\n\n The data seems normally distributed. The distribution significantly differs from normal.\n\n\n\nClick here to see the solution\n\nThe distribution of passenger age significantly differs from normal.\n\nhist(dat$age, breaks = 20)\n\n\n\n\n\n\n\nshapiro.test(dat$age)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  dat$age\n## W = 0.9876, p-value = 0.00014\n\n\n\n\n\n\n\n\n\n\n4. Task\n\n\n\n\nIs the variable Body Identification Number (body) uniformly distributed?\n\nUniform distribution == all values within a range are equally distributed:\n\nhist(runif(10000))\n\n\n\n\n\n\n\n\nHint: ks.test() (check documentation, see examples)\n\n The distribution significantly differs from uniform. The distribution looks uniform.\n\n\n\nClick here to see the solution\n\nThe distribution of body significantly differs from uniform.\n\nhist(dat$body, breaks = 20)\n\n\n\n\n\n\n\nks.test(dat$body, \"punif\")\n## \n##  Exact one-sample Kolmogorov-Smirnov test\n## \n## data:  dat$body\n## D = 1, p-value = 2.22e-16\n## alternative hypothesis: two-sided\n\n\n\n\n\n\n\n\n\n\n5. Task\n\n\n\n\nIs the correlation between fare and age significant? TRUEFALSE\n\n\n\nClick here to see the solution\n\nThe correlation between fare and age is non-significant. You can also plot the data using the scatter.smooth function.\n\ncor.test(dat$fare, dat$age)\n## \n##  Pearson's product-moment correlation\n## \n## data:  dat$fare and dat$age\n## t = 1.9326, df = 543, p-value = 0.0538\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  -0.001346105  0.165493055\n## sample estimates:\n##        cor \n## 0.08265257\nscatter.smooth(dat$fare, dat$age)",
    "crumbs": [
      "Hypothesis Testing",
      "Exercise - NHST and statistical tests"
    ]
  },
  {
    "objectID": "3A-Exercise.html#simulation-of-type-i-and-ii-error",
    "href": "3A-Exercise.html#simulation-of-type-i-and-ii-error",
    "title": "Exercise - NHST and statistical tests",
    "section": "Simulation of Type I and II error",
    "text": "Simulation of Type I and II error\nThis is an additional task for those who are fast! Please finish the other parts first before you continue here!\nAnalogously to the previous example of simulating the test statistic, we can also simulate error rates. Complete the code …\n\nPperGroup = 50\npC = 0.5\npT = 0.5\n\npvalues = rep(NA, 1000)\n\nfor(i in 1:1000){\n  control = rbinom(n = 1, size = PperGroup, prob = pC)\n  treat = rbinom(n = 1, size = PperGroup, prob = pT)\n  #XXXX\n}\n\n… and answer the following questions for the prop.test in R:\n\n\n\n\n\n\n1. Task\n\n\n\n\nHow does the distribution of p-values and the number of false positive (Type I error) look like if pC = pT\n\n\n\nClick here to see the solution\n\n\nPperGroup = 50\npC = 0.5\npT = 0.5\n\npvalues = rep(NA, 1000)\npositives = rep(NA, 1000)\n\nfor(i in 1:1000){\n  control = rbinom(1, PperGroup, prob = pC )\n  treatment = rbinom(1, PperGroup, prob = pT )\n  pvalues[i] = prop.test(c(control, treatment), rep(PperGroup, 2))$p.value\n  positives[i] = pvalues[i] &lt;= 0.05\n}\nhist(pvalues)\n\n\n\n\n\n\n\ntable(positives)\n## positives\n## FALSE  TRUE \n##   966    34\nmean(positives) \n## [1] 0.034\n\n# type I error rate = false positives (if data simulation etc. is performed several times, this should be on average 0.05 (alpha))\n\n\n\n\n\n\n\n\n\n\n2. Task\n\n\n\n\nHow does the distribution of p-values and the number of true positive (Power) look like if pC != pT, e.g. 0.5, 0.6\n\n\n\nClick here to see the solution\n\npC != pT with difference 0.1\n\nPperGroup = 50\npC = 0.5\npT = 0.6\n\npvalues = rep(NA, 1000)\npositives = rep(NA, 1000)\n\nfor(i in 1:1000){\n  control = rbinom(1, PperGroup, prob = pC )\n  treatment = rbinom(1, PperGroup, prob = pT )\n  pvalues[i] = prop.test(c(control, treatment), rep(PperGroup, 2))$p.value\n  positives[i] = prop.test(c(control, treatment), rep(PperGroup, 2))$p.value &lt; 0.05\n}\nhist(pvalues)\n\n\n\n\n\n\n\ntable(positives)\n## positives\n## FALSE  TRUE \n##   878   122\nmean(pvalues &lt; 0.05) # = power (rate at which effect is detected by the test)\n## [1] 0.122\n# power = 1- beta &gt; beta = 1-power = typeII error rate\n1-mean(pvalues &lt; 0.05)\n## [1] 0.878\n\n## Factors increasing power and reducing type II errors:\n# - increase sample size\n# - larger real effect size (but this is usually fixed by the system)\n\n\n\n\n\n\n\n\n\n\n3. Task\n\n\n\n\nHow does the distribution of p-values and the number of false positive (Type I error) look like if you modify the for loop in a way that you first look at the data, and then decide if you test for greater or less?\n\n\n\nClick here to see the solution\n\nYou first look at the data, and then decide if you test for greater or less:\n\n# ifelse(test,yes,no)\nPperGroup = 50\npC = 0.5\npT = 0.5\n\nfor(i in 1:1000){\n  control = rbinom(1, PperGroup, prob = pC )\n  treatment = rbinom(1, PperGroup, prob = pT )\n  pvalues[i] = prop.test(c(control, treatment), rep(PperGroup, 2), \n                        alternative= ifelse(mean(control)&gt;mean(treatment),\n                                            \"greater\",\"less\"))$p.value\n  positives[i] = prop.test(c(control, treatment), rep(PperGroup, 2),\n                     alternative= ifelse(mean(control)&gt;mean(treatment),\n                                         \"greater\",\"less\"))$p.value &lt; 0.05\n}\nhist(pvalues)\n\n\n\n\n\n\n\ntable(positives)\n## positives\n## FALSE  TRUE \n##   942    58\nmean(pvalues &lt; 0.05) \n## [1] 0.058\n# higher false discovery rate",
    "crumbs": [
      "Hypothesis Testing",
      "Exercise - NHST and statistical tests"
    ]
  },
  {
    "objectID": "4-SimpleRegression.html",
    "href": "4-SimpleRegression.html",
    "title": "8  Simple linear regression",
    "section": "",
    "text": "8.1 Maximum Likelihood Estimator\n\\(likelihood = P(D|model, parameter)\\)\nThe likelihood is the probability to observe the Data given a certain model (which is described by its parameter).\nIt is an approach to optimize a model/parameter to find the set of parameters that describes best the observed data.\nA simple example, we want to estimate the average of random vectors and we assume that our model is a normal distribution (so we assume that the data originated from a normal distribution). We want to optimize the two parameters that describe a normal distribution: the mean, and the sd:\nXobs = rnorm(100, sd = 1.0)\n# Now we assume that mean = 0, and sd = 0.2 are unknown but we want to find them, let's write the likelihood function:\nlikelihood = function(par) { # we give two parameters, mean and sd\n  lls = dnorm(Xobs, mean = par[1], sd = par[2], log = TRUE) # calculate for each observation to observe the data given our model\n  # we use the logLikilihood for numerical reasons\n  return(sum(lls))\n}\n\nlikelihood(c(0, 0.2))\n## [1] -1274.247\n# let's try all values of sd:\nlikelihood_mean = function(p) likelihood(c(p, 1.0))\nplot(seq(-5, 5.0, length.out = 100), sapply(seq(-5, 5.0, length.out = 100), likelihood_mean), xlab = 'Different mean values', ylab = \"negative logLikelihood\")\n\n\n\n\n\n\n\n\n# The optimum is at 0, which corresponds to our mean we used to sample Xobs\nHowever it is tedious to try all values manually to find the best value, especially if we have to optimize several values. For that we can use an optimizer in R which finds for us the best set of parameters:\nopt = optim(c(0.0, 1.0), fn = function(par) -likelihood(par), hessian = TRUE )\nWe can use the shape of the likelihood to calculate standard errors for our estimates:\nst_errors = sqrt(diag(solve(opt$hessian)))\nWith that we can calculate the confidence interval for our estimates. When the estimator is repeatedly used, 95% of the calculated confidence intervals will include the true value!\ncbind(opt$par-1.96*st_errors, opt$par+1.96*st_errors)\n##            [,1]      [,2]\n## [1,] -0.1706372 0.2355346\n## [2,]  0.8925465 1.1797585\nIn short, if we would do a t.test for our Xobs (to test whether the mean is stat. significant different from zero), the test would be non significant, and a strong indicator for that is when the 0 is within the confidence interval. Let’s compare our CI to the one calculated by the t-test:\nt.test(Xobs)\n## \n##  One Sample t-test\n## \n## data:  Xobs\n## t = 0.31224, df = 99, p-value = 0.7555\n## alternative hypothesis: true mean is not equal to 0\n## 95 percent confidence interval:\n##  -0.1741130  0.2391426\n## sample estimates:\n##  mean of x \n## 0.03251482\nAlmost the same! The t-test also calculates the MLE to get the standard error and the confidence interval.",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Simple linear regression</span>"
    ]
  },
  {
    "objectID": "4-SimpleRegression.html#the-theory-of-linear-regression",
    "href": "4-SimpleRegression.html#the-theory-of-linear-regression",
    "title": "8  Simple linear regression",
    "section": "8.2 The theory of linear regression",
    "text": "8.2 The theory of linear regression\nIf we want to test for an association between two continuous variables, we can calculate the correlation between the two - and with the cor.test function we can test even for significance. But, the correlation doesn’t report the magnitude, the strength, of the effect:\n\nX = runif(100)\npar(mfrow = c(1,1))\nplot(X, 0.5*X, ylim = c(0, 1), type = \"p\", pch = 15, col = \"red\", xlab = \"X\", ylab = \"Y\")\npoints(X, 1.0*X, ylim = c(0, 1), type = \"p\", pch = 15, col = \"blue\", xlab = \"X\", ylab = \"Y\")\n\n\n\n\n\n\n\ncor(X, 0.5*X)\n## [1] 1\ncor(X, 1.0*X)\n## [1] 1\n\nBoth have a correlation factor of 1.0! But we see clearly that the blue line has an stronger effect on Y then the red line.\nSolution: Linear regression models\nThey describe the relationship between a dependent variable and one or more explanatory variables:\n\\[\ny = a_0 +a_1*x\n\\]\n(x = explanatory variable; y = dependent variable; a0=intercept; a1= slope)\nExamples:\n\nplot(X, 0.5*X, ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 0.5*X, col = \"red\", type = \"l\", lwd = 1.5)\npoints(X, 1.0*X, ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 1.0*X, ylim = c(0, 1), type = \"l\", pch = 16, col = \"blue\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\nlegend(\"topleft\", col = c(\"red\", \"blue\"), lty = 1,legend = c('Y = 0.5*X+0', 'Y = 1.0**X+0'))\n\n\n\n\n\n\n\n\nWe can get the parameters (slope and intercept) with the MLE. However, we need first to make another assumptions, usually the model line doesn’t perfectly the data because there is an observational error on Y, so the points scatter around the line:\n\nplot(X, 0.5*X+rnorm(100, sd = 0.05), ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 0.5*X, col = \"red\", type = \"l\", lwd = 1.5)\npoints(X, 1.0*X+rnorm(100, sd = 0.05), ylim = c(0, 1), type = \"p\", pch = 16, col = \"black\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\npoints(X, 1.0*X, ylim = c(0, 1), type = \"l\", pch = 16, col = \"blue\", xlab = \"X\", ylab = \"Y\", lwd = 1.5)\nlegend(\"topleft\", col = c(\"red\", \"blue\"), lty = 1,legend = c('Y = 0.5*X+0', 'Y = 1.0**X+0'))\n\n\n\n\n\n\n\n\nAnd the model extends to:\n\\[\ny = a_0 + a_1*x +\\epsilon, \\epsilon \\sim N(0, sd)\n\\]\nWhich we can also rewrite into:\n\\[\ny = N(a_0 + a_1*x, sd)\n\\]\nWhich is very similar to our previous MLE, right? The only difference is now that the mean depends now on x, let’s optimize it again:\n\nXobs = rnorm(100, sd = 1.0)\nY = Xobs + rnorm(100,sd = 0.2)\nlikelihood = function(par) { # three parameters now\n  lls = dnorm(Y, mean = Xobs*par[2]+par[1], sd = par[3], log = TRUE) # calculate for each observation the probability to observe the data given our model\n  # we use the logLikilihood because of numerical reasons\n  return(sum(lls))\n}\n\nlikelihood(c(0, 0, 0.2))\n## [1] -1162.229\nopt = optim(c(0.0, 0.0, 1.0), fn = function(par) -likelihood(par), hessian = TRUE )\n\nopt$par\n## [1] 0.002927292 0.997608527 0.216189328\n\nOur true parameters are 0.0 for the intercept, 1.0 for the slope, and 0.22 for the sd of the observational error.\nNow, we want to test whether the effect (slope) is statistically significant different from 0:\n\ncalculate standard error\ncalculate t-statistic\ncalculate p-value\n\n\nst_errors = sqrt(diag(solve(opt$hessian)))\nst_errors[2]\n## [1] 0.02226489\nt_statistic = opt$par[2] / st_errors[2]\npt(t_statistic, df = 100-3, lower.tail = FALSE)*2\n## [1] 1.264962e-66\n\nThe p-value is smaller than \\(\\alpha\\), so the effect is significant! However, it would be tedious to do that always by hand, and because it is probably one of the most used analysis, there’s a function for it in R:\n\nmodel = lm(Y~Xobs) # 1. Get estimates, MLE\nmodel\n## \n## Call:\n## lm(formula = Y ~ Xobs)\n## \n## Coefficients:\n## (Intercept)         Xobs  \n##    0.002927     0.997569\nsummary(model) # 2. Calculate standard errors, CI, and p-values\n## \n## Call:\n## lm(formula = Y ~ Xobs)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.49919 -0.13197 -0.01336  0.14239  0.64505 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 0.002927   0.021838   0.134    0.894    \n## Xobs        0.997569   0.022490  44.355   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.2184 on 98 degrees of freedom\n## Multiple R-squared:  0.9526, Adjusted R-squared:  0.9521 \n## F-statistic:  1967 on 1 and 98 DF,  p-value: &lt; 2.2e-16",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Simple linear regression</span>"
    ]
  },
  {
    "objectID": "4-SimpleRegression.html#sec-lm",
    "href": "4-SimpleRegression.html#sec-lm",
    "title": "8  Simple linear regression",
    "section": "8.3 Understanding the linear regression",
    "text": "8.3 Understanding the linear regression\n\nBesides the MLE, there are also several tests in a regression. The most important are\n\nsignificance of each parameter. \u000bt-test: H0 = variable has no effect, that means the estimator for the parameter is 0\u000b\nsignificance of the model. \u000bF-test: H0 = none of the explanatory variables has an effect, that means all estimators are 0\n\nExample:\n\npairs(airquality)\n\n\n\n\n\n\n\n# first think about what is explanatory / predictor \n# and what is the dependent variable (e.g. in Ozone and Temp)\n\n# par(mfrow = c(1, 1))\nplot(Ozone ~ Temp, data = airquality)\n\n\n\n\n\n\n\nfit1 = lm(Ozone ~ Temp, data = airquality)\nsummary(fit1)\n## \n## Call:\n## lm(formula = Ozone ~ Temp, data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.729 -17.409  -0.587  11.306 118.271 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -146.9955    18.2872  -8.038 9.37e-13 ***\n## Temp           2.4287     0.2331  10.418  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 23.71 on 114 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.4877, Adjusted R-squared:  0.4832 \n## F-statistic: 108.5 on 1 and 114 DF,  p-value: &lt; 2.2e-16\n# gives a negative values for the intercept = negative Ozone levels when Temp = 0\n# this does not make sense (&gt;extrapolation)\n\n# we can also fit a model without intercept, \n# without means: intercept = 0; y = a*x \n# although this doesn't make much sense here\nfit2 = lm(Ozone ~ Temp - 1, data = airquality)\nsummary(fit2)\n## \n## Call:\n## lm(formula = Ozone ~ Temp - 1, data = airquality)\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## -38.47 -23.26 -12.46  15.15 121.96 \n## \n## Coefficients:\n##      Estimate Std. Error t value Pr(&gt;|t|)    \n## Temp  0.56838    0.03498   16.25   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 29.55 on 115 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.6966, Adjusted R-squared:  0.6939 \n## F-statistic:   264 on 1 and 115 DF,  p-value: &lt; 2.2e-16\n\nplot(Ozone ~ Temp, data = airquality, xlim = c(0,100), ylim = c(-150, 150))\nabline(fit1, col = \"green\")\nabline(fit2, col = \"red\", lty = 2)\n\n\n\n\n\n\n\n\n# there is no need to check normality of Ozone\nhist(airquality$Ozone) # this is not normal, and that's no problem !\n\n\n\n\n\n\n\n\n\n8.3.1 Model diagnostics\nThe regression optimizes the parameters under the condition that the model is correct (e.g. there is really a linear relationship). If the model is not specified correctly, the parameter values are still estimated - to the best of the model’s ability, but the result will be misleading, e.g. p-values and effect sizes\nWhat could be wrong:\n\nthe distribution (e.g. error not normal)\nthe shape of the relationship between explanatory variable and dependent variable (e.g., could be non-linear)\n\nThe model’s assumptions must always be checked!\nWe can check the model by looking at the residuals (which are predicted - observed values) which should be normally distributed and should show no patterns:\n\nX = runif(50)\nY = X + rnorm(50, sd = 0.2)\nfit = lm(Y~X)\npar(mfrow = c(1, 3))\nplot(X, Y)\nabline(fit, col = \"red\")\nplot(X, predict(fit) - Y, ylab = \"Residuals\")\nabline(h = 0, col = \"red\")\nhist(predict(fit) - Y, main = \"\", xlab = \"Residuals\")\n\n\n\n\n\n\n\npar(mfrow = c(1,1))\n\nThe residuals should match the model assumptions. For linear regression:\n\nnormal distribution\nconstant variance\nindependence of the data points\n\nExample:\n\nfit1 = lm(Ozone~Temp, data = airquality)\nresiduals(fit1)\n##           1           2           3           4           6           7 \n##  25.2723695   8.1288530 -20.7285536  14.4158861  14.7010729  12.1297762 \n##           8           9          11          12          13          14 \n##  22.7019960   6.8445894 -25.7285536  -4.5850371  -2.2989271  -4.1563338 \n##          15          16          17          18          19          20 \n##  24.1306993   5.5584795  20.7010729  14.5594026  11.8436662   7.4158861 \n##          21          22          23          24          28          29 \n##   4.7019960 -19.2998503   2.8445894  30.8445894   7.2723695  -4.7294767 \n##          30          31          38          40          41          44 \n##  70.1279299  -0.5859602 -23.1581800  -0.5878065 -25.3016966 -29.1581800 \n##          47          48          49          50          51          62 \n## -19.0146635   9.1288530   9.1297762 -18.2998503 -24.5859602  77.9844134 \n##          63          64          66          67          68          69 \n## -10.4442899 -17.7294767   9.4131167 -14.5868833  10.2696001  20.5547869 \n##          70          71          73          74          76          77 \n##  20.5547869  15.8408968 -20.2998503 -22.7294767 -40.3007734  -1.7294767 \n##          78          79          80          81          82          85 \n## -17.1581800   3.9844134  14.6983034   3.5557101 -16.7285536  18.1270068 \n##          86          87          88          89          90          91 \n##  48.5557101 -32.1581800  -9.8729932  15.2696001 -11.8729932   9.4131167 \n##          92          93          94          95          96          97 \n##   9.2705233 -10.7294767 -40.7294767 -36.1581800  16.1270068 -24.4442899 \n##          98          99         100         101         104         105 \n##   1.6983034  52.8408968  17.4121935  38.4121935 -17.8729932 -24.1581800 \n##         106         108         109         110         111         112 \n##  17.6992266 -18.0146635  14.1279299 -14.5859602 -11.4433668   1.5566332 \n##         113         114         116         117         118         120 \n## -19.0146635 -18.8711470   0.1279299 118.2705233  11.1270068 -12.5887296 \n##         121         122         123         124         125         126 \n##  36.6973803  -2.1600263   3.6973803  21.9834902   1.5547869  -5.8739164 \n##         127         128         129         130         131         132 \n##  12.1260836 -17.3016966 -25.0155866 -27.3007734 -19.4433668 -14.1572569 \n##         133         134         135         136         137         138 \n##  -6.2998503  -5.7294767 -16.5859602 -12.0146635 -16.4424437 -12.4424437 \n##         139         140         141         142         143         144 \n##   3.5566332   2.2723695 -24.5859602   5.8436662 -36.1581800   4.5584795 \n##         145         146         147         148         149         151 \n##  -2.4424437 -13.7294767 -13.5850371   7.9871828   6.9862596 -21.1572569 \n##         152         153 \n## -19.5859602   1.8436662\nhist(residuals(fit1))\n\n\n\n\n\n\n\n# residuals are not normally distributed\n# we do not use a test for this, but instead look at the residuals visually\n\n# let's plot residuals versus predictor\nplot(airquality$Temp[!is.na(airquality$Ozone)], residuals(fit1))\n\n\n\n\n\n\n\n\n# model checking plots\noldpar= par(mfrow = c(2,2))\nplot(fit1)\n\n\n\n\n\n\n\npar(oldpar)\n#&gt; there's a pattern in the residuals &gt; the model does not fit very well!\n\n\n\n8.3.2 Linear regression with a categorical variable\nWe can also use categorical variables as an explanatory variable:\n\nm = lm(weight~group, data = PlantGrowth)\nsummary(m)\n## \n## Call:\n## lm(formula = weight ~ group, data = PlantGrowth)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.0710 -0.4180 -0.0060  0.2627  1.3690 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   5.0320     0.1971  25.527   &lt;2e-16 ***\n## grouptrt1    -0.3710     0.2788  -1.331   0.1944    \n## grouptrt2     0.4940     0.2788   1.772   0.0877 .  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6234 on 27 degrees of freedom\n## Multiple R-squared:  0.2641, Adjusted R-squared:  0.2096 \n## F-statistic: 4.846 on 2 and 27 DF,  p-value: 0.01591\n\nThe lm estimates an effect/intercept for each level in the categorical variable. The first level of the categorical variable is used as a reference, i.e. the true effect for grouptrt1 is Intercept+grouptrt1 = 4.661 and grouptrt2 is 5.5242. Moreover, the lm tests for a difference of the reference to the other levels. So with this model we know whether the control is significant different from treatment 1 and 2 but we cannot say anything about the difference between trt1 and trt2.\nIf we are interested in testing trt1 vs trt2 we can, for example, change the reference level of our variable:\n\ntmp = PlantGrowth\ntmp$group = relevel(tmp$group, ref = \"trt1\")\nm = lm(weight~group, data = tmp)\nsummary(m)\n## \n## Call:\n## lm(formula = weight ~ group, data = tmp)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.0710 -0.4180 -0.0060  0.2627  1.3690 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   4.6610     0.1971  23.644  &lt; 2e-16 ***\n## groupctrl     0.3710     0.2788   1.331  0.19439    \n## grouptrt2     0.8650     0.2788   3.103  0.00446 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6234 on 27 degrees of freedom\n## Multiple R-squared:  0.2641, Adjusted R-squared:  0.2096 \n## F-statistic: 4.846 on 2 and 27 DF,  p-value: 0.01591\n\nAnother example:\n\nlibrary(effects)\n## Carregando pacotes exigidos: carData\n## lattice theme set by effectsTheme()\n## See ?effectsTheme for details.\nlibrary(jtools)\n\nsummary(chickwts)\n##      weight             feed   \n##  Min.   :108.0   casein   :12  \n##  1st Qu.:204.5   horsebean:10  \n##  Median :258.0   linseed  :12  \n##  Mean   :261.3   meatmeal :11  \n##  3rd Qu.:323.5   soybean  :14  \n##  Max.   :423.0   sunflower:12\n\nplot(weight ~ feed, chickwts)\n\n\n\n\n\n\n\nfit4 = lm(weight ~ feed, chickwts)\n\nsummary(fit4)\n## \n## Call:\n## lm(formula = weight ~ feed, data = chickwts)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -123.909  -34.413    1.571   38.170  103.091 \n## \n## Coefficients:\n##               Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)    323.583     15.834  20.436  &lt; 2e-16 ***\n## feedhorsebean -163.383     23.485  -6.957 2.07e-09 ***\n## feedlinseed   -104.833     22.393  -4.682 1.49e-05 ***\n## feedmeatmeal   -46.674     22.896  -2.039 0.045567 *  \n## feedsoybean    -77.155     21.578  -3.576 0.000665 ***\n## feedsunflower    5.333     22.393   0.238 0.812495    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 54.85 on 65 degrees of freedom\n## Multiple R-squared:  0.5417, Adjusted R-squared:  0.5064 \n## F-statistic: 15.36 on 5 and 65 DF,  p-value: 5.936e-10\nanova(fit4) #get overall effect of feeding treatment\n## Analysis of Variance Table\n## \n## Response: weight\n##           Df Sum Sq Mean Sq F value    Pr(&gt;F)    \n## feed       5 231129   46226  15.365 5.936e-10 ***\n## Residuals 65 195556    3009                      \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nplot(allEffects(fit4))\n\n\n\n\n\n\n\nplot(allEffects(fit4, partial.residuals = T))\n\n\n\n\n\n\n\neffect_plot(fit4, pred = feed, interval = TRUE, plot.points = F)\n\n\n\n\n\n\n\n\nold.par = par(mfrow = c(2, 2))\nplot(fit4)\n\n\n\n\n\n\n\npar(old.par)\n\nboxplot(residuals(fit4) ~ chickwts$feed)\n\n\n\n\n\n\n\n\n\n\n8.3.3 Linear regression with a quadratic term\n\n## what does simple linear regression mean?\n# simple = one predictor!\n# linear = linear in the parameters\n# a0 + a1 * x + a2 * x^2 \n# even if we add a quadratic term, this is a linear combination\n# this is called polynomial\n\nfit3 = lm(Ozone ~ Temp + I(Temp^2), data = airquality)\nsummary(fit3)\n## \n## Call:\n## lm(formula = Ozone ~ Temp + I(Temp^2), data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -37.619 -12.513  -2.736   9.676 123.909 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 305.48577  122.12182   2.501 0.013800 *  \n## Temp         -9.55060    3.20805  -2.977 0.003561 ** \n## I(Temp^2)     0.07807    0.02086   3.743 0.000288 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 22.47 on 113 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.5442, Adjusted R-squared:  0.5362 \n## F-statistic: 67.46 on 2 and 113 DF,  p-value: &lt; 2.2e-16\n\noldpar= par(mfrow = c(2,2))\nplot(fit3)\n\n\n\n\n\n\n\npar(oldpar)\n\n\n# Residual vs. fitted looks okay, but Outliers are still there, and additionally\n# too wide. But for now, let's plot prediction with uncertainty (plot line plus confidence interval)\n\nplot(Ozone ~ Temp, data = airquality)\n\n# if the relationship between x and y is not linear, we cannot use abline\n# instead we predict values of x for different values of y based on the model \nnewDat = data.frame(Temp = 55:100)\npredictions = predict(fit3, newdata = newDat, se.fit = T)\n# and plot these into our figure:\nlines(newDat$Temp, predictions$fit, col= \"red\")\n# let's also plot the confidence intervals:\nlines(newDat$Temp, predictions$fit + 1.96*predictions$se.fit, col= \"red\", lty = 2)\nlines(newDat$Temp, predictions$fit - 1.96*predictions$se.fit, col= \"red\", lty = 2)\n\n# add a polygon (shading for confidence interval)\nx = c(newDat$Temp, rev(newDat$Temp))\ny = c(predictions$fit - 1.96*predictions$se.fit, \n      rev(predictions$fit + 1.96*predictions$se.fit))\n\npolygon(x,y, col=\"#99009922\", border = F )\n\n\n\n\n\n\n\n\n\n# alternative: use package effects\n#install.packages(\"effects\")\nlibrary(effects)\nplot(allEffects(fit3))\n\n\n\n\n\n\n\nplot(allEffects(fit3, partial.residuals = T)) \n\n\n\n\n\n\n\n#to check patterns in residuals (plots measurements and partial residuals)\n\n# or jtools package\nlibrary(jtools)\neffect_plot(fit3, pred = Temp, interval = TRUE, plot.points = TRUE)",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Simple linear regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html",
    "href": "5-MultipleRegression.html",
    "title": "9  Multiple regression",
    "section": "",
    "text": "9.1 Confounder\nConfounders have effects on the response and another predictor.\nClimate = runif(100)\nTemp = Climate + rnorm(100, sd = 0.2)\nGrowth = 0.5*Temp - 1.0*Climate + rnorm(100, sd = 0.2)\n\nsummary(lm(Growth~Temp))\n## \n## Call:\n## lm(formula = Growth ~ Temp)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.55719 -0.18748 -0.01354  0.18858  0.59337 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -0.16604    0.04228  -3.927  0.00016 ***\n## Temp        -0.19311    0.06602  -2.925  0.00428 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.2472 on 98 degrees of freedom\n## Multiple R-squared:  0.0803, Adjusted R-squared:  0.07091 \n## F-statistic: 8.556 on 1 and 98 DF,  p-value: 0.004279\nsummary(lm(Growth~Temp+Climate)) # correct effects!!\n## \n## Call:\n## lm(formula = Growth ~ Temp + Climate)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.41912 -0.13228 -0.00661  0.12988  0.41630 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  0.009234   0.038203   0.242     0.81    \n## Temp         0.568083   0.102652   5.534 2.66e-07 ***\n## Climate     -1.088041   0.127964  -8.503 2.27e-13 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.1881 on 97 degrees of freedom\n## Multiple R-squared:  0.473,  Adjusted R-squared:  0.4622 \n## F-statistic: 43.54 on 2 and 97 DF,  p-value: 3.205e-14\nIdentifying confounders is the most important challenge in observational studies: For example, several studies showed that overweight adults have lower mortality. However, another study shows that these earlier results might have come up due to confounding: smoking!\nConfounders can even lead to observed correlations where in reality there is no such correlation. This is called spurious correlation.",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#confounder",
    "href": "5-MultipleRegression.html#confounder",
    "title": "9  Multiple regression",
    "section": "",
    "text": "smokers: higher mortality and lower BMI -&gt; people with lower BMI have higher mortality rates\nWhen we correct for the confounder smoking, the correlation between BMI and mortality goes in the other direction, i.e. obese people have higher mortality!\n\n\n\n\n\n\n\n\nWarning\n\n\n\nConclusion: Confounders can cause correlations where no causal relationship exists.",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#multiple-lm",
    "href": "5-MultipleRegression.html#multiple-lm",
    "title": "9  Multiple regression",
    "section": "9.2 Multiple LM",
    "text": "9.2 Multiple LM\nThe multiple linear regression can deal with confounders:\n\nUnivariate (simple) linear regression describes how y depends on x using a polynomial of x1 e.g.: \\[\ny = a_0 + a_1*x_1 + a_2*x_1^2\n\\]\nMultiple linear regression expands simple linear regression to a polynomial of several explanatory variables x1, x2… e.g.: \\[\ny = a_0 + a_1*x_1 + a_2*x_2 + a_3*x_3\n\\]\nIdea: if we jointly consider “all” variables in the model formula, the influence of confounding variables is incorporated\n\n\n## first remove observations with NA values\nnewAirquality = airquality[complete.cases(airquality),]\nsummary(newAirquality)\n##      Ozone          Solar.R           Wind            Temp      \n##  Min.   :  1.0   Min.   :  7.0   Min.   : 2.30   Min.   :57.00  \n##  1st Qu.: 18.0   1st Qu.:113.5   1st Qu.: 7.40   1st Qu.:71.00  \n##  Median : 31.0   Median :207.0   Median : 9.70   Median :79.00  \n##  Mean   : 42.1   Mean   :184.8   Mean   : 9.94   Mean   :77.79  \n##  3rd Qu.: 62.0   3rd Qu.:255.5   3rd Qu.:11.50   3rd Qu.:84.50  \n##  Max.   :168.0   Max.   :334.0   Max.   :20.70   Max.   :97.00  \n##      Month            Day       \n##  Min.   :5.000   Min.   : 1.00  \n##  1st Qu.:6.000   1st Qu.: 9.00  \n##  Median :7.000   Median :16.00  \n##  Mean   :7.216   Mean   :15.95  \n##  3rd Qu.:9.000   3rd Qu.:22.50  \n##  Max.   :9.000   Max.   :31.00\n\n# simple regression\nm0 = lm(Ozone ~ Temp , data = newAirquality)\nsummary(m0)\n## \n## Call:\n## lm(formula = Ozone ~ Temp, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.922 -17.459  -0.874  10.444 118.078 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -147.6461    18.7553  -7.872 2.76e-12 ***\n## Temp           2.4391     0.2393  10.192  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 23.92 on 109 degrees of freedom\n## Multiple R-squared:  0.488,  Adjusted R-squared:  0.4833 \n## F-statistic: 103.9 on 1 and 109 DF,  p-value: &lt; 2.2e-16\nplot(m0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot(Ozone ~ Temp , data = newAirquality)\nabline(m0, col = \"blue\", lwd = 3)\n\n\n\n\n\n\n\n\n# Today: multiple linear regression\nm1 = lm(Ozone ~ Temp + Wind , data = newAirquality)\n# have a look at the residuals:\nop &lt;- par(mfrow = c(2,2))\nplot(m1)\n\n\n\n\n\n\n\npar(op)\n\nsummary(m1)\n## \n## Call:\n## lm(formula = Ozone ~ Temp + Wind, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -42.156 -13.216  -3.123  10.598  98.492 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -67.3220    23.6210  -2.850  0.00524 ** \n## Temp          1.8276     0.2506   7.294 5.29e-11 ***\n## Wind         -3.2948     0.6711  -4.909 3.26e-06 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 21.73 on 108 degrees of freedom\n## Multiple R-squared:  0.5814, Adjusted R-squared:  0.5736 \n## F-statistic: 74.99 on 2 and 108 DF,  p-value: &lt; 2.2e-16\n\n# plotting multiple regression outputs\nlibrary(effects)\n## Carregando pacotes exigidos: carData\n## lattice theme set by effectsTheme()\n## See ?effectsTheme for details.\nplot(allEffects(m1))\n\n\n\n\n\n\n\n\n\n## Omitted variable bias\nboth = lm(Ozone ~ Wind + Temp, newAirquality)\nwind = lm(Ozone ~ Wind , newAirquality)\ntemp = lm(Ozone ~ Temp, newAirquality)\nsummary(both)\n## \n## Call:\n## lm(formula = Ozone ~ Wind + Temp, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -42.156 -13.216  -3.123  10.598  98.492 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -67.3220    23.6210  -2.850  0.00524 ** \n## Wind         -3.2948     0.6711  -4.909 3.26e-06 ***\n## Temp          1.8276     0.2506   7.294 5.29e-11 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 21.73 on 108 degrees of freedom\n## Multiple R-squared:  0.5814, Adjusted R-squared:  0.5736 \n## F-statistic: 74.99 on 2 and 108 DF,  p-value: &lt; 2.2e-16\nsummary(wind)\n## \n## Call:\n## lm(formula = Ozone ~ Wind, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -43.513 -18.597  -5.035  15.814  88.437 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  99.0413     7.4724   13.25  &lt; 2e-16 ***\n## Wind         -5.7288     0.7082   -8.09 9.09e-13 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 26.42 on 109 degrees of freedom\n## Multiple R-squared:  0.3752, Adjusted R-squared:  0.3694 \n## F-statistic: 65.44 on 1 and 109 DF,  p-value: 9.089e-13\n\nslopes &lt;- data.frame(\n  predictor = c(\"Wind\", \"Temp\"),\n  both.pred = round(coef(both)[2:3], digits = 2),\n  only.wind = c(round(coef(wind)[2], digits = 2), \"NA\"),\n  only.temp = c(\"NA\", round(coef(temp)[2], digits = 2))\n)\nslopes\n##      predictor both.pred only.wind only.temp\n## Wind      Wind     -3.29     -5.73        NA\n## Temp      Temp      1.83        NA      2.44\n\nOmitting Wind makes the effect of Temperature larger.\nProblem: Multiple regression can separate the effect of collinear explanatory variables, but only, if collinearity is not too strong.\nSolution: If the correlation is really strong, we can omit one variable and interpret the remaining collinear variable as representing both.",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#interactions-between-variables",
    "href": "5-MultipleRegression.html#interactions-between-variables",
    "title": "9  Multiple regression",
    "section": "9.3 Interactions between variables",
    "text": "9.3 Interactions between variables\nIf one predictor influences the effect of the other predictor, we can include an interaction term into our model:\n\\[\ny \\sim a + b + a:b\n\\]\nor:\n\\[\ny \\sim a*b\n\\]\n\n# Include interaction\nm2 = lm(Ozone ~  scale(Wind)* scale(Temp) , data = newAirquality)\n# if including interactions, always scale your predictor variables!\n# scale: subtracts the mean and divides by standard deviation\nsummary(m2)\n## \n## Call:\n## lm(formula = Ozone ~ scale(Wind) * scale(Temp), data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.930 -11.193  -3.034   8.193  97.456 \n## \n## Coefficients:\n##                         Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)               38.469      2.137  18.002  &lt; 2e-16 ***\n## scale(Wind)              -11.758      2.238  -5.253 7.68e-07 ***\n## scale(Temp)               17.544      2.239   7.837 3.62e-12 ***\n## scale(Wind):scale(Temp)   -7.367      1.848  -3.987 0.000123 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 20.37 on 107 degrees of freedom\n## Multiple R-squared:  0.6355, Adjusted R-squared:  0.6253 \n## F-statistic: 62.19 on 3 and 107 DF,  p-value: &lt; 2.2e-16\nop &lt;- par(mfrow = c(2,2))\nplot(m2)\n\n\n\n\n\n\n\npar(op)\n\nThe influence of temperature on growth depends on the amount of precipitation, or: If there’s not enough water, also higher temperatures cannot increase growth.\nExample:\n\n# How does everything change, if we have factorial predictors?\nnewAirquality$MonthFactor = as.factor(newAirquality$Month)\n\nm4 = lm(sqrt(Ozone) ~ MonthFactor + scale(Wind) * scale(Temp) * scale(Solar.R) , \n        data = newAirquality)\nsummary(m4)\n## \n## Call:\n## lm(formula = sqrt(Ozone) ~ MonthFactor + scale(Wind) * scale(Temp) * \n##     scale(Solar.R), data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -2.6096 -0.8869 -0.2067  0.7647  4.3191 \n## \n## Coefficients:\n##                                        Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)                             6.12172    0.37148  16.479  &lt; 2e-16 ***\n## MonthFactor6                           -0.54487    0.60633  -0.899 0.371025    \n## MonthFactor7                           -0.37571    0.51347  -0.732 0.466072    \n## MonthFactor8                           -0.03770    0.52839  -0.071 0.943262    \n## MonthFactor9                           -0.74343    0.43308  -1.717 0.089179 .  \n## scale(Wind)                            -0.76983    0.16456  -4.678 9.18e-06 ***\n## scale(Temp)                             1.35350    0.20937   6.465 3.86e-09 ***\n## scale(Solar.R)                          0.65689    0.16212   4.052 0.000101 ***\n## scale(Wind):scale(Temp)                -0.30440    0.14655  -2.077 0.040379 *  \n## scale(Wind):scale(Solar.R)             -0.07695    0.17222  -0.447 0.655999    \n## scale(Temp):scale(Solar.R)              0.22985    0.15451   1.488 0.140040    \n## scale(Wind):scale(Temp):scale(Solar.R)  0.03202    0.15179   0.211 0.833366    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.328 on 99 degrees of freedom\n## Multiple R-squared:  0.7335, Adjusted R-squared:  0.7039 \n## F-statistic: 24.78 on 11 and 99 DF,  p-value: &lt; 2.2e-16\n\nm5 = lm(sqrt(Ozone) ~ MonthFactor + scale(Wind) + scale(Temp) + scale(Solar.R) \n                      + scale(Wind):scale(Temp)\n                      + scale(Wind):scale(Solar.R)\n                      + scale(Temp):scale(Solar.R), \n        data = newAirquality)\nsummary(m5)\n## \n## Call:\n## lm(formula = sqrt(Ozone) ~ MonthFactor + scale(Wind) + scale(Temp) + \n##     scale(Solar.R) + scale(Wind):scale(Temp) + scale(Wind):scale(Solar.R) + \n##     scale(Temp):scale(Solar.R), data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -2.6023 -0.9182 -0.2180  0.7713  4.3209 \n## \n## Coefficients:\n##                            Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)                 6.12350    0.36960  16.568  &lt; 2e-16 ***\n## MonthFactor6               -0.54871    0.60315  -0.910   0.3652    \n## MonthFactor7               -0.39194    0.50524  -0.776   0.4397    \n## MonthFactor8               -0.04701    0.52402  -0.090   0.9287    \n## MonthFactor9               -0.74873    0.43028  -1.740   0.0849 .  \n## scale(Wind)                -0.75588    0.14997  -5.040 2.07e-06 ***\n## scale(Temp)                 1.35192    0.20823   6.492 3.29e-09 ***\n## scale(Solar.R)              0.65178    0.15953   4.086 8.88e-05 ***\n## scale(Wind):scale(Temp)    -0.31305    0.14002  -2.236   0.0276 *  \n## scale(Wind):scale(Solar.R) -0.09259    0.15469  -0.599   0.5508    \n## scale(Temp):scale(Solar.R)  0.23573    0.15126   1.558   0.1223    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.321 on 100 degrees of freedom\n## Multiple R-squared:  0.7334, Adjusted R-squared:  0.7068 \n## F-statistic: 27.51 on 10 and 100 DF,  p-value: &lt; 2.2e-16\n\n# short form for including only two-way interactions:\n\nm5 = lm(sqrt(Ozone) ~ MonthFactor + (scale(Wind) + scale(Temp) + scale(Solar.R))^2,\n        data = newAirquality)\nsummary(m5)\n## \n## Call:\n## lm(formula = sqrt(Ozone) ~ MonthFactor + (scale(Wind) + scale(Temp) + \n##     scale(Solar.R))^2, data = newAirquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -2.6023 -0.9182 -0.2180  0.7713  4.3209 \n## \n## Coefficients:\n##                            Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)                 6.12350    0.36960  16.568  &lt; 2e-16 ***\n## MonthFactor6               -0.54871    0.60315  -0.910   0.3652    \n## MonthFactor7               -0.39194    0.50524  -0.776   0.4397    \n## MonthFactor8               -0.04701    0.52402  -0.090   0.9287    \n## MonthFactor9               -0.74873    0.43028  -1.740   0.0849 .  \n## scale(Wind)                -0.75588    0.14997  -5.040 2.07e-06 ***\n## scale(Temp)                 1.35192    0.20823   6.492 3.29e-09 ***\n## scale(Solar.R)              0.65178    0.15953   4.086 8.88e-05 ***\n## scale(Wind):scale(Temp)    -0.31305    0.14002  -2.236   0.0276 *  \n## scale(Wind):scale(Solar.R) -0.09259    0.15469  -0.599   0.5508    \n## scale(Temp):scale(Solar.R)  0.23573    0.15126   1.558   0.1223    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.321 on 100 degrees of freedom\n## Multiple R-squared:  0.7334, Adjusted R-squared:  0.7068 \n## F-statistic: 27.51 on 10 and 100 DF,  p-value: &lt; 2.2e-16\n# get overall effect of Month:\nanova(m5)\n## Analysis of Variance Table\n## \n## Response: sqrt(Ozone)\n##                             Df  Sum Sq Mean Sq F value    Pr(&gt;F)    \n## MonthFactor                  4 158.726  39.681 22.7249 2.261e-13 ***\n## scale(Wind)                  1 149.523 149.523 85.6296 4.282e-15 ***\n## scale(Temp)                  1 126.124 126.124 72.2290 1.899e-13 ***\n## scale(Solar.R)               1  19.376  19.376 11.0961 0.0012129 ** \n## scale(Wind):scale(Temp)      1  20.639  20.639 11.8198 0.0008556 ***\n## scale(Wind):scale(Solar.R)   1   1.803   1.803  1.0328 0.3119518    \n## scale(Temp):scale(Solar.R)   1   4.241   4.241  2.4288 0.1222856    \n## Residuals                  100 174.616   1.746                      \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n# this is doing a type I ANOVA = sequential\n# order in which you include the predictors changes the estimates and p-values\n\n# If you want to do a type II ANOVA, use ANova() from the car package\nlibrary(car)\nAnova(m5) # Anova with capital A\n## Anova Table (Type II tests)\n## \n## Response: sqrt(Ozone)\n##                             Sum Sq  Df F value    Pr(&gt;F)    \n## MonthFactor                  9.557   4  1.3683 0.2503349    \n## scale(Wind)                 41.993   1 24.0488 3.641e-06 ***\n## scale(Temp)                 78.938   1 45.2067 1.112e-09 ***\n## scale(Solar.R)              23.189   1 13.2797 0.0004276 ***\n## scale(Wind):scale(Temp)      8.728   1  4.9983 0.0275955 *  \n## scale(Wind):scale(Solar.R)   0.626   1  0.3582 0.5508395    \n## scale(Temp):scale(Solar.R)   4.241   1  2.4288 0.1222856    \n## Residuals                  174.616 100                      \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#type II ANOVA: all other predictors have already been taken into account\n# Does an additional predictor explain some of the variance on top of that?",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#model-selection",
    "href": "5-MultipleRegression.html#model-selection",
    "title": "9  Multiple regression",
    "section": "9.4 Model selection",
    "text": "9.4 Model selection\nWe’ve learned that we should include variables in the model that are collinear, that is they correlate with other predictors, but how many and which factors should we include?\nFamous example: Female hurricanes are deadlier than male hurricanes (Jung et al., 2014)\nThey have analyzed the number of fatalities of hurricane and claimed that there is an effect of femininity of the name on the number of deads (while correcting for confounders). They recommend to give hurricans only male names because it would considerably reduce the number of deads.\n\nlibrary(DHARMa)\n## This is DHARMa 0.4.7. For overview type '?DHARMa'. For recent changes, type news(package = 'DHARMa')\nlibrary(effects)\n?hurricanes\nstr(hurricanes)\n## Classes 'tbl_df', 'tbl' and 'data.frame':    92 obs. of  14 variables:\n##  $ Year                    : num  1950 1950 1952 1953 1953 ...\n##  $ Name                    : chr  \"Easy\" \"King\" \"Able\" \"Barbara\" ...\n##  $ MasFem                  : num  6.78 1.39 3.83 9.83 8.33 ...\n##  $ MinPressure_before      : num  958 955 985 987 985 960 954 938 962 987 ...\n##  $ Minpressure_Updated_2014: num  960 955 985 987 985 960 954 938 962 987 ...\n##  $ Gender_MF               : num  1 0 0 1 1 1 1 1 1 1 ...\n##  $ Category                : num  3 3 1 1 1 3 3 4 3 1 ...\n##  $ alldeaths               : num  2 4 3 1 0 60 20 20 0 200 ...\n##  $ NDAM                    : num  1590 5350 150 58 15 ...\n##  $ Elapsed_Yrs             : num  63 63 61 60 60 59 59 59 58 58 ...\n##  $ Source                  : chr  \"MWR\" \"MWR\" \"MWR\" \"MWR\" ...\n##  $ ZMasFem                 : num  -0.000935 -1.670758 -0.913313 0.945871 0.481075 ...\n##  $ ZMinPressure_A          : num  -0.356 -0.511 1.038 1.141 1.038 ...\n##  $ ZNDAM                   : num  -0.439 -0.148 -0.55 -0.558 -0.561 ...\n\nlibrary(glmmTMB)\n## Warning in check_dep_version(dep_pkg = \"TMB\"): package version mismatch: \n## glmmTMB was built with TMB package version 1.9.15\n## Current TMB package version is 1.9.17\n## Please re-install glmmTMB from source or restore original 'TMB' package (see '?reinstalling' for more information)\n\nm1 = glmmTMB(alldeaths ~ MasFem*\n                             (Minpressure_Updated_2014 + scale(NDAM)),\n                           data = hurricanes, family = nbinom2)\nsummary(m1)\n##  Family: nbinom2  ( log )\n## Formula:          alldeaths ~ MasFem * (Minpressure_Updated_2014 + scale(NDAM))\n## Data: hurricanes\n## \n##      AIC      BIC   logLik deviance df.resid \n##    660.7    678.4   -323.4    646.7       85 \n## \n## \n## Dispersion parameter for nbinom2 family (): 0.787 \n## \n## Conditional model:\n##                                  Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)                     69.661590  23.425598   2.974 0.002942 ** \n## MasFem                          -5.855078   2.716589  -2.155 0.031138 *  \n## Minpressure_Updated_2014        -0.069870   0.024251  -2.881 0.003964 ** \n## scale(NDAM)                     -0.494094   0.455968  -1.084 0.278536    \n## MasFem:Minpressure_Updated_2014  0.006108   0.002813   2.171 0.029901 *  \n## MasFem:scale(NDAM)               0.205418   0.061956   3.316 0.000915 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nInteractions -&gt; we need to scale variables:\n\nm2 = glmmTMB(alldeaths ~ scale(MasFem)*\n                             (scale(Minpressure_Updated_2014) + scale(NDAM)+scale(sqrt(NDAM))),\n                           data = hurricanes, family = nbinom2)\nsummary(m2)\n##  Family: nbinom2  ( log )\n## Formula:          \n## alldeaths ~ scale(MasFem) * (scale(Minpressure_Updated_2014) +  \n##     scale(NDAM) + scale(sqrt(NDAM)))\n## Data: hurricanes\n## \n##      AIC      BIC   logLik deviance df.resid \n##    634.9    657.6   -308.4    616.9       83 \n## \n## \n## Dispersion parameter for nbinom2 family (): 1.12 \n## \n## Conditional model:\n##                                               Estimate Std. Error z value\n## (Intercept)                                    2.28082    0.10850  21.022\n## scale(MasFem)                                  0.05608    0.10672   0.525\n## scale(Minpressure_Updated_2014)               -0.14267    0.17804  -0.801\n## scale(NDAM)                                   -1.11104    0.28030  -3.964\n## scale(sqrt(NDAM))                              2.10764    0.36487   5.776\n## scale(MasFem):scale(Minpressure_Updated_2014)  0.07371    0.19618   0.376\n## scale(MasFem):scale(NDAM)                     -0.10159    0.27080  -0.375\n## scale(MasFem):scale(sqrt(NDAM))                0.32960    0.36594   0.901\n##                                               Pr(&gt;|z|)    \n## (Intercept)                                    &lt; 2e-16 ***\n## scale(MasFem)                                    0.599    \n## scale(Minpressure_Updated_2014)                  0.423    \n## scale(NDAM)                                   7.38e-05 ***\n## scale(sqrt(NDAM))                             7.63e-09 ***\n## scale(MasFem):scale(Minpressure_Updated_2014)    0.707    \n## scale(MasFem):scale(NDAM)                        0.708    \n## scale(MasFem):scale(sqrt(NDAM))                  0.368    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThe effect of femininity is gone! Already with the scaled variables, but also with the transformation with the NDAM variable. The question was raised which of both is more reasonable, whether the relationship between damage and mortality isn’t a straight line or that the gender of the hurricane names affect deaths (Bob O’Hara and GrrlScientist). They argue that the model with the transformed variable fits the data better which brings us to the topic of this section, how to choose between different models? Answering this question if the goal of model selection.\nWhy not include all the variables we can measure in our model? Problem with the full model:\n\nIf you have more parameters than data points, the model cannot be fitted at all\nEven with n (samples) ~ k (number of parameters), model properties become very unfavorable (high p-values and uncertainties/standard errors) –&gt; Overfitting\n\nA “good model” depends on the goal of the analysis, do we want to optimize:\n\nPredictive ability – how well can we predict with the model?\nInferential ability – do we identify the true values for the parameters (true effects), are the p-values correct, can we correctly say that a variable has an effect?\n\nThe more complex a model gets, the better it fits to the data, but there’s a downside, the bias-variance tradeoff.\nExplanation bias-variance tradeoff\nExplanation LRT and AIC\nProblem of p-hacking\nExample:\n\n# Compare different competing models:\n# let's compare models m3 and m5 to decide which one explains our data better:\n# 1. LRT\nanova(m3, m5)\n# RSS = residual sum of squares = variance not explained by the model\n# smaller RSS = better model\n# p-value\n\n#2. AIC\nAIC(m3)\nAIC(m5)\n# also here, model m5 is better\n\n\n#### Demonstration: Why interpretation of effect sizes and p-values \n### after extensive model selection is not a good idea:\nlibrary(MASS)\nset.seed(1)\n#make up predictors:\ndat = data.frame(matrix(runif(20000), ncol = 100))\n# create a response variable\ndat$y = rnorm(200)\nfullModel = lm(y ~ ., data = dat)\nsum &lt;- summary(fullModel)\nmean(sum$coefficients[,4] &lt; 0.05)\n# 0.019: less than 2 % false positives = type I error rate\n\nselection = stepAIC(fullModel)\nsum.sel &lt;- summary(selection)\nmean(sum.sel$coefficients[,4] &lt; 0.05)\n# 0.48: Now almost 50 % of our results are false positives!!!",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "5-MultipleRegression.html#formula-syntax",
    "href": "5-MultipleRegression.html#formula-syntax",
    "title": "9  Multiple regression",
    "section": "9.5 Formula syntax",
    "text": "9.5 Formula syntax\n\nFormula syntax\n\n\n\n\n\n\n\nFormula\nMeaning\nDetails\n\n\n\n\ny~x_1\n\\(y=a_0 +a_1*x_1\\)\nSlope+Intercept\n\n\ny~x_1 - 1\n\\(y=a_1*x_1\\)\nSlope, no intercept\n\n\ny~I(x_1^2)\n\\(y=a_0 + a_1*(x_1^2)\\)\nQuadratic effect\n\n\ny~x_1+x_2\n\\(y=a_0+a_1*x_1+a_2*x_2\\)\nMultiple linear regression (two variables)\n\n\ny~x_1:x_2\n\\(y=a_0+a_1*(x_1*x_2)\\)\nInteraction between x1 and x2\n\n\ny~x_1*x_2\n\\(y=a_0+a_1*(x_1*x_2)+a_2*x_1+a_3*x_2\\)\nInteraction and main effects",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "6-GLM.html",
    "href": "6-GLM.html",
    "title": "10  Generalized linear models",
    "section": "",
    "text": "10.1 Logistic Regression\nFor the binomial model we can use the logit link:\n\\[\nlogit(y) = a_0 +a_1*x\n\\]\nAnd with the inverse link:\n\\[\ny = \\frac{1}{1+e^{-(a_0 + a_1) }}\n\\]\nYou can interpret the glm outputs basically like lm outputs.\nBUT: To get absolute response values, you have to transform the output with the inverse link function. For the logit, e.g. an intercept of 0 means a predicted value of 0.5. Different overall statistics: no R2 instead Pseudo R2 = 1 - Residual deviance / Null deviance\u000b(deviance is based on the likelihood):\n# logistic regression with categorical predictor\nm1 = glm(survived ~ sex, data = titanic, family = \"binomial\")\nsummary(m1)\n## \n## Call:\n## glm(formula = survived ~ sex, family = \"binomial\", data = titanic)\n## \n## Coefficients:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)   0.9818     0.1040   9.437   &lt;2e-16 ***\n## sexmale      -2.4254     0.1360 -17.832   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 1741.0  on 1308  degrees of freedom\n## Residual deviance: 1368.1  on 1307  degrees of freedom\n## AIC: 1372.1\n## \n## Number of Fisher Scoring iterations: 4\n\n# 2 groups: sexmale = difference of mean for male from mean for female\n# intercept = linear term for female: \n0.98 \n## [1] 0.98\n# but: this has to be transformed back to original scale before being interpreted!!!\n# survival probability for females\nplogis(0.98)\n## [1] 0.7271082\n# applies inverse logit function\n\n\n# linear term for male\n0.98 - 2.43\n## [1] -1.45\n# survival probability\nplogis(0.98 - 2.43)\n## [1] 0.1900016\n\n# predicted linear term\ntable(predict(m1))\n## \n##  -1.4436252928589 0.981813020919314 \n##               843               466\n# predicted response\ntable(predict(m1, type = \"response\"))\n## \n##  0.19098457888495 0.727467811158294 \n##               843               466\n\n\nplot(allEffects(m1))\n\n\n\n\n\n\n\n\n# more predictors\nm2 = glm(survived ~ sex + age, titanic, family = binomial)\nsummary(m2)\n## \n## Call:\n## glm(formula = survived ~ sex + age, family = binomial, data = titanic)\n## \n## Coefficients:\n##              Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)  1.235414   0.192032   6.433 1.25e-10 ***\n## sexmale     -2.460689   0.152315 -16.155  &lt; 2e-16 ***\n## age         -0.004254   0.005207  -0.817    0.414    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 1414.6  on 1045  degrees of freedom\n## Residual deviance: 1101.3  on 1043  degrees of freedom\n##   (263 observations deleted due to missingness)\n## AIC: 1107.3\n## \n## Number of Fisher Scoring iterations: 4\n\n\n# Calculate Pseudo R2: 1 - Residual deviance / Null deviance\n1 - 1101.3/1414.6 # Pseudo R2 of model\n## [1] 0.221476\n\n# Anova\nanova(m2, test = \"Chisq\")\n## Analysis of Deviance Table\n## \n## Model: binomial, link: logit\n## \n## Response: survived\n## \n## Terms added sequentially (first to last)\n## \n## \n##      Df Deviance Resid. Df Resid. Dev Pr(&gt;Chi)    \n## NULL                  1045     1414.6             \n## sex   1  312.612      1044     1102.0   &lt;2e-16 ***\n## age   1    0.669      1043     1101.3   0.4133    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nplot(allEffects(m2))\nResidual check:\n# Model diagnostics\n# do not use the plot(model) residual checks\n# use DHARMa package\nlibrary(DHARMa)\nres = simulateResiduals(m2)\nplot(res)",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Generalized linear models</span>"
    ]
  },
  {
<<<<<<< Updated upstream
    "objectID": "6-GLM.html#sec-poisson",
    "href": "6-GLM.html#sec-poisson",
    "title": "10  Generalized linear models",
    "section": "10.2 Poisson Regression",
    "text": "10.2 Poisson Regression\nPoisson regression is used for count data. Properties of count data are: no negative values, only integers, y ~ Poisson(lambda); where lambda = mean = variance, log link function (lambda must be positive).\nExample:\n\nhead(birdfeeding)\n##   feeding attractiveness\n## 1       3              1\n## 2       6              1\n## 3       8              1\n## 4       4              1\n## 5       2              1\n## 6       7              2\n\nplot(feeding ~ attractiveness, birdfeeding)\n\n\n\n\n\n\n\n\nfit = glm(feeding ~ attractiveness, birdfeeding, family = \"poisson\")\nsummary(fit)\n## \n## Call:\n## glm(formula = feeding ~ attractiveness, family = \"poisson\", data = birdfeeding)\n## \n## Coefficients:\n##                Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)     1.47459    0.19443   7.584 3.34e-14 ***\n## attractiveness  0.14794    0.05437   2.721  0.00651 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for poisson family taken to be 1)\n## \n##     Null deviance: 25.829  on 24  degrees of freedom\n## Residual deviance: 18.320  on 23  degrees of freedom\n## AIC: 115.42\n## \n## Number of Fisher Scoring iterations: 4\n\n# feeding for a bird with attractiveness 3\n# linear term\n1.47 + 0.148 * 3\n## [1] 1.914\n# pieces of food, using inverse of the link function, log --&gt; exp\nexp(1.47 + 0.148 * 3)\n## [1] 6.780155\n\n\nplot(allEffects(fit))\n\n\n\n\n\n\n\n\n\n# checking residuals\nres = simulateResiduals(fit)\nplot(res, quantreg = F)\n## Warning in smooth.spline(pred, res, df = 10): não usando df inválido; df deve\n## ser tal que 1 &lt; df &lt;= n := #{unique x} = 5\n\n\n\n\n\n\n\n# the warning is because of a recent change in DHARMa \n# qgam requires more data points\n\nNormal versus Poisson distribution:\n\nN(mean, sd)\u000bThis means that fitting a normal distribution estimates a parameter for the variance (sd)\nPoisson(lambda)\u000blambda = mean = variance\u000bThis means that a Poisson regression does not fit a separate parameter for the variance\n\nSo in the glm always assume that the variance is the mean, which is a strong assumption. In reality it can often occur that the variance is greater than expected (Overdispersion) or smaller than expected (Underdispersion). (this cannot happen for the lm because there we estimate a variance parameter (residual variance)). Overdispersion can have a HUGE influence on the MLEs and particularly on the p-values!\nWe can use the DHARMa package to check for Over or Underdispersion:\n\n# test for overdispersion\ntestDispersion(fit)\n\n\n\n\n\n\n\n## \n##  DHARMa nonparametric dispersion test via sd of residuals fitted vs.\n##  simulated\n## \n## data:  simulationOutput\n## dispersion = 0.74488, p-value = 0.384\n## alternative hypothesis: two.sided\n\n# Dispersion test is necessary for all poisson or binomial models with k/n \n# if positive, you can chose family = quasi-poisson or quasi-binomial\n# or use negative binomial distribution instead of poisson",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Generalized linear models</span>"
    ]
  },
  {
    "objectID": "4A-Exercise.html",
    "href": "4A-Exercise.html",
    "title": "Exercise - Simple linear regression",
    "section": "",
    "text": "Analyzing the “regrowth” dataset",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Simple linear regression"
    ]
  },
  {
    "objectID": "4A-Exercise.html#analyzing-the-regrowth-dataset",
    "href": "4A-Exercise.html#analyzing-the-regrowth-dataset",
    "title": "Exercise - Simple linear regression",
    "section": "",
    "text": "Warning\n\n\n\nImagine you have a garden with some fruit trees and you were thinking of adding some berry bushes between them. However, you don’t want them to suffer from malnutrition so you want to estimate the volume of root biomass as a function of the fruit biomass.\nCarry out the following tasks\n\nPerform a simple linear regression for the influence of fruit biomass on root biomass.\nVisualize the data and add the regression line to the plot.\n\nYou will need the following functions:\n\nlm()\nsummary()\nplot()\nabline()\n\n\nQuestion\nYou have performed a simple linear regression for the influence of fruit biomass on root biomass.\nWhich of the following statements are correct? (More than one are correct)\n\n Root biomass is not significantly affected by fruit biomass. Fruit biomass explains most of the variance (&gt;50%) in the root biomass. At a fruit biomass of 70, the model would predict root biomass of about 4.18 + 0.05*70. At a fruit biomass of 0, the model predicts a root biomass of about 4.18.\n\n\n\n\n\n\nClick here to see the solution\n\n### Solution\n\nRoot biomass is not significantly affected by fruit biomass. WRONG: Look at the p-value for the slope (2nd row in the regression table below Pr(&gt;|t|))\nFruit biomass explains most of the variance (&gt;50%) in the root biomass. CORRECT: The proportion of variance explained by the model is given by R2.\nAt a fruit biomass of 70, the model would predict root biomass of about \\(4.18 + 0.05*70\\). CORRECT: The linear equation for the model is: \\(y = a*x + b\\) that is \\(Root = slope*Fruit + intercept\\)\nAt a fruit biomass of 0, the model predicts a root biomass of about 4.18. CORRECT: This is the intercept (1st row in the regression table below Estimate)\n\nThis is the code that you need to interpret the results.\n\nlibrary(EcoData)\n# simple linear regression\nfit &lt;- lm(Root ~ Fruit, data = regrowth)\n\n# check summary for regression coefficient and p-value\nsummary(fit)\n## \n## Call:\n## lm(formula = Root ~ Fruit, data = regrowth)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.25105 -0.69970 -0.01755  0.66982  1.63933 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 4.184256   0.337987  12.380  6.6e-15 ***\n## Fruit       0.050444   0.005264   9.584  1.1e-11 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.8111 on 38 degrees of freedom\n## Multiple R-squared:  0.7073, Adjusted R-squared:  0.6996 \n## F-statistic: 91.84 on 1 and 38 DF,  p-value: 1.099e-11\n\n# plot root explained by fruit biomass\nplot(Root ~ Fruit, data = regrowth, \n     ylab = \"Root biomass in cubic meters\",\n     xlab = \"Fruit biomass in g\")\n\nabline(fit) # add regression line\nabline(v = 70, col = \"purple\") # add line at x value (here fruit biomass of 70g)\nabline(h = 4.184256 + 0.050444*70, col = \"brown\") # add line at y value according to x = 70 using the intercept and regression coefficient of x",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Simple linear regression"
    ]
  },
  {
    "objectID": "4A-Exercise.html#analyzing-the-birdabundance-dataset",
    "href": "4A-Exercise.html#analyzing-the-birdabundance-dataset",
    "title": "Exercise - Simple linear regression",
    "section": "Analyzing the “birdabundance” dataset",
    "text": "Analyzing the “birdabundance” dataset\nThe dataset provides bird abundances in forest fragments with different characteristics in Australia. We want to look at the relationship of the variables “abundance”, “distance” and “grazing”.\n\n\n\n\n\n\nQuestions\n\n\n\nFirst, answer the following questions?:\n\nWhat is the most reasonable research question regarding these variables?\n\n\n How is grazing influenced by distance / abundance? How is distance influenced by grazing / abundance? How is abundance influenced by distance / grazing?\n\n\nWhat is the response variable?\n\n\n abundance distance grazing\n\n\nWhat is the predictor variable?\n\n\n either grazing or distance either abundance or distance either abundance or grazing\n\nThen, perform the following tasks:\n\nFit a simple linear regression relating the response variable to the categorical predictor (that is the one with five levels, make sure that it is indeed a factor using as.factor())\nApply an ANOVA to your model.\n\nYou may need the following functions:\n\nlm()\nsummary()\nanova()\n\nUse your results to chose the correct statement(s):\nYou have now fitted a simple linear regression with a categorical predictor and analyzed it. Which of the following statements are correct? (several statements are correct)\n\n The maximum likelihood estimate of bird abundance for grazing intensity 1 is 28.623. We can see in the regression table that the difference between grazing intensity 3 and 4 is significant. The non-significant p-value for grazing intensity 2 indicates that the data are compatible with the null hypothesis “H0: the bird abundance at grazing intensity 2 is on average 0.” The confidence interval for the estimate of the intercept is the smallest. The difference between grazing intensity 1 and 3 is significant. Grazing intensity in general has a highly significant effect (&lt; 0.001) on bird abundance.\n\n\n\n\n\nClick here to see the solution\n\n### Solution\n\nThe maximum likelihood estimate of bird abundance for grazing intensity 1 is 28.623. CORRECT: When the predictor is a factor, the intercept equals the first factor level (by default, this follows an alphabetical order).\nWe can see in the regression table that the difference between grazing intensity 3 and 4 is significant. WRONG: Comparisons are always related to the intercept, i.e. to the first factor level. For comparisons among other factor levels we need post-hoc tests.\nThe non-significant p-value for grazing intensity 2 indicates that the data are compatible with the null hypothesis “H0: the bird abundance at grazing intensity 2 is on average 0.” WRONG: Comparisons are always related to the intercept, i.e. to the first factor level. Only the test for the intercept has H0: mean = 0.\n\nA reasonable research question is how abundance is influenced by distance and/or grazing. Here, the response variable is abundance, while the predictors are distance and/or grazing.\nThis is the code that you need to interpret the results.\n\n# change variable from integer to factor\nbirdabundance$GRAZE &lt;- as.factor(birdabundance$GRAZE) \nfit &lt;- lm(ABUND ~ GRAZE, data = birdabundance)\nsummary(fit)\n## \n## Call:\n## lm(formula = ABUND ~ GRAZE, data = birdabundance)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -18.3867  -4.1159   0.0269   5.1484  16.4133 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   28.623      2.086  13.723  &lt; 2e-16 ***\n## GRAZE2        -6.673      3.379  -1.975   0.0537 .  \n## GRAZE3        -7.336      2.850  -2.574   0.0130 *  \n## GRAZE4        -8.052      3.526  -2.284   0.0266 *  \n## GRAZE5       -22.331      2.950  -7.571 6.85e-10 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 7.52 on 51 degrees of freedom\n## Multiple R-squared:  0.5449, Adjusted R-squared:  0.5092 \n## F-statistic: 15.27 on 4 and 51 DF,  p-value: 2.846e-08\n\n# anova to check global effect of the factor grazing intensity\nanova(fit)\n## Analysis of Variance Table\n## \n## Response: ABUND\n##           Df Sum Sq Mean Sq F value    Pr(&gt;F)    \n## GRAZE      4 3453.7  863.42  15.267 2.846e-08 ***\n## Residuals 51 2884.2   56.55                      \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# boxplot\nplot(ABUND ~ GRAZE, data = birdabundance)",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Simple linear regression"
    ]
  },
  {
    "objectID": "4A-Exercise.html#model-validation-residual-checks",
    "href": "4A-Exercise.html#model-validation-residual-checks",
    "title": "Exercise - Simple linear regression",
    "section": "Model validation: Residual checks",
    "text": "Model validation: Residual checks\nNow, we will have a closer look at model diagnostics and residual checks in particular. Of course, we should have done this for all models above as well (we simply didn’t do this because of time restrictions). So remember that you always have to validate your model, if you want to be sure that your conclusions are correct.\nFor this exercise, you can prepare a dataset yourself called “dat” with the variables “x” and “y”. Simply copy the following code to generate the data:\n\nset.seed(234)\nx = rnorm(40, mean = 10, sd = 5)\ny = 10 - 2*x + 0.9 * x^2 + rnorm(40, mean=5, sd = 20)\ndat &lt;- data.frame(x, y)\nhead(dat)\n##           x          y\n## 1 13.303849 152.093910\n## 2 -0.264915   6.831275\n## 3  2.503970  45.207691\n## 4 17.356166 240.274237\n## 5 17.295693 240.917066\n## 6 10.700695 117.691234\n\nPerform the following tasks:\n\n\n\n\n\n\nWarning\n\n\n\n\nFit a simple linear regression.\nCheck the residuals.\nPerform another simple linear regression with a modified formula, if needed.\nCreate a scatter plot of the data and add a regression line for the first fit in black and one for the second fit in red. The second model cannot be plotted with the abline() function. Use the following code instead:\n\n\nlines(sort(x), predict(fit2, newdata = data.frame(x = sort(x))), col = \"red\")\n\nYou may also need the following functions:\n\nlm()\nsummary()\npar(mfrow = c(2, 2))\nplot()\nabline()\n\nUse your results to answer the following questions:\n\nWhat pattern do the residuals of the first regression model show when plotted against the fitted values?\nWhat do you have to do to improve your first regression model?\nIdentify the correct statement(s) about the residuals of the modified model.\n\n\n\n\n\nClick here to see the solution\n\n\nset.seed(234)\nx = rnorm(40, mean = 10, sd = 5)\ny = 10 - 2*x + 0.9 * x^2 + rnorm(40, mean=5, sd = 20)\ndat &lt;- data.frame(x, y)\n\n# simple linear regression\nfit &lt;- lm(y ~ x, dat)\n\n# check residuals\nop = par(mfrow=c(2,2))\nplot(fit) # residuals show a parabolic relationship (see first plot)  -&gt; to improve, fit a quadratic relationship\n\n\n\n\n\n\n\npar(op)\n\n# scatter plot\nplot(y ~ x, data = dat)\nabline(fit)\n\n\n\n\n\n\n\n\nsummary(fit) # significantly positively correlated, but this doesn't tell the full story because the residuals are not okay\n## \n## Call:\n## lm(formula = y ~ x, data = dat)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -39.884 -22.208  -4.948  10.602 118.164 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   -8.459     10.973  -0.771    0.446    \n## x             11.465      1.019  11.248 1.18e-13 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 32.11 on 38 degrees of freedom\n## Multiple R-squared:  0.769,  Adjusted R-squared:  0.763 \n## F-statistic: 126.5 on 1 and 38 DF,  p-value: 1.176e-13\n\n# improved regression model\nfit2 = lm(y ~ x + I(x^2), dat)\n\n# check residuals\nop = par(mfrow=c(2,2))\nplot(fit2) # no pattern in residuals anymore (first plot) -&gt; fit is fine\n\n\n\n\n\n\n\npar(op)\n\n# scatter plot\nplot(y ~ x, data = dat)\nabline(fit)\nlines(sort(x), predict(fit2, newdata = data.frame(x = sort(x))), col = \"red\")\n\n\n\n\n\n\n\n\n\nsummary(fit2) # significantly negatively correlated, trustworthy now, because residuals are sufficiently uniformly distributed (first plot in plot(fit2))\n## \n## Call:\n## lm(formula = y ~ x + I(x^2), data = dat)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -33.174 -11.444   0.938  10.164  40.666 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 17.87505    6.00812   2.975  0.00513 ** \n## x           -1.10100    1.27706  -0.862  0.39417    \n## I(x^2)       0.80752    0.07526  10.730 6.49e-13 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 16.05 on 37 degrees of freedom\n## Multiple R-squared:  0.9438, Adjusted R-squared:  0.9408 \n## F-statistic: 310.9 on 2 and 37 DF,  p-value: &lt; 2.2e-16",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Simple linear regression"
    ]
  },
  {
    "objectID": "4B-Exercise.html",
    "href": "4B-Exercise.html",
    "title": "Exercise - Multiple Linear Regression",
    "section": "",
    "text": "Useful functions\nfor multiple linear regression\nlm() - fit linear model\nsummary(fit) - apply to fitted model object to display regression table\nplot(fit) - plot residuals for model validation\nanova(fit) - apply type I ANOVA (variables included sequentially) to model to test for effects all levels of a factor\nAnova(fit) - car package; use type II ANOVA (effects for predictors when all other predictors are already included) for overall effects\nscale() - scale variable\nsqrt() - square-root\nlog() - calculates natural logarithm\nplot(allEffects(fit)) - apply to fitted model object to plot marginal effect; effects package\npar() - change graphical parameters\nuse oldpar \\&lt;- par(mfrow = c(number_rows, number_cols)) to change figure layout including more than 1 plot per figure\nuse par(oldpar) to reset graphic parameter\nfor model selection\nstepAIC(fullModel) - perform stepwise AIC model selection; apply to full model object, MASS package\ndredge(fullModel) - perform global model selection, MuMIn package\nmodel.avg() - perform model averaging\nAIC(fit) - get AIC for a fitted model\nanova(fit1, fit2) - compare two fitted models via Likelihood Ratio Test (LRT)",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Multiple Linear Regression"
    ]
  },
  {
    "objectID": "4B-Exercise.html#analyzing-the-mtcars-dataset",
    "href": "4B-Exercise.html#analyzing-the-mtcars-dataset",
    "title": "Exercise - Multiple Linear Regression",
    "section": "Analyzing the mtcars dataset",
    "text": "Analyzing the mtcars dataset\nImagine a start up company wants to rebuild a car with a nice retro look from the 70ies. The car should be modern though, meaning the fuel consumption should be as low as possible. They’ve discovered the mtcars dataset with all the necessary measurements and they’ve somehow heard about you and your R skills and asked you for help. And of course you promised to help, kind as you are.\nThe company wants you to find out which of the following characteristics affects the fuel consumption measured in miles per gallon (mpg). Lower values for mpg thus reflect a higher fuel consumption. The company wants you to include the following variables into your analysis:\n\nnumber of cylinders (cyl)\nweight (wt)\nhorsepower (hp)\nwhether the car is driven manually or with automatic (am)\n\nIn addition, Pawl, one of the founders of the company suggested that the effect of weight (wt) might be irrelevant for powerful cars (high hp values). You are thus asked to test for this interaction in your analysis as well.\n\n\n\n\n\n\nQuestion\n\n\n\nCarry out the following tasks:\n\nPerform a multiple linear regression (change class for cyl and am to factor)\nCheck the model residuals\nInterpret and plot all effects\n\nYou may need the following functions:\n\nas.factor()\nlm()\nsummary()\nanova()\nplot()\nallEffects()\n\nUse your results to answer the questions:\nWhich of the following statements are correct? (Several are correct).\n\n Cars with 6 cylinders do not differ significantly in their fuel consumption as compared to cars with 4 cylinders. Stronger cars (hp) use less fuel (mpg). Overall, heavier cars (wt) use significantly more fuel (their range is smaller; mpg)\n\nConcerning the interaction between weight (wt) and horsepower (hp), which of the following statements is correct?\n\n Pawl was wrong. There is a significant interaction between weight and horsepower, but the direction is opposite to what Pawl thought: The effect of weight is stronger for stronger cars. Pawl was wrong, the effect of weight is independent of horsepower. Pawl was right. The effect of weight is strong for weaker cars, but becomes indeed irrelevant for stronger cars.\n\n\n\n\n\nClick here to see the solution\n\nThis is the code that you need to interpret the results.\n\n# change am and cyl from numeric to factor\nmtcars$am &lt;- as.factor(mtcars$am)\nmtcars$cyl &lt;- as.factor(mtcars$cyl)\n\n# multiple linear regression and results:\n# (we need to scale (standardize) the predictors wt and hp, since we include their interaction)\ncarsfit &lt;- lm(mpg ~ am + cyl + scale(wt) * scale(hp), dat = mtcars)\n# weight is included as the first predictor in order to have\n# it as the grouping factor in the allEffects plot\n\nsummary(carsfit)\n## \n## Call:\n## lm(formula = mpg ~ am + cyl + scale(wt) * scale(hp), data = mtcars)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -3.4121 -1.6789 -0.4446  1.3752  4.4338 \n## \n## Coefficients:\n##                     Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)          19.9064     1.5362  12.958 1.36e-12 ***\n## am1                   0.1898     1.4909   0.127 0.899740    \n## cyl6                 -1.2818     1.5291  -0.838 0.409813    \n## cyl8                 -1.3942     2.1563  -0.647 0.523803    \n## scale(wt)            -3.6248     0.9665  -3.750 0.000938 ***\n## scale(hp)            -1.8602     0.8881  -2.095 0.046503 *  \n## scale(wt):scale(hp)   1.5631     0.7027   2.224 0.035383 *  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 2.246 on 25 degrees of freedom\n## Multiple R-squared:  0.888,  Adjusted R-squared:  0.8612 \n## F-statistic: 33.05 on 6 and 25 DF,  p-value: 1.021e-10\n# The first level of each factor is used as a reference, i.e. in this case a manual gear shift with 4 gears.\n# From the coefficient cyl6 we see that there is no significant difference in fuel consumption (= our response) between 4 gears (the reference) and 6 gears.\n# In contrast, the predictors weight (wt) and horsepower (hp) have a significant negative effect on the range (mpg), so that they both increase fuel consumption.\n\n# check residuals\nold.par = par(mfrow = c(2, 2))\nplot(carsfit)\n\n\n\n\n\n\n\npar(old.par)\n\n# plot effects\nplot(allEffects(carsfit))\n## Warning in Analyze.model(focal.predictors, mod, xlevels, default.levels, : the\n## predictors scale(wt), scale(hp) are one-column matrices that were converted to\n## vectors\n## Warning in Analyze.model(focal.predictors, mod, xlevels, default.levels, : the\n## predictors scale(wt), scale(hp) are one-column matrices that were converted to\n## vectors\n## Warning in Analyze.model(focal.predictors, mod, xlevels, default.levels, : the\n## predictors scale(wt), scale(hp) are one-column matrices that were converted to\n## vectors\n\n\n\n\n\n\n\n# We can see in the wt*hp plot, that for high values of hp wt has no effect on the response mpg. We conclude that Pawl was right.\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\n\nWhat is the meaning of “An effect is not significant”?\nIs an effect with three *** more significant / certain than an effect with one *?\n\n\n\n\n\nClick here to see the solution\n\n\nYou should NOT say that the effect is zero, or that the null hypothesis has been accepted. Official language is “there is no significant evidence for an effect(p = XXX)”. If we would like to assess what that means, some people do a post-hoc power analysis (which effect size could have been estimated), but better is typically just to discuss the confidence interval, i.e. look at the confidence interval and say: if there is an effect, we are relatively certain that it is smaller than X, given the confidence interval of XYZ.\nMany people view it that way, and some even write “highly significant” for *** . It is probably true that we should have a slightly higher confidence in a very small p-value, but strictly speaking, however, there is only significant, or not significant. Interpreting the p-value as a measure of certainty is a slight misinterpretation. Again, if we want to say how certain we are about the effect, it is better to look again at the confidence interval, i.e. the standard error and use this to discuss the precision of the estimate (small confidence interval / standard error = high precision / certainty).",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Multiple Linear Regression"
    ]
  },
  {
    "objectID": "4B-Exercise.html#interactions-with-the-plantheight-dataset",
    "href": "4B-Exercise.html#interactions-with-the-plantheight-dataset",
    "title": "Exercise - Multiple Linear Regression",
    "section": "Interactions with the plantHeight dataset",
    "text": "Interactions with the plantHeight dataset\n\n\n\n\n\n\nPlant Height revisited\n\n\n\nRevisit exercise our previous analysis of EcoData::plantHeight\n\nlibrary(EcoData)\nmodel = lm(loght ~ temp, data = plantHeight)\n\nUse (separate) multiple regressions to test if:\n\nIf temp or NPP (net primary productivity) is a more important predictor (importance == absolute effect size).\nIf growth forms (variable growthform) differ in their temperature effects. (use an interaction)\nIf the effect of temp remains significant if we include latitude and an interaction of latitude with temp. If not, why? Tip: plot temp ~ lat.\n\n\n\n\n\nClick here to see the solution\n\n\nplantHeight$sTemp = scale(plantHeight$temp)\nplantHeight$sLat = scale(plantHeight$lat)\nplantHeight$sNPP = scale(plantHeight$NPP)\n\n# relevel \nplantHeight$growthform2 = relevel(as.factor(plantHeight$growthform), \"Herb\")\n\n\nNPP or Temp?\n\n\nfit = lm(loght ~ sTemp + sNPP, data = plantHeight)\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp + sNPP, data = plantHeight)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.69726 -0.47935  0.04285  0.39812  1.77919 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  0.44692    0.05119   8.731 2.36e-15 ***\n## sTemp        0.20846    0.07170   2.907 0.004134 ** \n## sNPP         0.24734    0.07164   3.452 0.000702 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6711 on 169 degrees of freedom\n##   (6 observations deleted due to missingness)\n## Multiple R-squared:  0.2839, Adjusted R-squared:  0.2754 \n## F-statistic:  33.5 on 2 and 169 DF,  p-value: 5.553e-13\n\nNPP is slightly more important\n\nInteraction with growth form\n\n\nfit = lm(loght ~ growthform2 *  sTemp , data = plantHeight)\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ growthform2 * sTemp, data = plantHeight)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.19634 -0.21217 -0.00997  0.22750  1.62398 \n## \n## Coefficients: (2 not defined because of singularities)\n##                              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)                 -0.310748   0.062150  -5.000 1.51e-06 ***\n## growthform2Fern              0.624160   0.375650   1.662 0.098586 .  \n## growthform2Herb/Shrub        0.456394   0.377088   1.210 0.227967    \n## growthform2Shrub             0.562799   0.083100   6.773 2.36e-10 ***\n## growthform2Shrub/Tree        0.957088   0.486858   1.966 0.051069 .  \n## growthform2Tree              1.586005   0.080756  19.640  &lt; 2e-16 ***\n## sTemp                        0.203808   0.053231   3.829 0.000185 ***\n## growthform2Fern:sTemp              NA         NA      NA       NA    \n## growthform2Herb/Shrub:sTemp        NA         NA      NA       NA    \n## growthform2Shrub:sTemp       0.103357   0.076860   1.345 0.180636    \n## growthform2Shrub/Tree:sTemp -0.004614   0.526866  -0.009 0.993024    \n## growthform2Tree:sTemp       -0.244410   0.077661  -3.147 0.001971 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.3713 on 158 degrees of freedom\n##   (10 observations deleted due to missingness)\n## Multiple R-squared:  0.796,  Adjusted R-squared:  0.7844 \n## F-statistic: 68.51 on 9 and 158 DF,  p-value: &lt; 2.2e-16\n\nYes, because (some) interactions are significant.\nNote that the n.s. effect of sTemp is the first growth form (Ferns), for which we had only one observation. In a standard multiple regression, you don’t have p-values for the significance of the temperature effect against 0 for the other growth forms, because you test against the reference. What one usually does is to run an ANOVA (see chapter on ANOVA) to see if temp is overall significant.\n\nanova(lm(loght ~ growthform *  sTemp , data = plantHeight))\n## Analysis of Variance Table\n## \n## Response: loght\n##                   Df Sum Sq Mean Sq  F value    Pr(&gt;F)    \n## growthform         5 78.654 15.7309 114.1241 &lt; 2.2e-16 ***\n## sTemp              1  3.543  3.5426  25.7006 1.104e-06 ***\n## growthform:sTemp   3  2.800  0.9333   6.7707 0.0002524 ***\n## Residuals        158 21.779  0.1378                       \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nAlternatively, if you want to test if a specific growth form has a significant temperature effect, you could either extract the p-value from a multiple regression (a bit complicated) or just run a univariate regression for this growth form\n\nfit = lm(loght ~ sTemp + 0, data = plantHeight[plantHeight$growthform == \"Tree\",])\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp + 0, data = plantHeight[plantHeight$growthform == \n##     \"Tree\", ])\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## 0.2636 0.7198 0.9672 1.3503 2.3914 \n## \n## Coefficients:\n##       Estimate Std. Error t value Pr(&gt;|t|)   \n## sTemp   0.5013     0.1699    2.95  0.00452 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.21 on 60 degrees of freedom\n##   (10 observations deleted due to missingness)\n## Multiple R-squared:  0.1267, Adjusted R-squared:  0.1121 \n## F-statistic: 8.704 on 1 and 60 DF,  p-value: 0.004522\n\nOr you could fit the interaction but turn-off the intercept (by saying +0 or -1) and remove the plantHeight intercepts:\n\nfit = lm(loght ~ sTemp:growthform + 0, data = plantHeight[,])\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp:growthform + 0, data = plantHeight[, \n##     ])\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.5156 -0.1396  0.3488  0.8103  2.3914 \n## \n## Coefficients:\n##                            Estimate Std. Error t value Pr(&gt;|t|)    \n## sTemp:growthformFern        -0.8949     2.9233  -0.306 0.759911    \n## sTemp:growthformHerb         0.3195     0.1077   2.967 0.003460 ** \n## sTemp:growthformHerb/Shrub   1.1788     5.5825   0.211 0.833026    \n## sTemp:growthformShrub        0.2375     0.1197   1.984 0.048974 *  \n## sTemp:growthformShrub/Tree   0.8833     0.2613   3.380 0.000908 ***\n## sTemp:growthformTree         0.5013     0.1171   4.281 3.17e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.8339 on 162 degrees of freedom\n##   (10 observations deleted due to missingness)\n## Multiple R-squared:  0.2083, Adjusted R-squared:  0.179 \n## F-statistic: 7.106 on 6 and 162 DF,  p-value: 9.796e-07\n\n\nInteraction with lat\n\n\nfit = lm(loght ~ sTemp * sLat, data = plantHeight)\nsummary(fit)\n## \n## Call:\n## lm(formula = loght ~ sTemp * sLat, data = plantHeight)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.97905 -0.45112  0.01062  0.42852  1.74054 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  0.46939    0.06771   6.932 7.78e-11 ***\n## sTemp        0.26120    0.14200   1.839   0.0676 .  \n## sLat        -0.13072    0.13616  -0.960   0.3383    \n## sTemp:sLat   0.01209    0.04782   0.253   0.8007    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6869 on 174 degrees of freedom\n## Multiple R-squared:  0.2504, Adjusted R-squared:  0.2375 \n## F-statistic: 19.37 on 3 and 174 DF,  p-value: 6.95e-11\n\nAll is n.s. … how did this happen? If we check the correlation between temp and lat, we see that the two predictors are highly collinear.\n\ncor(plantHeight$temp, plantHeight$lat)\n## [1] -0.9249304\n\nIn principle, the regression model should be able to still separate them, but the higher the collinearity, the more difficult it becomes for the regression to infer if the effect is caused by one or the other predictor.",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Multiple Linear Regression"
    ]
  },
  {
    "objectID": "4B-Exercise.html#model-selection-with-the-cement-dataset",
    "href": "4B-Exercise.html#model-selection-with-the-cement-dataset",
    "title": "Exercise - Multiple Linear Regression",
    "section": "Model-selection with the Cement dataset",
    "text": "Model-selection with the Cement dataset\nThe process of cement hardening involves exogenous chemical reactions and thus produces heat. The amount of heat produced by the cement depends on the mixture of its constituents. The Cement dataset includes heat measurements for different types of cement that consist of different relative amounts of calcium aluminate (X1), tricalcium silicate (X2), tetracalcium alumino ferrite (X3) and dicalcium silicate (X4). A cement producing company wants to optimize the composition of its product and wants to know, which of these compounds are mainly responsible for heat production.\n\n\n\n\n\n\nNote\n\n\n\nWe only do a model selection here for educational reasons. For your analysis, and if your goal is not a predictive model, think about the model structure before you do the analysis and then stick to it! See here the section about p-hacking (and also consider that AIC selection will/can remove confounders which will violate causality and can lead to spurious correlations!\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nCarry out the following tasks:\n\nPerform a multiple linear regression including all predictor variables and all two-way interactions (remember the notation (var1 + var2 + var3)^2.\nPerform forward, backward, and global model selection and compare the results\nFit the model considered optimal by global model selection and compare it with the full model based on AIC (or AICc) and LRT.\n\nYou may need the following functions:\n\nlm()\nsummary()\nstepAIC() from the MuMIn package (library(MuMIn))\noptions()\ndredge()\nAIC() or AICc() (for small datasets)\nanova()\n\nUse your results to answer the following questions:\n1. You tested 3 different model selection methods: forward stepwise AIC selection, backward stepwise AIC selection and global model selection. How many terms ( = intercept + predictor effects + interactions) did each of the reduced models include?\n\nForward selection \nBackward selection \nglobal model selection \n\n2. You compared the full model with the reduced model from global model selection based on AIC and LRT (using the anova() function). Which of the two models would you choose based on their AIC? And which would you choose based on the LRT?\n\nAIC The full modelI don’t know. Both models fit equally well.Also the full modelThe reduced model\nLRT The full modelI don’t know. Both models fit equally well.Also the full modelThe reduced model\n\n3. Here’s a quote from Wikipedia on the AIC: “When the sample size is small, there is a substantial probability that AIC will select models that have too many parameters, i.e. that AIC will overfit.” Check the sample size of the Cement dataset. How do you now interpret the AIC values for the full model as compared to the reduced model from global model selection? (Several are correct)\n\n The AIC for the full model is smaller. The full model thus fits better. I would not trust AIC model selection in this case, because the sample size is too small to fit the number of parameters necessary for the full model. Instead of using the AIC for model comparison, I would now prefer the AICc, which corrects for small sample sizes.\n\n\n\n\n\nClick here to see the solution\n\nThis is the code that you need to obtain the results.\n\nlibrary(MuMIn)\nlibrary(MASS)\n\n# full model -&gt;  has 11 coefficients\nfull = lm(y ~ (X1 + X2 + X3 + X4)^2, data = Cement)\nsummary(full)\n\n# forward model selection\nms_forw = stepAIC(full, direction = \"forward\")\nsummary(ms_forw)\n# lists 11 coefficients (i.e. selects full model)\n\n# backward model selection\nms_back = stepAIC(full, direction = \"backward\")\nsummary(ms_back)\n# lists 10 coefficients\n\n# global model selection\noptions(na.action = \"na.fail\")\ndd = dredge(full)\nhead(dd)\n# The first row lists the best performing model: it includes only the intercept and effects for X1 and X2 (= 3 coefficients).\n\n# Fit the model considered optimal by global model selection and compare it with the full model based on AIC (or AICc) and LRT:\nopt = lm(y ~ X1 + X2, data = Cement)\nsummary(opt)\n\nAIC(opt,full) # full model is better according to AIC (lower AIC)\nanova(opt, full) # -&gt; LRT: no significant difference between the models\n\n# sample size in the Cement dataset:\nstr(Cement)  # or\nnrow(Cement)\n\n# If the sample size is low, a corrected version of the AIC is recommended to avoid overfitting:\nAICc(opt,full) # This is inf! -&gt; optimal model is better according to AICc",
    "crumbs": [
      "Regression Analysis",
      "Exercise - Multiple Linear Regression"
    ]
  },
  {
    "objectID": "4C-Exercise.html",
    "href": "4C-Exercise.html",
    "title": "Exercise - GLM",
    "section": "",
    "text": "Analyzing the nitrofen dataset\nThe Ministry of Agriculture has appointed your university to investigate the toxicity of the herbicide nitrofen on the fertility of the waterflea species Ceriodaphnia dubia in order to asses the implications of the herbicide for ecosystems.\nIn an experiment conducted by your fellow researchers, the offspring of the waterflea species Ceriodaphnia dubia were counted as a function of different concentrations of the herbicide. Your job is to do the analysis.",
    "crumbs": [
      "Regression Analysis",
      "Exercise - GLM"
    ]
  },
  {
    "objectID": "4C-Exercise.html#analyzing-the-nitrofen-dataset",
    "href": "4C-Exercise.html#analyzing-the-nitrofen-dataset",
    "title": "Exercise - GLM",
    "section": "",
    "text": "Question\n\n\n\nCarry out the following tasks:\n\nConvert the variable conc into a factor.\nFit a suitable model for the relationship between total amount of offspring (total) and nitrofen concentration (conc).\nTest for overdispersion.\nInterpret and plot the effect.\nTest for the overall effect of nitrofen concentration.\n\nYou may need the following functions:\n\nstr()\nas.factor()\nglm()\nsummary()\ntestDispersion()\nplot()\nallEffects()\nanova(..., test = \"Chisq\")\n\nUse your results to answer the following questions:\n1.You analyzed the response of Ceriodaphnia dubia to different concentrations of the herbicide nitrofen. Looking at your results, which of the following statements is correct? (Several anwers are correct)\n\n The MLE for the mean number of offspring at a nitrofen concentration of 0 is 31.4 (Don't forget to apply the (inverse) link function to the estimate). At a nitrofen concentration of 160, Ceriodaphnia dubia produced significantly less offspring than in the control treatment (conc = 0). At a nitrofen concentration of 235, Ceriodaphnia dubia produced significantly less offspring than in the control treatment (conc = 0). The residuals show significantly less variance than would be expected from a Poisson distribution (underdispersion).\n\n2. How do you test for the overall significance of concentration on the total amount of offspring? Perform the respective test to check whether the variable conc as a whole has an effect on the total amount of offspring. How many asteriks are displayed for significance?\n\n none = not significant * = p &lt; 0.05 ** = p &lt; 0.01 *** = p &lt; 0.001\n\n\n\n\n\nClick here to see the solution\n\n\n# prepare data\nnitrofen$conc &lt;- as.factor(nitrofen$conc) # change variable conc to a factor\n\n# plot the relation that we want to fit\nplot(total ~ conc, nitrofen)\n\n\n\n\n\n\n\n\n# Fit a suitable model for the relationship between total amount of offspring (total) and nitrofen concentration (conc):\nfit &lt;- glm(total ~ conc, family = \"poisson\", data=nitrofen)\nsummary(fit)\n## \n## Call:\n## glm(formula = total ~ conc, family = \"poisson\", data = nitrofen)\n## \n## Coefficients:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)  3.44681    0.05643  61.078  &lt; 2e-16 ***\n## conc80       0.00318    0.07974   0.040    0.968    \n## conc160     -0.10395    0.08196  -1.268    0.205    \n## conc235     -0.60190    0.09486  -6.345 2.22e-10 ***\n## conc310     -1.65505    0.14089 -11.747  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for poisson family taken to be 1)\n## \n##     Null deviance: 312.484  on 49  degrees of freedom\n## Residual deviance:  50.719  on 45  degrees of freedom\n## AIC: 297.81\n## \n## Number of Fisher Scoring iterations: 5\n\n# test for overdispersion\ntestDispersion(fit)\n\n\n\n\n\n\n\n## \n##  DHARMa nonparametric dispersion test via sd of residuals fitted vs.\n##  simulated\n## \n## data:  simulationOutput\n## dispersion = 0.62249, p-value = 0.048\n## alternative hypothesis: two.sided\n\n# plot effect\nplot(allEffects(fit))\n\n\n\n\n\n\n\n\n# log link to calculate predicted values at the response scale:\n# predicted response = exp(Intercept + Estimate * predictor)\nexp(3.44681) # or\n## [1] 31.40007\nexp(coef(fit)[1])\n## (Intercept) \n##        31.4\n\n# Test for the overall effect of *conc* on the total number of offspring\nanova(fit, test = \"Chisq\")\n## Analysis of Deviance Table\n## \n## Model: poisson, link: log\n## \n## Response: total\n## \n## Terms added sequentially (first to last)\n## \n## \n##      Df Deviance Resid. Df Resid. Dev  Pr(&gt;Chi)    \n## NULL                    49    312.484              \n## conc  4   261.76        45     50.719 &lt; 2.2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1",
    "crumbs": [
      "Regression Analysis",
      "Exercise - GLM"
    ]
  },
  {
    "objectID": "4C-Exercise.html#analyzing-the-melanoma-dataset",
    "href": "4C-Exercise.html#analyzing-the-melanoma-dataset",
    "title": "Exercise - GLM",
    "section": "Analyzing the melanoma dataset",
    "text": "Analyzing the melanoma dataset\nIn the following, you will investigate the melanoma dataset provided by the University Hospital of Odense, Denmark. The data are of patients with malignant melanomas. You can find a more detailed description in the help of melanoma. The question you want to investigate is whether the occurrence of ulceration (ulcer, yes = 1, no = 0) is related to the thickness of the tumor (thickness in mm) and the sex of the patient (sex, male = 1, female = 0) and the interaction of the two.\n\n\n\n\n\n\nQuestion\n\n\n\nCarry out the following tasks:\n\nFit an appropriate model to answer the research question.\nCheck the model residuals.\nInterpret and plot all effects including an analysis of the deviance.\n\nYou may need the following functions:\n\nstr()\nglm()\nsummary()\nanova()\nsimulateResiduals()\nplot()\nallEffects()\n\nUse your results to answer the following questions:\n1. Let’s move to the melanoma dataset: Assuming you chose the correct distribution, which type of regression did you use for the analysis?\n\n Linear regression Logistic regression Poisson regression\n\n3. You have checked the residuals of your model. Which of the following patterns and conclusions apply? (Several answers are correct)\n\n There remains a significant pattern between the residuals and the fitted values. An additional quadratic term for thickness could help to improve the model. The residuals deviate from the expected distribution. The model is overdispersed. The model assumptions are not met yet, and I don't trust this model without further improvements.\n\n\n\n\n\nClick here to see the solution\n\n\nThere remains a significant pattern between the residuals and the fitted values. –&gt; You can see this in the right part of the DHARMa residual plot.\nAn additional quadratic term for thickness could help to improve the model. –&gt; Try it out!\nThe residuals deviate from the expected distribution. –&gt; You can see this in the left part of the DHARMa residual plot.\nThe model is overdispersed. –&gt; Only poisson or binomial k/n models can be overdispersed!\n\n\n# get the data\ndat &lt;- melanoma\n\n# Fit an appropriate model to answer the research question.\ndat$sex &lt;- as.factor(dat$sex) # change variable sex to factor (this is optional, not necessary with binary values 0/1)\nfit &lt;- glm(ulcer ~ thickness * sex, family = \"binomial\", data=dat)\n\n# Check residuals\nres &lt;- simulateResiduals(fit, n = 500)\nplot(res)\n\n\n\n\n\n\n\n\n# model interpretation\nsummary(fit)\n## \n## Call:\n## glm(formula = ulcer ~ thickness * sex, family = \"binomial\", data = dat)\n## \n## Coefficients:\n##                Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)    -1.40642    0.31902  -4.409 1.04e-05 ***\n## thickness       0.36927    0.11368   3.248  0.00116 ** \n## sex1           -0.02579    0.55535  -0.046  0.96296    \n## thickness:sex1  0.14527    0.17656   0.823  0.41064    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 281.13  on 204  degrees of freedom\n## Residual deviance: 234.04  on 201  degrees of freedom\n## AIC: 242.04\n## \n## Number of Fisher Scoring iterations: 5\nanova(fit, test = \"Chisq\")\n## Analysis of Deviance Table\n## \n## Model: binomial, link: logit\n## \n## Response: ulcer\n## \n## Terms added sequentially (first to last)\n## \n## \n##               Df Deviance Resid. Df Resid. Dev  Pr(&gt;Chi)    \n## NULL                            204     281.13              \n## thickness      1   45.374       203     235.76 1.628e-11 ***\n## sex            1    1.039       202     234.72    0.3080    \n## thickness:sex  1    0.681       201     234.04    0.4094    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# Calculate Pseudo R2: 1 - Residual deviance / Null deviance\n1 - 234.04/281.13 # Pseudo R2 of model\n## [1] 0.1675026\n\n# plot effects\nplot(allEffects(fit))\n\n\n\n\n\n\n\n\nAs the residuals look quite suspicious and all quantile regressions significantly deviate, we can try to improve the model with a quadratic term for thickness.\n\nfit &lt;- glm(ulcer ~ thickness * sex + I(thickness^2), family = \"binomial\", data=dat)\nsummary(fit)\n## \n## Call:\n## glm(formula = ulcer ~ thickness * sex + I(thickness^2), family = \"binomial\", \n##     data = dat)\n## \n## Coefficients:\n##                 Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)    -2.466019   0.411511  -5.993 2.07e-09 ***\n## thickness       1.066836   0.193715   5.507 3.65e-08 ***\n## sex1            0.236510   0.518545   0.456    0.648    \n## I(thickness^2) -0.057746   0.012766  -4.523 6.09e-06 ***\n## thickness:sex1 -0.009476   0.133618  -0.071    0.943    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 281.13  on 204  degrees of freedom\n## Residual deviance: 214.05  on 200  degrees of freedom\n## AIC: 224.05\n## \n## Number of Fisher Scoring iterations: 4\nres &lt;- simulateResiduals(fit)\nplot(res)\n\n\n\n\n\n\n\n\n# plot effects\nplot(allEffects(fit))\n\n\n\n\n\n\n\n\nThe quadratic term solves the problem of the residuals. The effects plots look quite different. There seems to be a maximum of ulcer around a thickness of 10 that we would have missed without the quadratic term.",
    "crumbs": [
      "Regression Analysis",
      "Exercise - GLM"
    ]
  },
  {
    "objectID": "4C-Exercise.html#analyzing-elk-data",
    "href": "4C-Exercise.html#analyzing-elk-data",
    "title": "Exercise - GLM",
    "section": "Analyzing Elk data",
    "text": "Analyzing Elk data\nDownload the elk_data from GRIPS and import the file using the load( ) function.\n\n\nRData is a R specific data type. You can save any R object by running save(object, file \"filename.RData\")\n\n\n\n\n\n\nExample - Elk Data\n\n\n\nYou will be given a data set of habitat use of Elks in Canada. Measured is the presence of Elks (0/1), and a number of other predictors. Description of variables:\n\ndist_roads - distance of the location to the next road\nNDVI - normalized difference vegetation index, essentially greeness of vegetation on the site\nruggedness of the terrain\ndem - digital eleveation model = elevation above sea level\npresence - presence of the elk\nhabitat - open or forest\n\nPerform either:\n\nA predictive analysis, i.e. a model to predict where Elks can be found.\nA causal analysis, trying to understand the effect of roads on Elk presence.\n\nHints:\n\nHypothesis: presence ~ dist_roads\nWhat are potential confounders? How can you see if a variable is a confounder?\n\n\n\n\n\nClick here to see the solution\n\nA. Predictive analysis\n\nload(file = \"elk_data.RData\")\n\nlibrary(MASS)\nfit &lt;- glm(presence ~ dist_roads  + dem + ruggedness, data = elk_data, family = \"binomial\")\npredictive_model = MASS::stepAIC(fit, direction = \"both\")\n## Start:  AIC=5109.03\n## presence ~ dist_roads + dem + ruggedness\n## \n##              Df Deviance    AIC\n## - dist_roads  1   5101.9 5107.9\n## &lt;none&gt;            5101.0 5109.0\n## - ruggedness  1   5171.4 5177.4\n## - dem         1   5241.3 5247.3\n## \n## Step:  AIC=5107.94\n## presence ~ dem + ruggedness\n## \n##              Df Deviance    AIC\n## &lt;none&gt;            5101.9 5107.9\n## + dist_roads  1   5101.0 5109.0\n## - ruggedness  1   5172.0 5176.0\n## - dem         1   5324.8 5328.8\nsummary(predictive_model)\n## \n## Call:\n## glm(formula = presence ~ dem + ruggedness, family = \"binomial\", \n##     data = elk_data)\n## \n## Coefficients:\n##               Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -6.7890658  0.4917287 -13.807   &lt;2e-16 ***\n## dem          0.0042951  0.0002994  14.343   &lt;2e-16 ***\n## ruggedness  -0.0289100  0.0035076  -8.242   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 5334.5  on 3847  degrees of freedom\n## Residual deviance: 5101.9  on 3845  degrees of freedom\n## AIC: 5107.9\n## \n## Number of Fisher Scoring iterations: 4\n\nB. Causal analysis\nThe predictive model has actually dropped the variable of interest (distance to roads) which shows the risks of tools that select for the best predictive model such as AIC selection: Collinear variables that we need to adjust our effects, are often dropped.\nFor the causal model, we really need to think about the causal relationships between the variables:\nWe are interested in the effect of dist_roads on presence:\n\nsummary(glm(presence ~ dist_roads, data = elk_data, family = \"binomial\"))\n## \n## Call:\n## glm(formula = presence ~ dist_roads, family = \"binomial\", data = elk_data)\n## \n## Coefficients:\n##               Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -4.101e-01  6.026e-02  -6.806  1.0e-11 ***\n## dist_roads   3.204e-04  3.977e-05   8.056  7.9e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 5334.5  on 3847  degrees of freedom\n## Residual deviance: 5268.1  on 3846  degrees of freedom\n## AIC: 5272.1\n## \n## Number of Fisher Scoring iterations: 4\n\nPositive effect of dist_roads on elk, or in other words, more elks closer to the roads? Does that make sense? No, we expect a negative effect!\nAltitude (dem) and the ruggedness probably affect both variables, presence and dist_roads, and thus they should be considered as confounders:\n\nfit = glm(presence ~ dist_roads+ dem + ruggedness, data = elk_data, family = \"binomial\")\n\nThe effect of dist_roads is now negative!\nLet’s check the residuals:\n\nlibrary(DHARMa)\nres &lt;- simulateResiduals(fit, plot = TRUE)\n\n\n\n\n\n\n\nplot(res, quantreg = TRUE)\n\n\n\n\n\n\n\nplotResiduals(res, form = elk_data$dem, quantreg = TRUE)\n\n\n\n\n\n\n\nplotResiduals(res, form = elk_data$ruggedness, quantreg = TRUE)\n\n\n\n\n\n\n\n\nThe functional forms of our confounders are not perfect.\nSince we are not really interested in them, a cool trick is to use a GAM (generalized addictive model) which automatically adjusts the functional for of the fitted curve to flexibly take care of the confounders. Our main predictor dist_roads is still modelled as a linear effect.\n\nlibrary(mgcv)\n## Carregando pacotes exigidos: nlme\n## This is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'.\nfit2 &lt;- gam(presence ~ dist_roads + s(dem) + s(ruggedness), data = elk_data, family = \"binomial\")\nsummary(fit2)\n## \n## Family: binomial \n## Link function: logit \n## \n## Formula:\n## presence ~ dist_roads + s(dem) + s(ruggedness)\n## \n## Parametric coefficients:\n##               Estimate Std. Error z value Pr(&gt;|z|)   \n## (Intercept)  1.783e-01  8.229e-02   2.167  0.03025 * \n## dist_roads  -1.798e-04  5.771e-05  -3.115  0.00184 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Approximate significance of smooth terms:\n##                 edf Ref.df Chi.sq p-value    \n## s(dem)        8.283  8.845  220.3  &lt;2e-16 ***\n## s(ruggedness) 8.510  8.918  128.3  &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## R-sq.(adj) =  0.114   Deviance explained = 9.27%\n## UBRE = 0.26754  Scale est. = 1         n = 3848\nplot(fit2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s take another look at the residual plots, in particular for the confounders.\n\nres &lt;- simulateResiduals(fit2, plot = TRUE)\n## Registered S3 method overwritten by 'GGally':\n##   method from   \n##   +.gg   ggplot2\n## Registered S3 method overwritten by 'mgcViz':\n##   method from  \n##   +.gg   GGally\n\n\n\n\n\n\n\nplot(res, quantreg = TRUE)\n\n\n\n\n\n\n\nplotResiduals(res, form = elk_data$dem, quantreg = TRUE)\n\n\n\n\n\n\n\nplotResiduals(res, form = elk_data$ruggedness, quantreg = TRUE)\n\n\n\n\n\n\n\n\nNow, everything looks perfect",
    "crumbs": [
      "Regression Analysis",
      "Exercise - GLM"
    ]
  },
  {
    "objectID": "2B-Multivariate.html",
    "href": "2B-Multivariate.html",
    "title": "11  Multivariate Statistics",
    "section": "",
    "text": "11.1 Unconstrained\n## PCA\n# we use the same dataset of flower characteristics of three species of iris\npairs(iris, col = iris$Species)\n\n\n\n\n\n\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\npca = prcomp(iris[, 1:4], scale = T) # always set scale = T\n# when data is very skewed --&gt; better transform e.g. log\n\nsummary(pca)\n## Importance of components:\n##                           PC1    PC2     PC3     PC4\n## Standard deviation     1.7084 0.9560 0.38309 0.14393\n## Proportion of Variance 0.7296 0.2285 0.03669 0.00518\n## Cumulative Proportion  0.7296 0.9581 0.99482 1.00000\n# standard deviation^2 is variance!!!\n# cum prop of PC2 is the variance that is visualized in a biplot\n\n\n# plot the result\n# absolute variance of each component\nplot(pca) # see row1 of the summary(pca): (sd)^2 = variance\n\n\n\n\n\n\n\n\n# rel variance of each component\nbarplot(summary(pca)$importance[2, ], \n        ylab=\"proportion of variance explained\") # displays % of variance explained by PCs\n\n\n\n\n\n\n\n\n# Biplot\nbiplot(pca) # displays PC1 and PC2 AND rotation (vectors) of the different variables AND observations\n\n\n\n\n\n\n\n\n\n\n\n## distance-based approach: NMDS\n\nlibrary(vegan)\n## Carregando pacotes exigidos: permute\n## Carregando pacotes exigidos: lattice\n?vegan\n\n# community dataset for plants in dunes (included in vegan package):\n\ndata(\"dune\")\nstr(dune) # display structure of the dataset\n## 'data.frame':    20 obs. of  30 variables:\n##  $ Achimill: num  1 3 0 0 2 2 2 0 0 4 ...\n##  $ Agrostol: num  0 0 4 8 0 0 0 4 3 0 ...\n##  $ Airaprae: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Alopgeni: num  0 2 7 2 0 0 0 5 3 0 ...\n##  $ Anthodor: num  0 0 0 0 4 3 2 0 0 4 ...\n##  $ Bellpere: num  0 3 2 2 2 0 0 0 0 2 ...\n##  $ Bromhord: num  0 4 0 3 2 0 2 0 0 4 ...\n##  $ Chenalbu: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Cirsarve: num  0 0 0 2 0 0 0 0 0 0 ...\n##  $ Comapalu: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Eleopalu: num  0 0 0 0 0 0 0 4 0 0 ...\n##  $ Elymrepe: num  4 4 4 4 4 0 0 0 6 0 ...\n##  $ Empenigr: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Hyporadi: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Juncarti: num  0 0 0 0 0 0 0 4 4 0 ...\n##  $ Juncbufo: num  0 0 0 0 0 0 2 0 4 0 ...\n##  $ Lolipere: num  7 5 6 5 2 6 6 4 2 6 ...\n##  $ Planlanc: num  0 0 0 0 5 5 5 0 0 3 ...\n##  $ Poaprat : num  4 4 5 4 2 3 4 4 4 4 ...\n##  $ Poatriv : num  2 7 6 5 6 4 5 4 5 4 ...\n##  $ Ranuflam: num  0 0 0 0 0 0 0 2 0 0 ...\n##  $ Rumeacet: num  0 0 0 0 5 6 3 0 2 0 ...\n##  $ Sagiproc: num  0 0 0 5 0 0 0 2 2 0 ...\n##  $ Salirepe: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Scorautu: num  0 5 2 2 3 3 3 3 2 3 ...\n##  $ Trifprat: num  0 0 0 0 2 5 2 0 0 0 ...\n##  $ Trifrepe: num  0 5 2 1 2 5 2 2 3 6 ...\n##  $ Vicilath: num  0 0 0 0 0 0 0 0 0 1 ...\n##  $ Bracruta: num  0 0 2 2 2 6 2 2 2 2 ...\n##  $ Callcusp: num  0 0 0 0 0 0 0 0 0 0 ...\n?dune\nsummary(dune) # display summary of the dataset (summary statistics for each variable)\n##     Achimill      Agrostol      Airaprae       Alopgeni       Anthodor   \n##  Min.   :0.0   Min.   :0.0   Min.   :0.00   Min.   :0.00   Min.   :0.00  \n##  1st Qu.:0.0   1st Qu.:0.0   1st Qu.:0.00   1st Qu.:0.00   1st Qu.:0.00  \n##  Median :0.0   Median :1.5   Median :0.00   Median :0.00   Median :0.00  \n##  Mean   :0.8   Mean   :2.4   Mean   :0.25   Mean   :1.80   Mean   :1.05  \n##  3rd Qu.:2.0   3rd Qu.:4.0   3rd Qu.:0.00   3rd Qu.:3.25   3rd Qu.:2.25  \n##  Max.   :4.0   Max.   :8.0   Max.   :3.00   Max.   :8.00   Max.   :4.00  \n##     Bellpere       Bromhord       Chenalbu       Cirsarve      Comapalu  \n##  Min.   :0.00   Min.   :0.00   Min.   :0.00   Min.   :0.0   Min.   :0.0  \n##  1st Qu.:0.00   1st Qu.:0.00   1st Qu.:0.00   1st Qu.:0.0   1st Qu.:0.0  \n##  Median :0.00   Median :0.00   Median :0.00   Median :0.0   Median :0.0  \n##  Mean   :0.65   Mean   :0.75   Mean   :0.05   Mean   :0.1   Mean   :0.2  \n##  3rd Qu.:2.00   3rd Qu.:0.50   3rd Qu.:0.00   3rd Qu.:0.0   3rd Qu.:0.0  \n##  Max.   :3.00   Max.   :4.00   Max.   :1.00   Max.   :2.0   Max.   :2.0  \n##     Eleopalu       Elymrepe      Empenigr      Hyporadi       Juncarti   \n##  Min.   :0.00   Min.   :0.0   Min.   :0.0   Min.   :0.00   Min.   :0.00  \n##  1st Qu.:0.00   1st Qu.:0.0   1st Qu.:0.0   1st Qu.:0.00   1st Qu.:0.00  \n##  Median :0.00   Median :0.0   Median :0.0   Median :0.00   Median :0.00  \n##  Mean   :1.25   Mean   :1.3   Mean   :0.1   Mean   :0.45   Mean   :0.90  \n##  3rd Qu.:1.00   3rd Qu.:4.0   3rd Qu.:0.0   3rd Qu.:0.00   3rd Qu.:0.75  \n##  Max.   :8.00   Max.   :6.0   Max.   :2.0   Max.   :5.00   Max.   :4.00  \n##     Juncbufo       Lolipere      Planlanc      Poaprat       Poatriv    \n##  Min.   :0.00   Min.   :0.0   Min.   :0.0   Min.   :0.0   Min.   :0.00  \n##  1st Qu.:0.00   1st Qu.:0.0   1st Qu.:0.0   1st Qu.:0.0   1st Qu.:0.00  \n##  Median :0.00   Median :2.0   Median :0.0   Median :3.0   Median :4.00  \n##  Mean   :0.65   Mean   :2.9   Mean   :1.3   Mean   :2.4   Mean   :3.15  \n##  3rd Qu.:0.00   3rd Qu.:6.0   3rd Qu.:3.0   3rd Qu.:4.0   3rd Qu.:5.00  \n##  Max.   :4.00   Max.   :7.0   Max.   :5.0   Max.   :5.0   Max.   :9.00  \n##     Ranuflam      Rumeacet      Sagiproc    Salirepe       Scorautu  \n##  Min.   :0.0   Min.   :0.0   Min.   :0   Min.   :0.00   Min.   :0.0  \n##  1st Qu.:0.0   1st Qu.:0.0   1st Qu.:0   1st Qu.:0.00   1st Qu.:2.0  \n##  Median :0.0   Median :0.0   Median :0   Median :0.00   Median :2.0  \n##  Mean   :0.7   Mean   :0.9   Mean   :1   Mean   :0.55   Mean   :2.7  \n##  3rd Qu.:2.0   3rd Qu.:0.5   3rd Qu.:2   3rd Qu.:0.00   3rd Qu.:3.0  \n##  Max.   :4.0   Max.   :6.0   Max.   :5   Max.   :5.00   Max.   :6.0  \n##     Trifprat       Trifrepe       Vicilath      Bracruta       Callcusp  \n##  Min.   :0.00   Min.   :0.00   Min.   :0.0   Min.   :0.00   Min.   :0.0  \n##  1st Qu.:0.00   1st Qu.:1.00   1st Qu.:0.0   1st Qu.:1.50   1st Qu.:0.0  \n##  Median :0.00   Median :2.00   Median :0.0   Median :2.00   Median :0.0  \n##  Mean   :0.45   Mean   :2.35   Mean   :0.2   Mean   :2.45   Mean   :0.5  \n##  3rd Qu.:0.00   3rd Qu.:3.00   3rd Qu.:0.0   3rd Qu.:4.00   3rd Qu.:0.0  \n##  Max.   :5.00   Max.   :6.00   Max.   :2.0   Max.   :6.00   Max.   :4.0\n\nNMDS = metaMDS(dune)\n## Run 0 stress 0.1192678 \n## Run 1 stress 0.1886532 \n## Run 2 stress 0.1192678 \n## ... Procrustes: rmse 1.258026e-05  max resid 3.164268e-05 \n## ... Similar to previous best\n## Run 3 stress 0.1183186 \n## ... New best solution\n## ... Procrustes: rmse 0.02027014  max resid 0.06496123 \n## Run 4 stress 0.1183186 \n## ... Procrustes: rmse 4.230384e-06  max resid 1.475206e-05 \n## ... Similar to previous best\n## Run 5 stress 0.1192678 \n## Run 6 stress 0.1809578 \n## Run 7 stress 0.1889638 \n## Run 8 stress 0.1808911 \n## Run 9 stress 0.3680059 \n## Run 10 stress 0.1183186 \n## ... Procrustes: rmse 1.159455e-05  max resid 3.442588e-05 \n## ... Similar to previous best\n## Run 11 stress 0.1183186 \n## ... Procrustes: rmse 4.643337e-06  max resid 1.388314e-05 \n## ... Similar to previous best\n## Run 12 stress 0.2361935 \n## Run 13 stress 0.1192678 \n## Run 14 stress 0.1192679 \n## Run 15 stress 0.1183186 \n## ... Procrustes: rmse 1.447333e-05  max resid 4.510486e-05 \n## ... Similar to previous best\n## Run 16 stress 0.1192678 \n## Run 17 stress 0.1192678 \n## Run 18 stress 0.1192679 \n## Run 19 stress 0.1808911 \n## Run 20 stress 0.1808911 \n## *** Best solution repeated 4 times\n# algorithm is iterative\n\nNMDS # gives information on NMDS: distance measure, stress (should be low)\n## \n## Call:\n## metaMDS(comm = dune) \n## \n## global Multidimensional Scaling using monoMDS\n## \n## Data:     dune \n## Distance: bray \n## \n## Dimensions: 2 \n## Stress:     0.1183186 \n## Stress type 1, weak ties\n## Best solution was repeated 4 times in 20 tries\n## The best solution was from try 3 (random start)\n## Scaling: centring, PC rotation, halfchange scaling \n## Species: expanded scores based on 'dune'\n# stress of &gt;= 0.2 = be suspicious, stress &gt;=0.3 indicates that ordination is arbitrary\n# increase Dimensions if k is too high\nordiplot(NMDS, type = \"t\") #\"t\" = text\n\n\n\n\n\n\n\n\n\n# if we have time:\n# distance measure can be changed (default is Bray-Curtis): see \n?vegdist # some recommendations there\nNMDS2 = metaMDS(dune, distance=\"euclidean\")\n## Run 0 stress 0.1174523 \n## Run 1 stress 0.1174523 \n## ... Procrustes: rmse 3.580249e-06  max resid 1.150625e-05 \n## ... Similar to previous best\n## Run 2 stress 0.1174523 \n## ... Procrustes: rmse 2.054645e-06  max resid 3.818306e-06 \n## ... Similar to previous best\n## Run 3 stress 0.1174523 \n## ... Procrustes: rmse 2.128171e-06  max resid 5.656827e-06 \n## ... Similar to previous best\n## Run 4 stress 0.1174523 \n## ... Procrustes: rmse 2.022272e-06  max resid 6.26572e-06 \n## ... Similar to previous best\n## Run 5 stress 0.1174523 \n## ... Procrustes: rmse 2.488733e-06  max resid 8.218612e-06 \n## ... Similar to previous best\n## Run 6 stress 0.1177339 \n## ... Procrustes: rmse 0.01706434  max resid 0.05525565 \n## Run 7 stress 0.1174523 \n## ... New best solution\n## ... Procrustes: rmse 1.353662e-06  max resid 2.894393e-06 \n## ... Similar to previous best\n## Run 8 stress 0.1174523 \n## ... Procrustes: rmse 1.40202e-06  max resid 4.031046e-06 \n## ... Similar to previous best\n## Run 9 stress 0.1174523 \n## ... Procrustes: rmse 2.805574e-06  max resid 7.787809e-06 \n## ... Similar to previous best\n## Run 10 stress 0.1174523 \n## ... Procrustes: rmse 1.140966e-06  max resid 2.993735e-06 \n## ... Similar to previous best\n## Run 11 stress 0.1177339 \n## ... Procrustes: rmse 0.0170643  max resid 0.05525551 \n## Run 12 stress 0.1174523 \n## ... Procrustes: rmse 1.964847e-06  max resid 5.765074e-06 \n## ... Similar to previous best\n## Run 13 stress 0.1174523 \n## ... Procrustes: rmse 1.231259e-06  max resid 2.345061e-06 \n## ... Similar to previous best\n## Run 14 stress 0.1174523 \n## ... Procrustes: rmse 1.055035e-06  max resid 2.452641e-06 \n## ... Similar to previous best\n## Run 15 stress 0.1177339 \n## ... Procrustes: rmse 0.01706422  max resid 0.05525614 \n## Run 16 stress 0.1177339 \n## ... Procrustes: rmse 0.01706442  max resid 0.05525521 \n## Run 17 stress 0.1177339 \n## ... Procrustes: rmse 0.01706456  max resid 0.05525899 \n## Run 18 stress 0.1177339 \n## ... Procrustes: rmse 0.01706413  max resid 0.05525604 \n## Run 19 stress 0.1177339 \n## ... Procrustes: rmse 0.01706403  max resid 0.05525579 \n## Run 20 stress 0.1174523 \n## ... Procrustes: rmse 2.007087e-06  max resid 5.652376e-06 \n## ... Similar to previous best\n## *** Best solution repeated 8 times\nNMDS2 \n## \n## Call:\n## metaMDS(comm = dune, distance = \"euclidean\") \n## \n## global Multidimensional Scaling using monoMDS\n## \n## Data:     dune \n## Distance: euclidean \n## \n## Dimensions: 2 \n## Stress:     0.1174523 \n## Stress type 1, weak ties\n## Best solution was repeated 8 times in 20 tries\n## The best solution was from try 7 (random start)\n## Scaling: centring, PC rotation \n## Species: expanded scores based on 'dune'\nordiplot(NMDS2, type = \"t\")",
    "crumbs": [
      "Multivariate Statistics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Multivariate Statistics</span>"
    ]
  },
  {
    "objectID": "2B-Multivariate.html#unconstrained",
    "href": "2B-Multivariate.html#unconstrained",
    "title": "11  Multivariate Statistics",
    "section": "",
    "text": "Caution\n\n\n\n\n# Why we should be careful when interpreting patterns in ordination plots\nset.seed(123)\n\nrandom = data.frame(pollution = rnorm(30),\n                    temperature = rnorm(30),\n                    moisture = rnorm(30),\n                    tourists = rnorm(30),\n                    wind = rnorm(30),\n                    dogs = rnorm(30))\nhead(random)\n##     pollution temperature   moisture   tourists       wind       dogs\n## 1 -0.56047565   0.4264642  0.3796395  0.9935039  0.1176466  0.7877388\n## 2 -0.23017749  -0.2950715 -0.5023235  0.5483970 -0.9474746  0.7690422\n## 3  1.55870831   0.8951257 -0.3332074  0.2387317 -0.4905574  0.3322026\n## 4  0.07050839   0.8781335 -1.0185754 -0.6279061 -0.2560922 -1.0083766\n## 5  0.12928774   0.8215811 -1.0717912  1.3606524  1.8438620 -0.1194526\n## 6  1.71506499   0.6886403  0.3035286 -0.6002596 -0.6519499 -0.2803953\npca = prcomp(random, scale = T)\nbiplot(pca)\n\n\n\n\n\n\n\nsummary(pca) # similar variance on all axes\n## Importance of components:\n##                           PC1    PC2    PC3    PC4    PC5     PC6\n## Standard deviation     1.2054 1.1078 1.0649 0.9707 0.8530 0.71817\n## Proportion of Variance 0.2422 0.2046 0.1890 0.1570 0.1213 0.08596\n## Cumulative Proportion  0.2422 0.4467 0.6357 0.7928 0.9140 1.00000",
    "crumbs": [
      "Multivariate Statistics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Multivariate Statistics</span>"
    ]
  },
  {
    "objectID": "2B-Multivariate.html#constrained",
    "href": "2B-Multivariate.html#constrained",
    "title": "11  Multivariate Statistics",
    "section": "11.2 Constrained",
    "text": "11.2 Constrained\n\n# 2 multivariate datasets (abundances + environment)\n\n\n## RDA\nstr(dune) # species composition\n## 'data.frame':    20 obs. of  30 variables:\n##  $ Achimill: num  1 3 0 0 2 2 2 0 0 4 ...\n##  $ Agrostol: num  0 0 4 8 0 0 0 4 3 0 ...\n##  $ Airaprae: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Alopgeni: num  0 2 7 2 0 0 0 5 3 0 ...\n##  $ Anthodor: num  0 0 0 0 4 3 2 0 0 4 ...\n##  $ Bellpere: num  0 3 2 2 2 0 0 0 0 2 ...\n##  $ Bromhord: num  0 4 0 3 2 0 2 0 0 4 ...\n##  $ Chenalbu: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Cirsarve: num  0 0 0 2 0 0 0 0 0 0 ...\n##  $ Comapalu: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Eleopalu: num  0 0 0 0 0 0 0 4 0 0 ...\n##  $ Elymrepe: num  4 4 4 4 4 0 0 0 6 0 ...\n##  $ Empenigr: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Hyporadi: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Juncarti: num  0 0 0 0 0 0 0 4 4 0 ...\n##  $ Juncbufo: num  0 0 0 0 0 0 2 0 4 0 ...\n##  $ Lolipere: num  7 5 6 5 2 6 6 4 2 6 ...\n##  $ Planlanc: num  0 0 0 0 5 5 5 0 0 3 ...\n##  $ Poaprat : num  4 4 5 4 2 3 4 4 4 4 ...\n##  $ Poatriv : num  2 7 6 5 6 4 5 4 5 4 ...\n##  $ Ranuflam: num  0 0 0 0 0 0 0 2 0 0 ...\n##  $ Rumeacet: num  0 0 0 0 5 6 3 0 2 0 ...\n##  $ Sagiproc: num  0 0 0 5 0 0 0 2 2 0 ...\n##  $ Salirepe: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Scorautu: num  0 5 2 2 3 3 3 3 2 3 ...\n##  $ Trifprat: num  0 0 0 0 2 5 2 0 0 0 ...\n##  $ Trifrepe: num  0 5 2 1 2 5 2 2 3 6 ...\n##  $ Vicilath: num  0 0 0 0 0 0 0 0 0 1 ...\n##  $ Bracruta: num  0 0 2 2 2 6 2 2 2 2 ...\n##  $ Callcusp: num  0 0 0 0 0 0 0 0 0 0 ...\ndata(\"dune.env\")\nstr(dune.env) # environmental variables\n## 'data.frame':    20 obs. of  5 variables:\n##  $ A1        : num  2.8 3.5 4.3 4.2 6.3 4.3 2.8 4.2 3.7 3.3 ...\n##  $ Moisture  : Ord.factor w/ 4 levels \"1\"&lt;\"2\"&lt;\"4\"&lt;\"5\": 1 1 2 2 1 1 1 4 3 2 ...\n##  $ Management: Factor w/ 4 levels \"BF\",\"HF\",\"NM\",..: 4 1 4 4 2 2 2 2 2 1 ...\n##  $ Use       : Ord.factor w/ 3 levels \"Hayfield\"&lt;\"Haypastu\"&lt;..: 2 2 2 2 1 2 3 3 1 1 ...\n##  $ Manure    : Ord.factor w/ 5 levels \"0\"&lt;\"1\"&lt;\"2\"&lt;\"3\"&lt;..: 5 3 5 5 3 3 4 4 2 2 ...\n\nRDA = rda(dune ~ as.numeric(Manure) + as.numeric(Moisture), \n         data = dune.env)\nplot(RDA)\n\n\n\n\n\n\n\n\nsummary(RDA)\n## \n## Call:\n## rda(formula = dune ~ as.numeric(Manure) + as.numeric(Moisture),      data = dune.env) \n## \n## Partitioning of variance:\n##               Inertia Proportion\n## Total           84.12     1.0000\n## Constrained     31.20     0.3709\n## Unconstrained   52.92     0.6291\n## \n## Eigenvalues, and their contribution to the variance \n## \n## Importance of components:\n##                          RDA1    RDA2     PC1     PC2     PC3    PC4     PC5\n## Eigenvalue            19.0185 12.1864 10.7889 7.85393 6.67657 6.2084 5.12380\n## Proportion Explained   0.2261  0.1449  0.1283 0.09336 0.07937 0.0738 0.06091\n## Cumulative Proportion  0.2261  0.3709  0.4992 0.59255 0.67192 0.7457 0.80663\n##                           PC6     PC7     PC8     PC9    PC10    PC11    PC12\n## Eigenvalue            3.50320 3.10988 2.47760 1.83130 1.63276 1.03305 0.87265\n## Proportion Explained  0.04164 0.03697 0.02945 0.02177 0.01941 0.01228 0.01037\n## Cumulative Proportion 0.84827 0.88524 0.91469 0.93646 0.95587 0.96815 0.97852\n##                           PC13     PC14     PC15     PC16     PC17\n## Eigenvalue            0.642862 0.469072 0.301387 0.215853 0.177610\n## Proportion Explained  0.007642 0.005576 0.003583 0.002566 0.002111\n## Cumulative Proportion 0.986164 0.991740 0.995323 0.997889 1.000000\n## \n## Accumulated constrained eigenvalues\n## Importance of components:\n##                          RDA1    RDA2\n## Eigenvalue            19.0185 12.1864\n## Proportion Explained   0.6095  0.3905\n## Cumulative Proportion  0.6095  1.0000\n# important part at the top\n# variance explained by the two variables = prop constrained = 37.09%\n# how much is explained by each RDA = see importance of components prop explained\n# PCs are the unconstrained axes\n\n# species scores = coordinates of species in the plot\n# site scores = coordinates of sites in the plot\n# biplot scores = coordinates of environmental variable vectors\n\n\nbarplot(summary(RDA)$cont$importance[2, ],  las = 2,\n        col = c(rep ('red', 2), \n                rep ('black', length(summary(RDA)$cont$importance[2, ])-2)),\n        ylab=\"proportion of variance explained\") # displays % of variance explained by PCs",
    "crumbs": [
      "Multivariate Statistics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Multivariate Statistics</span>"
    ]
  },
  {
    "objectID": "2B-Multivariate.html#clustering",
    "href": "2B-Multivariate.html#clustering",
    "title": "11  Multivariate Statistics",
    "section": "11.3 Clustering",
    "text": "11.3 Clustering\n\n# hierarchical clustering: \n\nlibrary(cluster) # clustering\nlibrary(ape) # phylogenetic analyses, here to get pretty dendrogram\n\n# example for distance matrix\ndist(iris[1:3, 1:4]) # creates a distance matrix (comparison of all possible sample pairs), \n##           1         2\n## 2 0.5385165          \n## 3 0.5099020 0.3000000\n# default method =\"euclidean\", but can be changed\n\n# get Hierarchical Clustering\nhc = hclust(dist(iris[, 1:4]))\nplot(hc)\n\n\n\n\n\n\n\n\n# for colors use package ape\nplot(as.phylo(hc), tip.color = as.numeric(iris$Species)) # as.phylo converts object type \"hcclust\" into object type \"phylo\"\n\n\n\n\n\n\n\n# change plotting type:\nplot(as.phylo(hc), tip.color = as.numeric(iris$Species), type = \"fan\")\n\n\n\n\n\n\n\n\n\n\n# lets try another clustering algorithm\ndata(animals)\nstr(animals)\n## 'data.frame':    20 obs. of  6 variables:\n##  $ war: int  1 1 2 1 2 2 2 2 2 1 ...\n##  $ fly: int  1 2 1 1 1 1 2 2 1 2 ...\n##  $ ver: int  1 1 2 1 2 2 2 2 2 1 ...\n##  $ end: int  1 1 1 1 2 1 1 2 2 1 ...\n##  $ gro: int  2 2 1 1 2 2 2 1 2 1 ...\n##  $ hai: int  1 2 2 2 2 2 1 1 1 1 ...\n\n# Agglomerative Nesting \naa &lt;- agnes(animals)\nplot(aa, which.plots = 2) #which.plots: plots only plot 2\n\n\n\n\n\n\n\n# first is banner plot...\n\n\n\n### non-hierarchical\n# kmeans \n\nset.seed(123) # choice of first k centers is random and depends on (random) seed\ncl = kmeans(iris[, 1:4], centers = 3) # centers = number of clusters to be generated\n\ncl$cluster\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n##  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n## [112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3\n## [149] 3 2\nas.numeric(iris$Species)\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n##  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3\n## [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n## [149] 3 3\n\n\n# without the same seed you may have to exchange cluster 2 and 3 to be able to compare assignment to species with real species in the plot\ntemp = cl$cluster\n# temp[cl$cluster==2] = 3\n# temp[cl$cluster==3] = 2\n\ntemp\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n##  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n## [112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3\n## [149] 3 2\nas.numeric(iris$Species)\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n##  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3\n## [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n## [149] 3 3\n\n# original species\npairs(iris[, 1:4], col = as.numeric(iris$Species)) \n\n\n\n\n\n\n\n\n# species found by cluster\npairs(iris[, 1:4], col = temp)\n\n\n\n\n\n\n\n\n# display samples that have been assigned to the wrong species\nsame = as.numeric(iris$Species) == temp\npairs(iris[, 1:4], col = as.numeric(same) + 1) \n\n\n\n\n\n\n\npalette()\n## [1] \"black\"   \"#DF536B\" \"#61D04F\" \"#2297E6\" \"#28E2E5\" \"#CD0BBC\" \"#F5C710\"\n## [8] \"gray62\"",
    "crumbs": [
      "Multivariate Statistics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Multivariate Statistics</span>"
    ]
  },
  {
    "objectID": "2B-Multivariate.html#exercises",
    "href": "2B-Multivariate.html#exercises",
    "title": "11  Multivariate Statistics",
    "section": "11.4 Exercises",
    "text": "11.4 Exercises\nIn this exercise you will practice analyzing multivariate datasets using:\n\nordination methods which explore higher-order correlations among variables and similarities between observations\nclustering methods which aggregate individual observations into clusters.\n\n\n11.4.0.1 Useful functions for multivariate data analyses\npairs() - create pairplot (plot all variables against each other)\nprcomp() - calculate PCA\nplot(pca_object) - plot variance explained by PC axes\nbiplot() - plot PCA\nmetaMDS() - calculate NMDS\nordiplot(nmds_object) - plot NMDS\nrda() - calculate RDA\nplot(rda_object) - plot RDA\ndist() - create distance matrix\nhclust() - perform hierarchical clustering; apply to distance matrix\nplot(as.phylo(hc_object)) - plot dendrogram from hclust output\nagnes() - another clustering algorithm\nkmeans() - perform kmeans non-hierarchical clustering; access cluster assignments using kmeans_object$cluster\n\n\n11.4.0.2 Background on the dataset\nMarine coastal ecosystems harbor the most productive and diverse communities on Earth. However, they are extremely vulnerable to climate change and human activities (such as landclaim, pollution, recreation purposes, …) As a consequence, the performance of this ecosystem has decreased considerably. To better understand these ecosystems, the dutch governmental institute (RIKZ: Rijksinstituut voor Kust en Zee) started a research project on sandy beaches to investigate the relationship between environmental factors and how they might affect benthic fauna. (from the LMU and Zuur, Ieno, Smith (2007), Chapter 12.8-12.10 and 27)\nQuestion\nWe now want to use ordination methods to explore\n\nthe variability in environmental conditions\nthe variability in species richness\n\nWe also want to use clustering methods to define 3 environmental types and hierarchically cluster the samples with respect to their species richness.\nDataset\nRead in the dataset as follows:\n\ndat = read.table(file = \"http://evol.bio.lmu.de/_statgen/Multivariate/11SS/RIKZGroups.txt\", header = T)\nhead(dat)\n\nYou already know the functions str() and summary() to get an overview of a dataset and to see which variables the dataset contains.\n\ncolumns 2:5 is species richness within four larger faunal groups\ncolumns 7:16 are different environmental variables\n\nNot important for us are:\n\ncolumn 6 (week), a time stamp\n\ncolumn 17 (sorting1), variable from the observational design\n\nLet’s get into the analysis!\n\n\n11.4.1 Unconstrained ordination (PCA)\nCarry out the following analyses:\n\nMake two PCAs, one for the environmental and one for the species richness data (see columns above).\nName the results pca_environment and pca_species.\nCreate a biplot for each PCA.\nCreate a barplot for the proportion of variance explained by each component.\n\nFor example, the result for species richness should look like this:\n\n\n\n\n\n\n\n\n\nYou need the following functions and the package vegan:\n\nprcomp()\nbiplot()\n\nbarplot()\nsummary()\n\n\nlibrary(vegan)\n\nHints\n\nDon’t forget to scale the variables in the PCA.\nIn order to get the proportion of the explained variance, have a look at the summary of your analysis. str() shows you what the summary contains. You want to specifically look at the importance, here the second row contains the proportion of variance of all components. So what we want to plot is: summary(pca_species)$importance[2,].\nDon’t forget to give your plots a title.\n\nNow, use your results to answer the questions on elearning-extern (Q 1-3) (“07_Test for Exercise in R”).\n\nIn which multivariate dataset do the first and second components explain more variance?\nWhat are the two samples that have the highest score on the respective third PCA axes?\nFrom looking at the biplot: Which environmental variables would you choose, if you have only the resource to measure three variables?\n\nNAP, angle 1 and chalk\nsalinity, penetrability and grain size\ngrain size, chalk and exposure\n\nDescribe the following correlations:\n\nsalinity and humus\nangle1 and exposure\nPolychaeta and Mollusca\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n## 1.) Conduct the principle component analyses (PCAs):\n\n# a) PCA of environmental data\npca_environment = prcomp(dat[,7:16], scale = T)\nsummary(pca_environment)\n## Importance of components:\n##                           PC1    PC2    PC3    PC4     PC5    PC6     PC7\n## Standard deviation     1.8476 1.3300 1.0919 1.0297 0.99521 0.7746 0.72784\n## Proportion of Variance 0.3414 0.1769 0.1192 0.1060 0.09904 0.0600 0.05298\n## Cumulative Proportion  0.3414 0.5182 0.6375 0.7435 0.84254 0.9025 0.95551\n##                            PC8     PC9    PC10\n## Standard deviation     0.52299 0.34727 0.22541\n## Proportion of Variance 0.02735 0.01206 0.00508\n## Cumulative Proportion  0.98286 0.99492 1.00000\n\nop &lt;- par(mfrow = c(1,2))\nbiplot(pca_environment, main = \"PCA\")            # plot the results of the PCA as a rotation matrix\nbarplot(summary(pca_environment)$importance[2,], # get the importance measure\n     main = \"Components of environment\",\n     ylab = \"Proportion of variance explained\")\n\n\n\n\n\n\n\n\n# b) PCA of species richness data\npca_species = prcomp(dat[,2:5], scale = T)\nsummary(pca_species)\n## Importance of components:\n##                           PC1    PC2    PC3    PC4\n## Standard deviation     1.1177 1.0251 1.0095 0.8251\n## Proportion of Variance 0.3123 0.2627 0.2548 0.1702\n## Cumulative Proportion  0.3123 0.5750 0.8298 1.0000\n\nbiplot(pca_species, main = \"PCA\")            # plot the results of the PCA as a rotation matrix\nbarplot(summary(pca_species)$importance[2,], # get the importance measure\n     main = \"Components of species\",\n     ylab = \"Proportion of variance explained\")\n\n\n\n\n\n\n\npar(op)\n\n# From the *summary()* output we can see that the first and second components explain more variance in the species PCA.\n\n\n##  2.) What are the two samples that have the highest score on the third PCA axis?\n\n# -&gt; order the samples by their PC3 coordinate:\norder(pca_environment$x[,'PC3'], decreasing = T) # -&gt; 24 is highest\n##  [1] 24 21 23 28 25 16 22 40 36 19  8 12  6 30  9  7 39 32 44  1 15  4 31 13 14\n## [26]  5 10 35 37 45 27 20 18 34 11 17 26 29 38  3 41 33  2 42 43\norder(pca_species$x[,'PC3'], decreasing = T) # -&gt; 7 is highest\n##  [1]  7  8  6  1 37  5 13  3 35  4 14 38 11 42 29 39 28 43  2 45 26 34 17 27 36\n## [26] 18 20 15 23 30 41 21 19 31 12 16 33 25 32 24 40 44 22 10  9\n\n\n## 3.) Which environmental variables would you choose, if you have only the resource to measure three variables? \n\n# From looking at the biplot, we choose 3 variables that describe a lot of variation (i.e. have a large length in the biplot) and have little collinearity. \n# -&gt; For example, an appropriate choice would be salinity, penetrability and grain size.\n\n\n## 4.) We can get information on the correlations of variables by looking at their representation in the biplot: \n  #  a) salinity and humus:  same direction  -&gt;  positively correlated\n  #  b) angle1 and exposure:  opposite directions  -&gt;  negatively correlated\n  #  c) Polychaeta and Mollusca:  almost perpendicular  -&gt;  uncorrelated\n\n\n\n\n\n\n11.4.2 Clustering\n\n11.4.2.1 K-means\nWe want to use clustering methods to define 3 environmental types. Use the function kmeans() with centers = 3 (number of clusters to be generated). Remember to set a seed; the choice of the first k centers is random.\n\nset.seed(467456)\ncl = #...\n\nCompare the three clusters with the result of the PCA using the following code that uses another plotting framework called ggplot2:\n\nlibrary(ggfortify)\nautoplot(pca_environment, colour = cl$cluster, size = 2, loadings = TRUE, loadings.colour = 'black',\n         loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = \"black\")\n\nThe colors of the points represent the three clusters. Answer the following question on elearning-extern (Q 4-5):\n\nHow is it possible that four observations in the middle (in red - if you have used the same seed) belong to a different cluster than the observations around them (in black)?\nWhich environmental variables are on average high within the black cluster (cluster 1)?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Create clusters using all environmental variables\nset.seed(467456)\ncl &lt;- kmeans(dat[,7:16], centers = 3) # 3 clusters to be generated\n\n# Plot\nlibrary(ggfortify)\nautoplot(pca_environment, colour = cl$cluster, size = 2, loadings = TRUE, loadings.colour = 'black',\n         loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = \"black\")\n\n\n\n\n\n\n\n\n# To understand why the four observations in the middle belong to a different cluster than the observations around them, we must take into account, that the biplot is only a 2-dimensional representation of a more-than-2 dimensional space. Therefore, the four points in the middle will be dissimilar to the points around them with respect to a variable that is not well represented by the first two PCA axes.\n\n# Environmental variables that are on average high within cluster 1:\n# -&gt; looking at the plot we find that exposure and grain size are high on average within cluster 1\n\n\n\n\n\n\n11.4.2.2 Hierarchical clustering\nNow we want to hierarchically cluster the samples with respect to their species richness, as shown in the following plot:\n\n\n\n\n\n\n\n\n\nCreate the same plot using the functions:\n\nhclust()\n\nplot()\nas.phylo()\n\nLoad the package ape. Have a look at the help for hclust() to read what the function does and look at the examples for further help on how to use the function. Then have a look at what the function as.phylo() does. Now, color the labels using the variable week. You can do this using the argument “tip.color =”.\nChoose the correct statement(s) about the species richness and its sampling on elearning-extern(Q6). To be able to read the plot more easily, you can click Zoom in the top pane of the Plots window in RStudio.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nlibrary(ape)\n\nhc = hclust(dist(dat[, 2:5]))\nplot(as.phylo(hc), tip.color = dat$week)",
    "crumbs": [
      "Multivariate Statistics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Multivariate Statistics</span>"
    ]
  },
  {
    "objectID": "5A-Exercise.html",
    "href": "5A-Exercise.html",
    "title": "Exercise - Multivariate statistics",
    "section": "",
    "text": "Useful functions for multivariate data analyses\npairs() - create pairplot (plot all variables against each other)\nprcomp() - calculate PCA\nplot(pca_object) - plot variance explained by PC axes\nbiplot() - plot PCA\nmetaMDS() - calculate NMDS\nordiplot(nmds_object) - plot NMDS\nrda() - calculate RDA\nplot(rda_object) - plot RDA\ndist() - create distance matrix\nhclust() - perform hierarchical clustering; apply to distance matrix\nplot(as.phylo(hc_object)) - plot dendrogram from hclust output\nagnes() - another clustering algorithm\nkmeans() - perform kmeans non-hierarchical clustering; access cluster assignments using kmeans_object\\$cluster",
    "crumbs": [
      "Multivariate Statistics",
      "Exercise - Multivariate statistics"
    ]
  },
  {
    "objectID": "5A-Exercise.html#unconstrained-ordination-pca",
    "href": "5A-Exercise.html#unconstrained-ordination-pca",
    "title": "Exercise - Multivariate statistics",
    "section": "Unconstrained ordination (PCA)",
    "text": "Unconstrained ordination (PCA)\nCarry out the following analyses:\n\nMake two PCAs, one for the environmental and one for the species richness data (see columns above).\nName the results pca_environment and pca_species.\nCreate a biplot for each PCA.\nCreate a barplot for the proportion of variance explained by each component.\n\nFor example, the result for species richness should look like this:\n\n\n\n\n\n\n\n\n\nYou need the following functions and the package vegan:\n\nprcomp()\nbiplot()\n\nbarplot()\nsummary()\n\n\nlibrary(vegan)\n\nHints\n\nDon’t forget to scale the variables in the PCA.\nIn order to get the proportion of the explained variance, have a look at the summary of your analysis. str() shows you what the summary contains. You want to specifically look at the importance, here the second row contains the proportion of variance of all components. So what we want to plot is: summary(pca_species)$importance[2,].\nDon’t forget to give your plots a title.\n\nNow, use your results to answer the questions on elearning-extern (Q 1-3) (“07_Test for Exercise in R”).\n\nIn which multivariate dataset do the first and second components explain more variance?\nWhat are the two samples that have the highest score on the respective third PCA axes?\nFrom looking at the biplot: Which environmental variables would you choose, if you have only the resource to measure three variables?\n\nNAP, angle 1 and chalk\nsalinity, penetrability and grain size\ngrain size, chalk and exposure\n\nDescribe the following correlations:\n\nsalinity and humus\nangle1 and exposure\nPolychaeta and Mollusca\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n## 1.) Conduct the principle component analyses (PCAs):\n\n# a) PCA of environmental data\npca_environment = prcomp(dat[,7:16], scale = T)\nsummary(pca_environment)\n## Importance of components:\n##                           PC1    PC2    PC3    PC4     PC5    PC6     PC7\n## Standard deviation     1.8476 1.3300 1.0919 1.0297 0.99521 0.7746 0.72784\n## Proportion of Variance 0.3414 0.1769 0.1192 0.1060 0.09904 0.0600 0.05298\n## Cumulative Proportion  0.3414 0.5182 0.6375 0.7435 0.84254 0.9025 0.95551\n##                            PC8     PC9    PC10\n## Standard deviation     0.52299 0.34727 0.22541\n## Proportion of Variance 0.02735 0.01206 0.00508\n## Cumulative Proportion  0.98286 0.99492 1.00000\n\nop &lt;- par(mfrow = c(1,2))\nbiplot(pca_environment, main = \"PCA\")            # plot the results of the PCA as a rotation matrix\nbarplot(summary(pca_environment)$importance[2,], # get the importance measure\n     main = \"Components of environment\",\n     ylab = \"Proportion of variance explained\")\n\n\n\n\n\n\n\n\n# b) PCA of species richness data\npca_species = prcomp(dat[,2:5], scale = T)\nsummary(pca_species)\n## Importance of components:\n##                           PC1    PC2    PC3    PC4\n## Standard deviation     1.1177 1.0251 1.0095 0.8251\n## Proportion of Variance 0.3123 0.2627 0.2548 0.1702\n## Cumulative Proportion  0.3123 0.5750 0.8298 1.0000\n\nbiplot(pca_species, main = \"PCA\")            # plot the results of the PCA as a rotation matrix\nbarplot(summary(pca_species)$importance[2,], # get the importance measure\n     main = \"Components of species\",\n     ylab = \"Proportion of variance explained\")\n\n\n\n\n\n\n\npar(op)\n\n# From the *summary()* output we can see that the first and second components explain more variance in the species PCA.\n\n\n##  2.) What are the two samples that have the highest score on the third PCA axis?\n\n# -&gt; order the samples by their PC3 coordinate:\norder(pca_environment$x[,'PC3'], decreasing = T) # -&gt; 24 is highest\n##  [1] 24 21 23 28 25 16 22 40 36 19  8 12  6 30  9  7 39 32 44  1 15  4 31 13 14\n## [26]  5 10 35 37 45 27 20 18 34 11 17 26 29 38  3 41 33  2 42 43\norder(pca_species$x[,'PC3'], decreasing = T) # -&gt; 7 is highest\n##  [1]  7  8  6  1 37  5 13  3 35  4 14 38 11 42 29 39 28 43  2 45 26 34 17 27 36\n## [26] 18 20 15 23 30 41 21 19 31 12 16 33 25 32 24 40 44 22 10  9\n\n\n## 3.) Which environmental variables would you choose, if you have only the resource to measure three variables? \n\n# From looking at the biplot, we choose 3 variables that describe a lot of variation (i.e. have a large length in the biplot) and have little collinearity. \n# -&gt; For example, an appropriate choice would be salinity, penetrability and grain size.\n\n\n## 4.) We can get information on the correlations of variables by looking at their representation in the biplot: \n  #  a) salinity and humus:  same direction  -&gt;  positively correlated\n  #  b) angle1 and exposure:  opposite directions  -&gt;  negatively correlated\n  #  c) Polychaeta and Mollusca:  almost perpendicular  -&gt;  uncorrelated",
    "crumbs": [
      "Multivariate Statistics",
      "Exercise - Multivariate statistics"
    ]
  },
  {
    "objectID": "5A-Exercise.html#clustering",
    "href": "5A-Exercise.html#clustering",
    "title": "Exercise - Multivariate statistics",
    "section": "Clustering",
    "text": "Clustering\n\nK-means\nWe want to use clustering methods to define 3 environmental types. Use the function kmeans() with centers = 3 (number of clusters to be generated). Remember to set a seed; the choice of the first k centers is random.\n\nset.seed(467456)\ncl = #...\n\nCompare the three clusters with the result of the PCA using the following code that uses another plotting framework called ggplot2:\n\nlibrary(ggfortify)\nautoplot(pca_environment, colour = cl$cluster, size = 2, loadings = TRUE, loadings.colour = 'black',\n         loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = \"black\")\n\nThe colors of the points represent the three clusters. Answer the following question on elearning-extern (Q 4-5):\n\nHow is it possible that four observations in the middle (in red - if you have used the same seed) belong to a different cluster than the observations around them (in black)?\nWhich environmental variables are on average high within the black cluster (cluster 1)?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Create clusters using all environmental variables\nset.seed(467456)\ncl &lt;- kmeans(dat[,7:16], centers = 3) # 3 clusters to be generated\n\n# Plot\nlibrary(ggfortify)\nautoplot(pca_environment, colour = cl$cluster, size = 2, loadings = TRUE, loadings.colour = 'black',\n         loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = \"black\")\n\n\n\n\n\n\n\n\n# To understand why the four observations in the middle belong to a different cluster than the observations around them, we must take into account, that the biplot is only a 2-dimensional representation of a more-than-2 dimensional space. Therefore, the four points in the middle will be dissimilar to the points around them with respect to a variable that is not well represented by the first two PCA axes.\n\n# Environmental variables that are on average high within cluster 1:\n# -&gt; looking at the plot we find that exposure and grain size are high on average within cluster 1\n\n\n\n\n\n\nHierarchical clustering\nNow we want to hierarchically cluster the samples with respect to their species richness, as shown in the following plot:\n\n\n\n\n\n\n\n\n\nCreate the same plot using the functions:\n\nhclust()\n\nplot()\nas.phylo()\n\nLoad the package ape. Have a look at the help for hclust() to read what the function does and look at the examples for further help on how to use the function. Then have a look at what the function as.phylo() does. Now, color the labels using the variable week. You can do this using the argument “tip.color =”.\nChoose the correct statement(s) about the species richness and its sampling on elearning-extern(Q6). To be able to read the plot more easily, you can click Zoom in the top pane of the Plots window in RStudio.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nlibrary(ape)\n\nhc = hclust(dist(dat[, 2:5]))\nplot(as.phylo(hc), tip.color = dat$week)",
    "crumbs": [
      "Multivariate Statistics",
      "Exercise - Multivariate statistics"
    ]
  },
  {
    "objectID": "8-MachineLearning.html",
    "href": "8-MachineLearning.html",
    "title": "12  Machine Learning",
    "section": "",
    "text": "12.1 Regression\nWe call task with a numerical response variable a regression task:\nindices = sample.int(nrow(airquality), 50)\ntrain = airquality[-indices,]\ntest = airquality[indices,]\n\n# 1. Fit model on train data:\nmodel = randomForest(Ozone~., data = train)\n\n# 2. Make Predictions\npredictions = predict(model, newdata = test)\n\n# 3. Compare predictions with observed values:\n## the root mean squared error is commonly used as an error statistic:\nsqrt(mean((predictions-test$Ozone)**2))\n## [1] 20.41785\n# Or use a correlationf actor\ncor(predictions, test$Ozone)\n## [1] 0.9017803\n# Or Rsquared\ncor(predictions, test$Ozone)**2\n## [1] 0.8132077",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "8-MachineLearning.html#classification",
    "href": "8-MachineLearning.html#classification",
    "title": "12  Machine Learning",
    "section": "12.2 Classification",
    "text": "12.2 Classification\nWe call a task with a categorical response variable a classification task (see also multi-class and multi-label classification):\n\nindices = sample.int(nrow(iris), 50)\ntrain = iris[-indices,]\ntest = iris[indices,]\n\n# 1. Fit model on train data:\nmodel = randomForest(Species~., data = train)\n\n# 2. Make Predictions\npredictions = predict(model, newdata = test)\n\n# 3. Compare predictions with observed values:\nmean(predictions == test$Species) # accuracy\n## [1] 0.94\n\n96% accuracy, which means only 4% of the observations were wrongly classified by our random forest!\nVariable importance:\n\nvarImpPlot(model)\n\n\n\n\n\n\n\n\nPetal.Width and Petal.Length were the most important predictors!",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "6A-Exercise.html",
    "href": "6A-Exercise.html",
    "title": "13  Exercise",
    "section": "",
    "text": "13.1 birdabundance dataset\nlibrary(EcoData)\nlibrary(randomForest)\n## randomForest 4.7-1.2\n## Type rfNews() to see new features/changes/bug fixes.\nset.seed(42)\nindices = sample.int(nrow(birdabundance), 30)\ntrain = birdabundance[-indices,]\ntest = birdabundance[indices,]\n# ABUND is the response variable",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "6A-Exercise.html#birdabundance-dataset",
    "href": "6A-Exercise.html#birdabundance-dataset",
    "title": "13  Exercise",
    "section": "",
    "text": "Warning\n\n\n\nTask:\n\nFit random forest on train data\nPredict for test data\nCalculate R2\nDo the same with a lm and compare the predictive performance of both models\n\n\n\n\n\nClick here to see the solution\n\n\nrf = randomForest(ABUND~., data = train)\nm = lm(ABUND~., data = train)\n\npred1 = predict(rf, newdata = test)\npred2 = predict(m, newdata = test)\n\ncor(pred1, test$ABUND)**2\n## [1] 0.6596678\ncor(pred2, test$ABUND)**2\n## [1] 0.1983452\n\nRF clearly outperforms the linear regression model!",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "6A-Exercise.html#titantic-dataset",
    "href": "6A-Exercise.html#titantic-dataset",
    "title": "13  Exercise",
    "section": "13.2 titantic dataset",
    "text": "13.2 titantic dataset\n\nlibrary(EcoData)\nlibrary(randomForest)\nlibrary(dplyr)\n## \n## Anexando pacote: 'dplyr'\n## O seguinte objeto é mascarado por 'package:randomForest':\n## \n##     combine\n## Os seguintes objetos são mascarados por 'package:stats':\n## \n##     filter, lag\n## Os seguintes objetos são mascarados por 'package:base':\n## \n##     intersect, setdiff, setequal, union\nset.seed(42)\ntitanic_sub = titanic %&gt;% select(survived, age, pclass, sex, fare)\ntitanic_sub = titanic_sub[complete.cases(titanic_sub),]\n\nindices = sample.int(nrow(titanic_sub), 200)\ntrain = titanic_sub[-indices,]\ntest = titanic_sub[indices,]\n\n\n\n\n\n\n\nWarning\n\n\n\nTask:\n\nFit random forest on train data\nPredict for test data\nCalculate Accuracy\nDo the same with a glm (binomial) and compare the predictive performance of both models\nWhat is the most important variable?\n\n\n\n\n\nClick here to see the solution\n\n\nrf = randomForest(as.factor(survived)~., data = train)\nm = glm(survived~., data = train, family = binomial)\n\npred1 = predict(rf, newdata = test)\npred2 = predict(m, newdata = test, type = \"response\")\n\n# pred2 are probabilities, we have to change them to levels\npred2 = ifelse(pred2 &lt; 0.5, 0, 1)\n\nmean(pred1 == test$survived) # RF\n## [1] 0.82\nmean(pred2 == test$survived) # glm\n## [1] 0.765\n\nRF is better than the glm!\n\nvarImpPlot(rf)\n\n\n\n\n\n\n\n\nSex is the most important variable!",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "6A-Exercise.html#bias-variance-tradeoff",
    "href": "6A-Exercise.html#bias-variance-tradeoff",
    "title": "13  Exercise",
    "section": "13.3 Bias-variance tradeoff",
    "text": "13.3 Bias-variance tradeoff\nAn important concept of statistics and, in particular, ML is the concept of the bias-variance tradeoff - or in other words, finding the right complexity of the model. So how flexible should our model be so that it generalizes well to other/new observations. Many ML algorithms have complexity parameters (e.g. nodesize or mtry in RF) that control their complexity. Have a look at the following youtube video about the bias-variance tradeoff:\n\nLet’s see how we can control the complexity in the Random Forest algorithm:\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\n\npred = predict(rf, data)\nimportance(rf)\n##         IncNodePurity\n## Solar.R      17969.59\n## Wind         31978.36\n## Temp         34176.71\n## Month        10753.73\n## Day          15436.47\n#&gt;         IncNodePurity\n#&gt; Solar.R      17969.59\n#&gt; Wind         31978.36\n#&gt; Temp         34176.71\n#&gt; Month        10753.73\n#&gt; Day          15436.47\ncat(\"RMSE: \", sqrt(mean((data$Ozone - pred)^2)), \"\\n\")\n## RMSE:  9.507848\n#&gt; RMSE:  9.507848\n\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\nTry different values for the nodesize and mtry and describe how the predictions depend on these parameters. (randomForest(..., nodesize = ..., mtry = ...) (the exercise was taken from the ML course book)\n\n\n\n\nClick here to see the solution\n\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\n\nfor(nodesize in c(1, 5, 15, 50, 100)){\n  for(mtry in c(1, 3, 5)){\n    rf = randomForest(Ozone~., data = data, mtry = mtry, nodesize = nodesize)\n    \n    pred = predict(rf, data)\n    \n    plot(data$Temp, data$Ozone, main = paste0(\n        \"mtry: \", mtry, \"    nodesize: \", nodesize,\n        \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n    )\n    lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n  }\n}",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "6A-Exercise.html#deep-neural-networks",
    "href": "6A-Exercise.html#deep-neural-networks",
    "title": "13  Exercise",
    "section": "13.4 Deep Neural Networks",
    "text": "13.4 Deep Neural Networks\nTask description: Predict the spatial distribution of the African elephant. In Ecology we call such model a species distribution model.\n\nlibrary(EcoData)\n?elephant\n\nThe object elephant contains two subdatasets\n\nelephant$occurenceData contains presence / absence data as well as bioclim variables (environmental predictors) for the African elephant\nelephant$predictionData data with environmental predictors for spatial predictions\n\nThe environmental data consists of 19 environmental variables, called bio1 through bio19, which are public and globally available bioclimatic variables (see https://www.worldclim.org/data/bioclim.html for a description of the variables). For example, bio1 is the mean annual temperature. No understanding of these variables is required for the task, the only difficulty is that many of them are highly correlated because they encode similar information (e.g. there are several temperature variables).\nThe goal of this exercise is to fit a deep neural network based on the observed presence / absences, and then make new predictions of habitat suitability in space across Africa based on the fitted model. Thus, our workflow consists of two steps:\n\nbuilding and optimizing the predictive model, and\nusing the predictive model to make predictions on new data and visualizing the results.\n\nHere an example of how you could do this\nBuild predictive model:\n\n# Use subsample of data because too many observations and use the rest of data to validate our model\ntrain_indices = sample.int(nrow(elephant$occurenceData), 500)\ndf = elephant$occurenceData[train_indices, ]\n\nlibrary(cito)\nmodel = dnn(Presence~bio1, \n            data = df, \n            loss = 'binomial', \n            verbose = FALSE)\n\n\n\n\n\n\n\nplot(model)\n\n\n\n\n\n\n\n\nTo check the predictive power of the model for the observations we have not used to train the model ([-train_indices,])\n\nlibrary(pROC)\nauc(df$Presence[-train_indices], \n    predict(model, newdata = df[-train_indices,],type = \"response\"))\n## Warning in roc.default(response, predictor, auc = TRUE, ...): Deprecated use a\n## matrix as predictor. Unexpected results may be produced, please pass a numeric\n## vector.\n## Area under the curve: 0.7135\n\nThe AUC is a common measure of goodness of fit for binary classification.\n\n\n\n\n\n\nTasks\n\n\n\n\nDrop some of the highly correlated variables (don’t use all of them).\nChange architecture of the dnn (using the hidden=c(...)argument)\nChange the number of epochs and the learning rate (see documentation of dnn)\n\nMake new predictions\nThe data for making spatial predictions is in elephant$predictionData. This new dataset is not a data.frame but a raster object, which is a special data class for spatial data. You can plot one of the predictors in the following way.\n\nlibrary(sp)\nlibrary(raster)\nplot(elephant$predictionData$bio1)\n\n\n\n\n\n\n\n\nAs our new_data object is not a typical data.frame, we are not using the standard predict function for a dnn, which is ?predict.citodnn, but the predict function from the raster object (which internally transforms the new_data into a classical data.frame, pass then the data.frame to our model, and then transforms the output back to a raster object). Therefore, the syntax is slightly different to how we previously used predict().\n\npredictions =  predict(elephant$predictionData, model = model, type = \"response\")\nhead(as.data.frame(predictions))\n##        layer\n## 1 0.05545563\n## 2 0.05225735\n## 3 0.04916207\n## 4 0.04765212\n## 5 0.04485977\n## 6 0.04351700\n\nThe advantage of the raster object is that we can directly use it to create a map (the raster object has coordinates for each observation):\n\nspplot(predictions, colorkey = list(space = \"left\") )\n\n\n\n\n\n\n\n\nTask: play around with the DNN to improve predictive accuracy. You can check predictive accuracy by looking the AUC of the test data. When improving the predictive power of the model, does the map change?",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "6A-Exercise.html#ml-pipeline",
    "href": "6A-Exercise.html#ml-pipeline",
    "title": "13  Exercise",
    "section": "13.5 ML pipeline",
    "text": "13.5 ML pipeline\nIf you want to know more about a typical ML pipeline/workflow, read this chapter from the ML course!",
    "crumbs": [
      "Predictive Modeling",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "9-Design.html",
    "href": "9-Design.html",
    "title": "14  Design of experiments",
    "section": "",
    "text": "14.1 Question\nIn the beginning, there is the question. Let assume for simplicity that we want to know if y depends on x\n\\[\ny \\sim x  \n\\]\nTo answer this question, we plan to vary x and then take measurements of y.",
    "crumbs": [
      "Experimental Design",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Design of experiments</span>"
    ]
  },
  {
    "objectID": "9-Design.html#quality-of-measurements",
    "href": "9-Design.html#quality-of-measurements",
    "title": "14  Design of experiments",
    "section": "14.2 Quality of measurements",
    "text": "14.2 Quality of measurements\nThe first question to ask in this context is if my measurements are reliable. In particular, I may want to know if\n\n\nThe consideration of these two questions is often referred to as construct validity.\n\nDoes my measurement process really target the quantity that I want to measure, or is it only a proxy?\nWhat is the expected statistical (stochastic) error in my measurements, and what is the possible systematic error in my measurements\n\nThe first item may seem a bit odd, because one would think that we know what we measure. However, in many cases in ecological statistics and beyond, we do not measure directly the variable that we are interested in, but rather a proxy. So, for example, we want temperature on the plot, and we use temperature from a weather station 5 km away. Or, we want to look at functional diversity, but how can we exactly express this in terms of variables that we measure in the field.\nThe second questions relates to considering how much two measurements would differ if we do them repeatedly (stochastic), and how much measurements could be off systematically (e.g. because a method or instrument is systematically wrong, or because humans show particular biases). The values can often be read of instruments etc.\n\n\n\n\n\n\nDo not categorize continuous variables\n\n\n\nA common problem in measuring variables is the inappropriate categorization of continuous variables. The motivation for this is often measurement error. As an example, imagine we have to means to exactly estimate the weight of subjects, and therefore want to write down an estimate. Experimentators then often note down weight as low, middle, high, with the idea that a more exact assessment is not possible. This is almost always bad practice. The reason is the following: even if you have a high measurement error on the variable, the error is NEVER reduced by working with categories. Rather, we increase the error and reduce signal by the categorization. If we want to put people in weight categories, we can still do this later.\n\n\nWhen designing your experiments, try to find the best solution to minimize both problems before going on in the process.",
    "crumbs": [
      "Experimental Design",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Design of experiments</span>"
    ]
  },
  {
    "objectID": "9-Design.html#selection-of-treatments-levels-for-the-independent-predictor-variables",
    "href": "9-Design.html#selection-of-treatments-levels-for-the-independent-predictor-variables",
    "title": "14  Design of experiments",
    "section": "14.3 Selection of treatments levels for the independent (predictor) variables",
    "text": "14.3 Selection of treatments levels for the independent (predictor) variables\nIn an experimental study, we usually vary predictor variables systematically for a particular entity, e.g. a plant, a pot or a plot. This entity is called the experimental unit. Also observational studies have experimental units (the entities for which measurements are taken), but it usually not possible to completely control the variables. However, one usually has the option to make particular selections. Also in observational studies, it is key to ensure sufficient sufficient variation of the predictor variables across the experimental units to allow a meaningful statistical analysis.\n\n\nThe experimental unit is the entity that can be assigned a particular variable combination (e.g. treatment or control). Example: an individual plant, or a pot.\nWhen deciding on which treatments to describe, here a few things that you want to consider:\n\n14.3.1 Vary all variables independently\nA common problem in practice is that we have two variables, but their values change in a correlated way. Imagine we test for the presence of a species, but we have only warm dry and cold wet sites. We say the two variables a collinear. In this case we don’t know whether any observed effect is due to temperature or water availability. The bottom-line: if you want to separate two effects, the correlation between them must not be perfect - ideally, it would be zero, or failing that, as low as possible.\nIn an experiment, you should try to avoid such correlations by all means, i.e. set your treatments such that variables are not correlated!\n\n\n14.3.2 Interactions\nTo be able to detect interactions between variables, it’s not enough to vary all, you also need to have certain combinations. The buzzword here is (fractional) factorial designs. Basically, if you have two predictor variables, and you want an interaction, you need at least 4 treatments for the two variables: low low, low high, high low and high high. This is called a full factorial design.\nFor more complicated situations, R or other software packages can help you to find appropriate statistical designs\n\nlibrary(designr)\n\ndesign1 &lt;- \n  fixed.factor(\"Age\", levels=c(\"young\", \"old\")) +\n  fixed.factor(\"Material\",  levels=c(\"word\", \"image\"))\ndesign1\n## Factor design with 2 factor(s):\n##  - Fixed factor `Age` with 2 level(s) (young, old) and 1 replication(s)\n##  - Fixed factor `Material` with 2 level(s) (word, image) and 1 replication(s)\n## \n## Design matrix with 4 planned observations:\n## # A tibble: 4 × 2\n##   Age   Material\n##   &lt;fct&gt; &lt;fct&gt;   \n## 1 young word    \n## 2 old   word    \n## 3 young image   \n## 4 old   image\n\n\n\n14.3.3 Nonlinear effects\nThe connection of two points is a line. If you want to see whether the response to a variable is nonlinear, you therefore need more than two values of each variable. Common recommendation for a categorical treatment (with the goal of later running an ANOVA) is to take 4, because with 3 you often do not get a good idea about the shape. An alternative is to treat the variable as continuous, in which case you can just spread your points evenly across the range of the predictor.",
    "crumbs": [
      "Experimental Design",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Design of experiments</span>"
    ]
  },
  {
    "objectID": "9-Design.html#what-do-do-about-confounding-variables",
    "href": "9-Design.html#what-do-do-about-confounding-variables",
    "title": "14  Design of experiments",
    "section": "14.4 What do do about confounding variables",
    "text": "14.4 What do do about confounding variables\nIf we think there is a factor that could be confounding, we basically have three options\n\nBest: control the value of these factors. Either fix the value (preferred if we are not interested in this factor), else vary the value in a controlled way (see below).\nSecond best: randomize and measure them\nThird best: only randomize or only measure them\n\nRandomization means that we try to ensure that the confounding factor is not systematically correlated with the variable of interest (but can still cause problems with interactions and nonlinear relationships).\nMeasuring allows us to account for the effect in a statistical analysis, but cost power (see below) and, and we can’t measure everything.\n\n\nVariables that we include but that are not interesting to us are often called nuisance variables.\n\n\n\nIllustration of a randomized block design, the probably most widely used design on (observational) experiments to randomize the effect of unknown and unmeasured confounding variables. The idea of this design is that the unknown variables are likely correlated in space. By blocking all experimentally changing variables together, we avoid that they can become confounded with the unknown spatial variables.",
    "crumbs": [
      "Experimental Design",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Design of experiments</span>"
    ]
  },
  {
    "objectID": "9-Design.html#how-many-replicates",
    "href": "9-Design.html#how-many-replicates",
    "title": "14  Design of experiments",
    "section": "14.5 How many replicates?",
    "text": "14.5 How many replicates?\nWe said before that the significance level \\(\\alpha\\) is the probability of finding false positives. This is called the type I error. There is another error we can make: failing to find significance for a true effect. This is called the type II error, and the probability of finding an effect is called power.\n\n\nPower is the probability of finding significance for an effect if it’s there.\nFor standard statistical methods, power can be calculated. You have to look it up for your particular method, but in general assume that\n\nPower goes up with increasing effect size\nPower goes down with increasing variability in the response\n\nThis means that, unlike for the type I error which is fixed, calculation of power requires knowledge about the expected effect and the variability. This sounds really bad, but in most cases you can estimate from previous experience how much variation there will be, and in most cases you also know how big the effect has to be at least to be interesting. Based on that, you can then calculate how many samples you need.",
    "crumbs": [
      "Experimental Design",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Design of experiments</span>"
    ]
  },
  {
    "objectID": "9-Design.html#check-list-experimental-design",
    "href": "9-Design.html#check-list-experimental-design",
    "title": "14  Design of experiments",
    "section": "14.6 Check List experimental design",
    "text": "14.6 Check List experimental design\nFor each experiment, ask the following questions:\n\nClear, logically consistent question? Write it down. Read chapter about valid / good scientific questions in the lecture notes\nMake sure you have read and considered all the issues of validity discussed in the main lecture notes. Go through the checklist validity at the end of the section in the main lecture notes.\nDraft a design\n\nVary the variables that you need to measure to answer your questions. Decide if you are interested in main linear effects, or also nonlinear effects or interactions.\nWrite down potential confounding variables. Decide if they are better controlled, randomized or measured? Are you sure they are confounding (correlated to response AND one or several of the predictors)\nDefine the statistical hypothesis to be tested, including confounders. Write it down, as in \\(height \\sim age + soil * precipitation + precipitation^2\\).\nChoose how the variables will be varied in the experiment. Consider using software for this, e.g. for fractional factorial designs (in observational studies, you sometimes have limited control, but you can maybe estimate what variable combinations you will observe).\nBlocking - try to group different treatments / most different variable combinations together. The aim is that unknown / unmeasured variables are not correlated with your experimental variables (see pseudo-replication)\nDecide on the number of replicates. Make a guess for effect size and variability of the data, and either calculate or guess the number of replicates necessary to get sufficient power. What sufficient means depends on the field, but I would say you want to have a good chance to see an effect if it’s there, so a power of \\(&gt;80\\%\\) would be good.\n\nCheck design\n\nPlay through the processes of collecting your data: simulate it in your mind or in R, make up some data, write it down. Everything seems OK?\nPlay through the process of analyzing your data. Which method? Can you answer your question? Do a power analysis!\n\nRevise if necessary",
    "crumbs": [
      "Experimental Design",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Design of experiments</span>"
    ]
  },
  {
    "objectID": "10-DataWrangling.html",
    "href": "10-DataWrangling.html",
    "title": "15  Exercise - Data handling",
    "section": "",
    "text": "15.1 Exercise\nIn this exercise you will practice common steps of the data preparation procedure using a dataset that was gathered in a forest in Switzerland.\nThe main steps are as follows (to solve the tasks, please carefully read the detailed instructions and hints below):\nTo thoroughly check the dataset and perform the operations, you will need the following functions:\nRegarding the solutions, note we don’t expect you to come up with exactly this code - there are many ways to solve the problem. The solutions just give you an idea of a possible solution.",
    "crumbs": [
      "Data Science Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Exercise - Data handling</span>"
    ]
  },
  {
    "objectID": "10-DataWrangling.html#exercise",
    "href": "10-DataWrangling.html#exercise",
    "title": "15  Exercise - Data handling",
    "section": "",
    "text": "Read the provided datasets treedata.csv and species.csv to R.\nHave a look at the dataset properties.\nFind values that prevent a column you expect to be numeric to do so.\nDoes the dataset contain NA-values in height? How many?\nHave a look at the data: Check for implausible values. For now, remove these values.\nAdd the species names to the dataset.\nCreate a new dataset containing only trees with both, height and dbh measurements.\nAre there any correlations within the new dataset?\nRemove all trees with rem = F4 from the dataset\nCalculate mean dbh by species.\n\n\n\n\nread.csv(): Check the different options using ?read.csv\nstr(): Structure of an object\ntable(): Check the optional arguments!\nmerge(): Combine to data.frames\nas.character(): Change a vector’s class to character\nas.numeric(): Change a vector’s class to numeric.\n%in%\nis.na()\nmax()\nsummary()\ncomplete.cases()\ncor.test()\n%&gt;% and group_by() and summarize() from the dlyr package (check demonstration Part 2)\n\n\n\n15.1.1 1. Read data\nRead the provided datasets treedata.csv and species.csv to R. Use the option stringsAsFactors = FALSE in the function read.csv.\nRead the dataset treedata.csv and call it treedata. It has the following columns:\n\nspecies_code: tree species code\ndbh: diameter at breast height (1.3 m) [cm]\nheight: total height of the tree [m]. Measured only on a subset of trees.\nrem: coded values, containing remarks\n\nRead the dataset species.csv and call it species. The dataset consists of the following columns:\n\nspecies_code: tree species code (matching the one used in treedata.csv)\nspecies_scientific: Scientific species name\nspecies_english: English species name\n\n\n\n\nClick here to see the solution\n\n#### Solution\nFirst, you read in the file using read.csv. You have to specify the correct separator for your dataset, here this is “;”.\n\ntreedata &lt;- read.csv('Where/ever/you/put/it/treedata.csv', sep = \";\")\nspecies &lt;- read.csv('Hopefully/in/the/same/folder/species.csv', sep = \";\")\n\n\n\n\n15.1.2 2. Dataset properties\nHave a look at the properties of the dataset:\n\nWhich classes do the columns have?\nDid you expect these classes?\n\n\n\n\nClick here to see the solution\n\n#### Solution\nThe data.frame dat contains 4 columns: species, dbh (diameter at breast height [cm]), height [m] and rem, a remark. We expect the following formats:\n\n\n\ncolumn\nformat\n\n\n\n\nspecies\ncharacter\n\n\ndbh\nnumeric\n\n\nheight\nnumeric\n\n\nrem\nfactor\n\n\n\nUsing str we get an overview of the structure of a dataset:\n\nstr(treedata)\n## 'data.frame':    287 obs. of  4 variables:\n##  $ species_code: int  121 121 411 411 411 431 411 411 411 121 ...\n##  $ dbh         : chr  \"19.3\" \"21.3\" \"43\" \"25.8\" ...\n##  $ height      : num  NA NA 37.7 NA 34.4 44.4 NA NA NA NA ...\n##  $ rem         : chr  \"\" \"\" \"P7\" \"F2\" ...\n\nColumn dbh is a character, although we would have expected this one to be class numeric. This indicates, that a letter or special characters are in that column (we do not want these to be in there at all!).\n\n\n\n15.1.3 3. Turn character to numeric\nOne column, which we expect to be numeric, is of class character. Find the value causing this column to be character, set it to NA and turn the column into class numeric.\nNote that using ‘is.numeric()’ is not enough, if the column is a factor. This may be the case if you have used the option stringAsFactor = T in read.csv or an older version of R. Use a combination of ‘as.character()’ and ‘as.numeric()’ in that case.\n\n\n\nClick here to see the solution\n\n#### Solution\nWe suspect dbh to contain a character and we want to remove this. With the function ‘table()’, we can check all existing values in the column. There seems to be an ‘X’ in the data.\n\ntable(treedata$dbh)\n## \n## 10.1 10.2 10.4 10.6 10.7 10.9 11.2 11.4 11.5 11.9 12.3 12.5   13 13.2 13.3 13.4 \n##    1    2    2    1    1    1    2    1    1    1    1    2    1    1    1    1 \n## 13.8 13.9   14 14.4 14.8 14.9 15.2 15.4 15.5 15.8   16 16.2 16.4 16.6 16.8 17.1 \n##    3    1    1    6    1    1    3    1    1    1    1    1    1    1    4    1 \n## 17.2 17.4 17.5 17.6 17.8 17.9 18.1 18.2 18.3 18.7 18.8   19 19.1 19.2 19.3 19.4 \n##    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n## 19.5 19.8   20 20.2 20.4 20.7 20.8 20.9 2030 21.3 21.6 21.8 21.9   22 22.2 22.3 \n##    3    3    1    2    1    1    2    2    1    1    4    1    1    1    2    1 \n## 22.6 22.7 22.9 23.2 23.3 23.6 23.7 23.8   24 24.2 24.3 24.4 24.9   25 25.2 25.3 \n##    2    1    2    1    1    2    1    1    2    2    2    1    2    1    1    1 \n## 25.4 25.8   26 26.2 26.3 26.4 26.6 27.4 27.5 27.6 27.8 28.2 28.4 28.6 28.8 29.2 \n##    4    3    1    2    1    1    1    2    2    1    1    1    2    1    1    1 \n## 29.4 29.6 29.7 29.8 30.1 30.2 30.4 30.8 31.2 31.3 31.4 31.9   32 32.2 32.3 32.4 \n##    2    1    1    2    1    1    1    2    1    1    2    1    1    3    1    1 \n## 32.9   33 33.2 33.3 33.4 33.8 33.9 34.2 34.4 34.6 34.7 34.8   35 35.8 36.5 36.6 \n##    1    1    1    1    1    3    1    5    1    1    1    1    1    1    1    1 \n## 36.8 37.1 37.2 37.4 37.8 38.1 38.2 38.3 38.5 39.2 39.4 39.7 39.8    4  4.2  4.6 \n##    2    1    1    1    2    1    1    1    1    1    1    1    1    3    3    1 \n##  4.7   40 40.6 40.8 41.3 41.4 41.5 42.3 42.4   43 43.2 43.4 43.6 44.2 44.5 44.8 \n##    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n## 45.2 45.7 47.8   48 48.7 48.8   49 49.7 49.8  5.1  5.2  5.4  5.5  5.6  5.7  5.8 \n##    1    1    1    1    1    1    1    1    1    1    3    3    1    1    1    2 \n##  5.9 51.2  6.2  6.3  6.4  6.5  6.6  6.8  6.9    7  7.2  7.3  7.4  7.6  7.8  8.1 \n##    2    1    4    2    1    1    2    1    2    1    1    1    2    1    2    1 \n##  8.2  8.3  8.5  8.8  8.9    9  9.4  9.5  9.6  9.9    X \n##    3    2    1    1    2    1    1    2    2    1    1\n\nTo automatically search for characters, we can check if dbh contains a character that is part of LETTERS (capital letters) or letters:\n\ntreedata[treedata$dbh %in% LETTERS | treedata$dbh %in% letters,]\n##     species_code dbh height rem\n## 159          411   X   27.2  F4\n\nA more advanced option would be to use grepl. If we are using the solution above, we will only find the value if it is exactly one character. Things get a bit more complicated, if we have special characters, e.g, a *.\n\n\nx &lt;- rep(c(1, 3, 5, '*', 'AA', ',', 9), 2)\nx[grepl(\"^[A-Za-z]+$\", x, perl = T)]\n## [1] \"AA\" \"AA\"\nx[!grepl('[^[:punct:]]', x, perl =T)]\n## [1] \"*\" \",\" \"*\" \",\"\n\nWe want to set the X in dbh to NA (probably, this is a transcription error, so one could also have a look at the field forms…).\n\n\ntreedata$dbh[treedata$dbh == 'X'] &lt;- NA\nstr(treedata)\n## 'data.frame':    287 obs. of  4 variables:\n##  $ species_code: int  121 121 411 411 411 431 411 411 411 121 ...\n##  $ dbh         : chr  \"19.3\" \"21.3\" \"43\" \"25.8\" ...\n##  $ height      : num  NA NA 37.7 NA 34.4 44.4 NA NA NA NA ...\n##  $ rem         : chr  \"\" \"\" \"P7\" \"F2\" ...\n\nJust removing the ‘X’ does not turn a character to numeric! R provides the function as.numeric, which might be of use in this case.\n\ntreedata$dbh &lt;- as.numeric(treedata$dbh)\nhead(treedata$dbh)\n## [1] 19.3 21.3 43.0 25.8 38.5 36.8\n\n\n\n\n15.1.4 4. NA- values in height\nCheck for NA’s in the column height:\n\nHow many NA’s do appear in this column?\nDid you expect this column to contain NA’s? Why?\n\n\n\n\nClick here to see the solution\n\n#### Solution\n\nsummary(treedata)\n##   species_code        dbh              height           rem           \n##  Min.   :101.0   Min.   :   4.00   Min.   :  4.60   Length:287        \n##  1st Qu.:121.0   1st Qu.:  11.60   1st Qu.: 21.75   Class :character  \n##  Median :411.0   Median :  21.60   Median : 29.10   Mode  :character  \n##  Mean   :329.8   Mean   :  29.22   Mean   : 26.30                     \n##  3rd Qu.:411.0   3rd Qu.:  31.40   3rd Qu.: 32.62                     \n##  Max.   :920.0   Max.   :2030.00   Max.   :110.88                     \n##                  NA's   :1         NA's   :221\n\nsum(is.na(treedata$height))\n## [1] 221\ntable(is.na(treedata$height))\n## \n## FALSE  TRUE \n##    66   221\n\nnrow(treedata[is.na(treedata$height),])\n## [1] 221\ntable(treedata$height, useNA = 'ifany')\n## \n##    4.6    4.7    4.8    5.7    5.8    6.1    6.2    6.8    7.3    7.9   10.8 \n##      1      2      1      1      1      1      1      1      1      1      1 \n##   11.1   11.3   11.5   14.2   21.7   21.9     22   22.4   23.3   23.8   24.5 \n##      1      1      1      1      1      1      1      2      1      2      1 \n##   24.8   26.1   27.2   27.5   27.8   28.6     29   29.2   29.4   29.8   29.9 \n##      1      1      1      2      1      1      1      1      1      1      1 \n##   30.2   30.3   30.4   31.3   31.5   31.9     32   32.1   32.3   32.4   32.7 \n##      1      2      1      1      1      1      2      1      1      1      1 \n##   32.8   33.2   33.5   33.8   34.2   34.4   35.4   35.8   37.7   38.2   38.6 \n##      1      1      1      1      1      1      1      1      2      1      1 \n##     39   40.8   44.4 110.88   &lt;NA&gt; \n##      1      1      1      1    221\n\n\nThe dataset contains 221 NA.\nSince height has been measured only on a subset of the trees, we expect this column to contain NA-values.\n\n\n\n\n15.1.5 5. Implausible values\nThe dataset contains some implausible values (completely out of range!). Find and replace these values with NA.\n\n\n\nClick here to see the solution\n\n#### Solution\nWhat values are implausible? The dataset contains different species. A value which is plausible for species A might be implausible for species B. However, for now, we will not go into the details here.\nDo a visual check of the dataset\n\nboxplot(treedata$height, main = 'Height')\n\n\n\n\n\n\n\nboxplot(treedata$dbh, main ='DBH')\n\n\n\n\n\n\n\n\nmax(treedata$dbh, na.rm = T)\n## [1] 2030\nmax(treedata$height, na.rm = T)\n## [1] 110.88\n\ntreedata[treedata$dbh &gt; 500 & !is.na(treedata$dbh),]\n##     species_code  dbh height rem\n## 114          411 2030     NA  F2\ntreedata[treedata$height &gt; 50 & !is.na(treedata$height),]\n##     species_code  dbh height rem\n## 234          411 36.6 110.88\n\nThere seems to be one outlier in both datasets which can be seen as implausible: No tree is more than 100 m of height and no tree has a diameter &gt; 20 m (These values can be considered implausible for trees in Switzerland).\nWe will now remove these values from our dataset by setting them to NA - this might not always be the best option, there are also statistical models that can account for such errors!\n\ntreedata$dbh[treedata$dbh &gt; 500] &lt;- NA\ntreedata$height[treedata$height &gt; 50] &lt;- NA\n\nboxplot(treedata$dbh, main = 'DBH')\n\n\n\n\n\n\n\nboxplot(treedata$height, main = 'Height')\n\n\n\n\n\n\n\n\n\n\n\n15.1.6 6. Add species names\nAdd the species names from the species dataset to the treedata dataset.\nHint: ?merge\n\n\n\nClick here to see the solution\n\n#### Solution\nUse merge to add species names to the dataset treedata. For adding only one column, match is a helpful function.\n\ntreedata &lt;- merge(treedata, species, by = \"species_code\")\nhead(treedata)\n##   species_code  dbh height rem         species_scientific species_english\n## 1          101  8.1    5.7     Picea abies (L.) H. Karst.   Norway Spruce\n## 2          101 10.4     NA     Picea abies (L.) H. Karst.   Norway Spruce\n## 3          101  5.2     NA  S0 Picea abies (L.) H. Karst.   Norway Spruce\n## 4          101  9.6     NA     Picea abies (L.) H. Karst.   Norway Spruce\n## 5          101  8.2    6.2     Picea abies (L.) H. Karst.   Norway Spruce\n## 6          101  7.4    6.1     Picea abies (L.) H. Karst.   Norway Spruce\n\n# Alternative using match():\n# treedata$species_english &lt;- species$species_english[match(treedata$species_code, species$species_code)]\n\n\n\n\n15.1.7 7. Remove F4\nThe remark F4 indicates, that the dbh-measurements might be flawed. Remove these trees from treedata.\n\n\n\nClick here to see the solution\n\n#### Solution\n\ntreedata &lt;- treedata[!treedata$rem %in% 'F4',]\n\n\n\n\n15.1.8 8. Select trees that contain both dbh and height measurements\nSubset treedata to trees where both height and dbh measurements were carried out. Call the result dbh_height.\n\n\n\nClick here to see the solution\n\n#### Solution\nThis can be done using complete.cases using\n\ndbh_height &lt;- treedata[complete.cases(treedata$dbh, treedata$height),]\n\n\n\n\n15.1.9 9. Correlations?\nCheck for correlations in the dataset dbh_height. Use a test and plot height vs dbh.\n\n\n\nClick here to see the solution\n\n#### Solution\n\ncor.test(dbh_height$dbh\n         , dbh_height$height)\n## \n##  Pearson's product-moment correlation\n## \n## data:  dbh_height$dbh and dbh_height$height\n## t = 13.147, df = 47, p-value &lt; 2.2e-16\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  0.8066074 0.9348068\n## sample estimates:\n##       cor \n## 0.8866893\n\nplot(dbh_height$dbh\n     , dbh_height$height\n     , ylab = 'Height'\n     , xlab = 'DBH')\n\n\n\n\n\n\n\n\n\n\n\n15.1.10 10. Export a plot\nWhen generating a plot within Rstudio, it is by default shown in the Plots window. However, sometimes we want to export a plot and store it in a file for use elsewhere. There are graphics devices that support different formats, such as PDF (vector-based) or PNG (pixel-based). The basic workflow is to start a graphics device and tell it where to store the output file, then create the plot, and finally close the device again. Only if you close the device properly will a valid file be generated. For example, to create a PNG file:\n\n# Open graphics device\npng(filename = \"/path/to/store/plot.png\",  # where to store the output file\n    width = 620,  # width of the plot in pixels\n    height = 480, # height of the plot in pixels\n    bg = \"white\") # background color\n\n# Plot something\nplot(1:5,rnorm(5), type ='b', col=1:5, pch = 19 )\n\n# Close the device to finish file writing\ndev.off()\n\nNow, export one of the plots that we generated above to a PNG file, using your favorite background color. (You can also try and use another device, e.g. pdf(), just make sure to use the matching file extension in the file name.)\n\n\nClick here to see the solution\n\n#### Solution\n\n# Open device\npng(filename = \"plot.png\", # \"/path/to/store/plot.png\",  # where to store the output file\n    width = 620,  # width of the plot in pixels\n    height = 480, # height of the plot in pixels\n    bg = \"lightskyblue2\") # background color\n\n# Scatterplot from section 9:\nplot(dbh_height$dbh\n     , dbh_height$height\n     , ylab = 'Height'\n     , xlab = 'DBH'\n     , main = 'Trees')\n\n# Close the device to finish file writing\ndev.off()\n## quartz_off_screen \n##                 2\n\n\n\n\n15.1.11 11. Calculate mean dbh per species.\nFor calculating summary statistics, the dplyr package is really helpful. It is part of the tidyverse environment, which was designed for data science. If you work with large and complex datasets or if you have to derive many new variables, I really recommend that you have a look at this. Also, the syntax for dplyr is quite intuitive.\nFor this exercise, use the dplyr package to calculate mean dbh per species. If you need help on this, check the demonstration of Part 2 where we calculated summary statistics for groups using the dplyr package!\n\n\nClick here to see the solution\n\n#### Solution\n\nlibrary(dplyr)\n## \n## Anexando pacote: 'dplyr'\n## Os seguintes objetos são mascarados por 'package:stats':\n## \n##     filter, lag\n## Os seguintes objetos são mascarados por 'package:base':\n## \n##     intersect, setdiff, setequal, union\ntreedata %&gt;% \n  group_by(species_english) %&gt;% \n  summarize(N = n(),\n            meanDBH = mean(dbh, na.rm = T), \n            sdDBH = sd(dbh, na.rm = T))\n## # A tibble: 10 × 4\n##    species_english         N meanDBH  sdDBH\n##    &lt;chr&gt;               &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Beech                 131   29.6  10.1  \n##  2 Commom Yew              2   18.8   0.212\n##  3 European Ash           12   30.6   4.14 \n##  4 European Silver Fir    75   11.8   5.55 \n##  5 Ivy                     6    5.13  0.927\n##  6 Little Leaf Linden      4   13.3   9.88 \n##  7 Norway Maple            9   28.2  11.1  \n##  8 Norway Spruce          15    7.77  1.89 \n##  9 Scotch Elm              1   17.9  NA    \n## 10 Sycamore               12   24.0   3.91",
    "crumbs": [
      "Data Science Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Exercise - Data handling</span>"
    ]
  },
  {
    "objectID": "11-Reproducibility.html",
    "href": "11-Reproducibility.html",
    "title": "16  Reproducibility and project organization",
    "section": "",
    "text": "16.1 Reproducibility\nReproducibility means that each step of your analysis is repeatable. Experience shows that it is not as trivial as it sounds to ensure reproducibility. Here some hints for making your data analysis reproducible",
    "crumbs": [
      "Data Science Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Reproducibility and project organization</span>"
    ]
  },
  {
    "objectID": "11-Reproducibility.html#reproducibility",
    "href": "11-Reproducibility.html#reproducibility",
    "title": "16  Reproducibility and project organization",
    "section": "",
    "text": "Once you have your raw data produced, NEVER change it. Store it in a save location, make a backup, and never touch it again\nTypically you will have to do some cleaning, renaming etc. before the data analysis. If possible at all, make this through a script (e.g. R, python, perl). Store the script with the analysis.\nUse a version control system for your code, and note for each output the revision number that the output was produced with.\nWhen running the analysis, store the random seed and the settings of your computer to ensure reproducibility. In R, the easiest way to do this is to set the random seed by random.seed(123), and store the results of sessionInfo() which provides you with the version numbers of all the packages that you use\nThink about running your code within an reporting environment such as Rmd, qmd or sweave",
    "crumbs": [
      "Data Science Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Reproducibility and project organization</span>"
    ]
  },
  {
    "objectID": "11-Reproducibility.html#project-organization",
    "href": "11-Reproducibility.html#project-organization",
    "title": "16  Reproducibility and project organization",
    "section": "16.2 Project organization",
    "text": "16.2 Project organization\n\nAll code / data under one main folder, put this folder under version control\nCreate an RStudio project in the main folder\nSensible order structure below main folder\nUse only relative paths so that the project can be moved across computers",
    "crumbs": [
      "Data Science Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Reproducibility and project organization</span>"
    ]
  },
  {
    "objectID": "13A-regressions.html",
    "href": "13A-regressions.html",
    "title": "Appendix A — Overview regression models",
    "section": "",
    "text": "A.1 Linear regression\nNormally distributed response:\ndata(airquality)\nstr(airquality)\n## 'data.frame':    153 obs. of  6 variables:\n##  $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...\n##  $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...\n##  $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n##  $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ...\n##  $ Month  : int  5 5 5 5 5 5 5 5 5 5 ...\n##  $ Day    : int  1 2 3 4 5 6 7 8 9 10 ...\nsummary(airquality)\n##      Ozone           Solar.R           Wind             Temp      \n##  Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00  \n##  1st Qu.: 18.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00  \n##  Median : 31.50   Median :205.0   Median : 9.700   Median :79.00  \n##  Mean   : 42.13   Mean   :185.9   Mean   : 9.958   Mean   :77.88  \n##  3rd Qu.: 63.25   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00  \n##  Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00  \n##  NA's   :37       NA's   :7                                       \n##      Month            Day      \n##  Min.   :5.000   Min.   : 1.0  \n##  1st Qu.:6.000   1st Qu.: 8.0  \n##  Median :7.000   Median :16.0  \n##  Mean   :6.993   Mean   :15.8  \n##  3rd Qu.:8.000   3rd Qu.:23.0  \n##  Max.   :9.000   Max.   :31.0  \n## \npairs(airquality)\n\n\n\n\n\n\n\n\nplot(Ozone ~ Temp, data = airquality)\n\nfit &lt;- lm(Ozone ~ Temp, data = airquality)\nabline(fit, col = \"red\")\n\n\n\n\n\n\n\nsummary(fit)\n## \n## Call:\n## lm(formula = Ozone ~ Temp, data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.729 -17.409  -0.587  11.306 118.271 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -146.9955    18.2872  -8.038 9.37e-13 ***\n## Temp           2.4287     0.2331  10.418  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 23.71 on 114 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.4877, Adjusted R-squared:  0.4832 \n## F-statistic: 108.5 on 1 and 114 DF,  p-value: &lt; 2.2e-16\nlibrary(effects)\n## Carregando pacotes exigidos: carData\n## lattice theme set by effectsTheme()\n## See ?effectsTheme for details.\nplot(allEffects(fit))\n\n\n\n\n\n\n\nplot(allEffects(fit, partial.residuals = T))\n\n\n\n\n\n\n\n\npairs(airquality)\n\n\n\n\n\n\n\nfit &lt;- lm(Ozone ~ Temp + Wind + Solar.R , data = airquality)\nsummary(fit)\n## \n## Call:\n## lm(formula = Ozone ~ Temp + Wind + Solar.R, data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.485 -14.219  -3.551  10.097  95.619 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -64.34208   23.05472  -2.791  0.00623 ** \n## Temp          1.65209    0.25353   6.516 2.42e-09 ***\n## Wind         -3.33359    0.65441  -5.094 1.52e-06 ***\n## Solar.R       0.05982    0.02319   2.580  0.01124 *  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 21.18 on 107 degrees of freedom\n##   (42 observations deleted due to missingness)\n## Multiple R-squared:  0.6059, Adjusted R-squared:  0.5948 \n## F-statistic: 54.83 on 3 and 107 DF,  p-value: &lt; 2.2e-16\nplot(allEffects(fit, partial.residuals = T))\n\n\n\n\n\n\n\n\n# optional scale to standardize effect sizes \n# scale command by default divides by standard deviation and \n# subracts the mean\nfit &lt;- lm(Ozone ~ scale(Temp) + scale(Wind) + scale(Solar.R), data = airquality)\nsummary(fit)\n## \n## Call:\n## lm(formula = Ozone ~ scale(Temp) + scale(Wind) + scale(Solar.R), \n##     data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -40.485 -14.219  -3.551  10.097  95.619 \n## \n## Coefficients:\n##                Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)      42.255      2.011  21.015  &lt; 2e-16 ***\n## scale(Temp)      15.638      2.400   6.516 2.42e-09 ***\n## scale(Wind)     -11.744      2.305  -5.094 1.52e-06 ***\n## scale(Solar.R)    5.387      2.088   2.580   0.0112 *  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 21.18 on 107 degrees of freedom\n##   (42 observations deleted due to missingness)\n## Multiple R-squared:  0.6059, Adjusted R-squared:  0.5948 \n## F-statistic: 54.83 on 3 and 107 DF,  p-value: &lt; 2.2e-16\n\n# centering is NOT OPTIONAL = you have to centering if using numeric\n# variables with interactions (important thing is to center)\n\nfit &lt;- lm(Ozone ~ Temp * Wind , data = airquality)\nsummary(fit)\n## \n## Call:\n## lm(formula = Ozone ~ Temp * Wind, data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -39.906 -13.048  -2.263   8.726  99.306 \n## \n## Coefficients:\n##               Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -248.51530   48.14038  -5.162 1.07e-06 ***\n## Temp           4.07575    0.58754   6.937 2.73e-10 ***\n## Wind          14.33503    4.23874   3.382 0.000992 ***\n## Temp:Wind     -0.22391    0.05399  -4.147 6.57e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 20.44 on 112 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.6261, Adjusted R-squared:  0.6161 \n## F-statistic: 62.52 on 3 and 112 DF,  p-value: &lt; 2.2e-16\nplot(allEffects(fit, partial.residuals = T))\n\n\n\n\n\n\n\n# main effects change when changing * to +\n\nfit &lt;- lm(Ozone ~ scale(Temp) * scale(Wind)  , data = airquality)\nsummary(fit)\n## \n## Call:\n## lm(formula = Ozone ~ scale(Temp) * scale(Wind), data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -39.906 -13.048  -2.263   8.726  99.306 \n## \n## Coefficients:\n##                         Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)               38.008      2.114  17.983  &lt; 2e-16 ***\n## scale(Temp)               17.474      2.213   7.897 2.13e-12 ***\n## scale(Wind)              -10.935      2.186  -5.003 2.11e-06 ***\n## scale(Temp):scale(Wind)   -7.467      1.800  -4.147 6.57e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 20.44 on 112 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.6261, Adjusted R-squared:  0.6161 \n## F-statistic: 62.52 on 3 and 112 DF,  p-value: &lt; 2.2e-16\n# main effects do not change when changing * to +\n# in this case, can interpret main effects as the average \n# effect (e.g. of Temp, Wind) in the range of the data \n\n# residual checks\nfit &lt;- lm(Ozone ~ scale(Temp) + scale(Wind)  , data = airquality)\nsummary(fit)\n## \n## Call:\n## lm(formula = Ozone ~ scale(Temp) + scale(Wind), data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -41.251 -13.695  -2.856  11.390 100.367 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   41.859      2.030  20.618  &lt; 2e-16 ***\n## scale(Temp)   17.418      2.366   7.362 3.15e-11 ***\n## scale(Wind)  -10.764      2.337  -4.607 1.08e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 21.85 on 113 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.5687, Adjusted R-squared:  0.5611 \n## F-statistic:  74.5 on 2 and 113 DF,  p-value: &lt; 2.2e-16\nplot(allEffects(fit, partial.residuals = T))\n## Warning in Analyze.model(focal.predictors, mod, xlevels, default.levels, : the\n## predictors scale(Temp), scale(Wind) are one-column matrices that were converted\n## to vectors\n## Warning in Analyze.model(focal.predictors, mod, xlevels, default.levels, : the\n## predictors scale(Temp), scale(Wind) are one-column matrices that were converted\n## to vectors\n\n\n\n\n\n\n\n\npar(mfrow = c(2,2))\nplot(fit)\n\n\n\n\n\n\n\n\n# doesn't really look optimal, maybe a bit of nonlinearity\n# and residuals don't look normal\n\nfit &lt;- lm(sqrt(Ozone) ~ scale(Temp) * scale(Wind)  , data = airquality)\nsummary(fit)\n## \n## Call:\n## lm(formula = sqrt(Ozone) ~ scale(Temp) * scale(Wind), data = airquality)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -3.0599 -0.9389 -0.0266  0.8763  5.1240 \n## \n## Coefficients:\n##                         Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)               5.7810     0.1505  38.425  &lt; 2e-16 ***\n## scale(Temp)               1.4465     0.1575   9.184 2.53e-15 ***\n## scale(Wind)              -0.7054     0.1556  -4.534 1.46e-05 ***\n## scale(Temp):scale(Wind)  -0.4355     0.1282  -3.398 0.000941 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.455 on 112 degrees of freedom\n##   (37 observations deleted due to missingness)\n## Multiple R-squared:  0.651,  Adjusted R-squared:  0.6417 \n## F-statistic: 69.64 on 3 and 112 DF,  p-value: &lt; 2.2e-16\n\npar(mfrow = c(2,2))\nplot(fit)\n\n\n\n\n\n\n\n\n# summary(aov(fit))\n# too difficult for you to interpret probably, better stay with \n# effect sizes\n\n# categorical variables \npar(mfrow = c(1,1))\n\nboxplot(weight ~ group, data = PlantGrowth, notch = T)\n## Warning in (function (z, notch = FALSE, width = NULL, varwidth = FALSE, :\n## alguns entalhes saíram fora das dobradiças ('caixa'): talvez definir\n## notch=FALSE\n\n\n\n\n\n\n\nfit &lt;- lm(weight ~ group, data = PlantGrowth)\nsummary(fit)\n## \n## Call:\n## lm(formula = weight ~ group, data = PlantGrowth)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.0710 -0.4180 -0.0060  0.2627  1.3690 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   5.0320     0.1971  25.527   &lt;2e-16 ***\n## grouptrt1    -0.3710     0.2788  -1.331   0.1944    \n## grouptrt2     0.4940     0.2788   1.772   0.0877 .  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.6234 on 27 degrees of freedom\n## Multiple R-squared:  0.2641, Adjusted R-squared:  0.2096 \n## F-statistic: 4.846 on 2 and 27 DF,  p-value: 0.01591\n\nsummary(aov(fit))\n##             Df Sum Sq Mean Sq F value Pr(&gt;F)  \n## group        2  3.766  1.8832   4.846 0.0159 *\n## Residuals   27 10.492  0.3886                 \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nsummary(aov(weight ~ group, data = PlantGrowth))\n##             Df Sum Sq Mean Sq F value Pr(&gt;F)  \n## group        2  3.766  1.8832   4.846 0.0159 *\n## Residuals   27 10.492  0.3886                 \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Overview regression models</span>"
    ]
  },
  {
    "objectID": "13A-regressions.html#logistic-regression",
    "href": "13A-regressions.html#logistic-regression",
    "title": "Appendix A — Overview regression models",
    "section": "A.2 Logistic regression",
    "text": "A.2 Logistic regression\n\nlibrary(carData)\ndata(TitanicSurvival)\nstr(TitanicSurvival)\n## 'data.frame':    1309 obs. of  4 variables:\n##  $ survived      : Factor w/ 2 levels \"no\",\"yes\": 2 2 1 1 1 2 2 1 2 1 ...\n##  $ sex           : Factor w/ 2 levels \"female\",\"male\": 1 2 1 2 1 2 1 2 1 2 ...\n##  $ age           : num  29 0.917 2 30 25 ...\n##  $ passengerClass: Factor w/ 3 levels \"1st\",\"2nd\",\"3rd\": 1 1 1 1 1 1 1 1 1 1 ...\n\nTitanicReduced = TitanicSurvival[complete.cases(TitanicSurvival), ]\n\nfit &lt;- glm(survived ~ age + sex + passengerClass , family = binomial, \n           data = TitanicReduced)\n\nsummary(fit)\n## \n## Call:\n## glm(formula = survived ~ age + sex + passengerClass, family = binomial, \n##     data = TitanicReduced)\n## \n## Coefficients:\n##                    Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)        3.522074   0.326702  10.781  &lt; 2e-16 ***\n## age               -0.034393   0.006331  -5.433 5.56e-08 ***\n## sexmale           -2.497845   0.166037 -15.044  &lt; 2e-16 ***\n## passengerClass2nd -1.280570   0.225538  -5.678 1.36e-08 ***\n## passengerClass3rd -2.289661   0.225802 -10.140  &lt; 2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 1414.62  on 1045  degrees of freedom\n## Residual deviance:  982.45  on 1041  degrees of freedom\n## AIC: 992.45\n## \n## Number of Fisher Scoring iterations: 4\n\nplot(allEffects(fit))\n\n\n\n\n\n\n\n\nlibrary(DHARMa)\n## This is DHARMa 0.4.7. For overview type '?DHARMa'. For recent changes, type news(package = 'DHARMa')\nres &lt;- simulateResiduals(fit)\nplot(res)\n\n\n\n\n\n\n\n\n# not perfect, let's see variables against predictor\nplotResiduals(res, TitanicReduced$age)\n\n\n\n\n\n\n\nplotResiduals(res, TitanicReduced$passengerClass)\n\n\n\n\n\n\n\n\n# nothing to find here - maybe play around with this yourself \n# and see if you find the solution - as a hint: when\n# including interactions between the variables, you will\n# find significant interactions and a nicely fitting model\n\n# if you have k/n data (e.g. k of n people in the same group survived), \n# you would specify it like this\n\n# fit &lt;- glm(cbind(survived, notSurvived) ~ pred , family = binomial, data = myData)\n# fit &lt;- glm(survived ~ pred , family = binomial, data = myData, weight = totalTrials)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Overview regression models</span>"
    ]
  },
  {
    "objectID": "13A-regressions.html#poisson-regression",
    "href": "13A-regressions.html#poisson-regression",
    "title": "Appendix A — Overview regression models",
    "section": "A.3 Poisson regression",
    "text": "A.3 Poisson regression\n\nlibrary(glmmTMB)\n## Warning in check_dep_version(dep_pkg = \"TMB\"): package version mismatch: \n## glmmTMB was built with TMB package version 1.9.15\n## Current TMB package version is 1.9.17\n## Please re-install glmmTMB from source or restore original 'TMB' package (see '?reinstalling' for more information)\n\ndata(\"Owls\")\nstr(Owls)\n## 'data.frame':    599 obs. of  8 variables:\n##  $ Nest              : Factor w/ 27 levels \"AutavauxTV\",\"Bochet\",..: 1 1 1 1 1 1 1 1 1 1 ...\n##  $ FoodTreatment     : Factor w/ 2 levels \"Deprived\",\"Satiated\": 1 2 1 1 1 1 1 2 1 2 ...\n##  $ SexParent         : Factor w/ 2 levels \"Female\",\"Male\": 2 2 2 2 2 2 2 1 2 1 ...\n##  $ ArrivalTime       : num  22.2 22.4 22.5 22.6 22.6 ...\n##  $ SiblingNegotiation: int  4 0 2 2 2 2 18 4 18 0 ...\n##  $ BroodSize         : int  5 5 5 5 5 5 5 5 5 5 ...\n##  $ NegPerChick       : num  0.8 0 0.4 0.4 0.4 0.4 3.6 0.8 3.6 0 ...\n##  $ logBroodSize      : num  1.61 1.61 1.61 1.61 1.61 ...\n\nfit &lt;- glm(SiblingNegotiation ~ SexParent + offset(log(BroodSize)) , \n           family= poisson, data = Owls)\n\nsummary(fit)\n## \n## Call:\n## glm(formula = SiblingNegotiation ~ SexParent + offset(log(BroodSize)), \n##     family = poisson, data = Owls)\n## \n## Coefficients:\n##               Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)    0.34042    0.02605  13.065  &lt; 2e-16 ***\n## SexParentMale  0.13714    0.03272   4.191 2.78e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for poisson family taken to be 1)\n## \n##     Null deviance: 4128.3  on 598  degrees of freedom\n## Residual deviance: 4110.5  on 597  degrees of freedom\n## AIC: 5795.3\n## \n## Number of Fisher Scoring iterations: 5\n\n# note: in Poisson GLMs, offset(log(time)) standardizes to observation time / area\n\nlibrary(DHARMa)\nres &lt;- simulateResiduals(fit)\nplot(res)\n## DHARMa:testOutliers with type = binomial may have inflated Type I error rates for integer-valued distributions. To get a more exact result, it is recommended to re-run testOutliers with type = 'bootstrap'. See ?testOutliers for details\n\n\n\n\n\n\n\n\n# Discussion how to improve the fit for this model in https://cran.r-project.org/web/packages/DHARMa/vignettes/DHARMa.html#owl-example-count-data",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Overview regression models</span>"
    ]
  },
  {
    "objectID": "13A-regressions.html#multinomial-regression",
    "href": "13A-regressions.html#multinomial-regression",
    "title": "Appendix A — Overview regression models",
    "section": "A.4 Multinomial regression",
    "text": "A.4 Multinomial regression\nFor multinomial regression, see page 69 of our Essential Statistics lecture notes https://www.dropbox.com/s/fxozlnzd5ntfntk/EssentialStatistics.pdf?dl=0",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Overview regression models</span>"
=======
    "objectID": "5-MultipleRegression.html",
    "href": "5-MultipleRegression.html",
    "title": "9  Multiple regression",
    "section": "",
    "text": "9.1 Confounder\nConfounders have effects on the response and another predictor.\nClimate = runif(100)\nTemp = Climate + rnorm(100, sd = 0.2)\nGrowth = 0.5*Temp - 1.0*Climate + rnorm(100, sd = 0.2)\n\nsummary(lm(Growth~Temp))\n## \n## Call:\n## lm(formula = Growth ~ Temp)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.55719 -0.18748 -0.01354  0.18858  0.59337 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) -0.16604    0.04228  -3.927  0.00016 ***\n## Temp        -0.19311    0.06602  -2.925  0.00428 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.2472 on 98 degrees of freedom\n## Multiple R-squared:  0.0803, Adjusted R-squared:  0.07091 \n## F-statistic: 8.556 on 1 and 98 DF,  p-value: 0.004279\nsummary(lm(Growth~Temp+Climate)) # correct effects!!\n## \n## Call:\n## lm(formula = Growth ~ Temp + Climate)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.41912 -0.13228 -0.00661  0.12988  0.41630 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)  0.009234   0.038203   0.242     0.81    \n## Temp         0.568083   0.102652   5.534 2.66e-07 ***\n## Climate     -1.088041   0.127964  -8.503 2.27e-13 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.1881 on 97 degrees of freedom\n## Multiple R-squared:  0.473,  Adjusted R-squared:  0.4622 \n## F-statistic: 43.54 on 2 and 97 DF,  p-value: 3.205e-14\nIdentifying confounders is the most important challenge in observational studies: For example, several studies showed that overweight adults have lower mortality. However, another study shows that these earlier results might have come up due to confounding: smoking!\nConfounders can even lead to observed correlations where in reality there is no such correlation. This is called spurious correlation.",
    "crumbs": [
      "Regression Analysis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Multiple regression</span>"
>>>>>>> Stashed changes
    ]
  }
]