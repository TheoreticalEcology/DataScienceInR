---
output: html_document
editor_options:
  chunk_output_type: console
---

```{r, include=FALSE}
set.seed(42)
```


# Summary statistics

**Numeric values**

Continuous measurements such as size, weight, time, length, etc.

Typical summary statistics:

-   quantiles (% of data below/over quantile): e.g. median == 50% quantile, 50% of the data below and 50% over

-   Central moments:

    -   First moment: Mean

    -   Second moment: standard deviation, measure of spread

    -   Third moment: skewness, measure of symmetry

    -   Fourth moment: kurtosis, measure of peakedness

```{r}
#| code-fold: true
set.seed(10)
A = scale(exp(rnorm(1000,sd = 0.5)))
hist(A, main = "")
abline(v = quantile(A, probs = c(0.05, 0.5, 0.95)), col = "#AA0366", lwd = 1.4)
text(quantile(A, probs = c(0.05, 0.5, 0.95)), 
     y = 500, labels = c("0.05Q", "0.5Q", "0.95Q"), pos = 3, xpd = NA)
abline(v = mean(A), col = "#AA0366", lwd = 1.4)
text(x = mean(A), y = 530, labels="Mean", pos = 3, xpd = NA)
```

How to calculate them in R:

```{r}
mean(airquality$Temp)
median(airquality$Temp)
min(airquality$Temp)
max(airquality$Temp)
range(airquality$Temp)
var(airquality$Temp)
sd(airquality$Temp)
#the same:
sqrt(var(airquality$Temp))
```

Quantiles and mean:

```{r}
quantile(airquality$Temp)
mean(airquality$Ozone, na.rm = TRUE) #na.rm: removes NAs
```

::: {.callout-tip appearance="default" collapse="true"}
## How to look for NAs

How to look for NA values:

```{r}
airquality[is.na(airquality$Ozone),] 
# or
summary(airquality)
```
:::

We can visualize variables with two plots, a histogram and boxplot:

```{r}
hist(airquality$Temp)
boxplot(airquality$Temp)
```

In a box plot, the box ranges from 0.25 to 0.75 quantiles (the interquartile range, IQR), with the median as the thick line in the box. The whiskers (the other two vertical lines) are either the min/max values or the distance to 1.5\*IQR (and points outside this range are considered outliers).

**Categorical data**

How often do different events occur?

```{r}
table(mtcars$gear)
```

**Numeric with categorical**

We can also calculate summary statistics per level of a categorical variable for a numerical variable of interest. We can do with base R but it is easier with the `dplyr` package:

```{r}
library(dplyr) # uses tidyverse syntax

air_grouped <- airquality %>% # define dataset to be summarised
  group_by(Month) %>% # define grouping factor (note that you don't need to tell which dataset to look in here (no $))
  summarise(meanwind = mean(Wind), 
            meansolar = mean(Solar.R), 
            maxOzone = max(Ozone), 
            varTemp = var(Temp)) # define which summary statistics you want to be calculated
air_grouped
```

::: {.callout-note appearance="default" collapse="true"}
## dplyr and tidyverse

The `dplyr` package is part of a big software environment called tidyverse. Unique features of the tidyverse are the pipe `%>%` operator and `tibble` objects.

-   The `%>%` operator:

    Applying several functions in sequence on an object often results in uncountable/confusing number of round brackets:

    ```{r}
    max(mean(range(c(5, 3, 2, 1))))
    ```

    The pipe operator simplifies that by saying "apply the next function on the result of the current function":

    ```{r}
    c(5, 3, 2, 1) %>% range %>% mean %>% max
    ```

    Which is easier to write, read, and to understand!

-   `tibble` objects are just an extension of data.frames. In the course we will use mostly data.frames, so it is better to transform the tibbles back to data.frames:

    ```{r}
    class(air_grouped)
    air_grouped = as.data.frame(air_grouped)
    class(air_grouped)
    ```
:::

## Correlation

If two variables A and B are related, we say that they are correlated (correlation != causality!!). We can calculate the magnitude of this relatedness with correlation factors. Correlation factors are normalized covariances (two variables have two variances, how they vary independent of each other, and they share a covariance, how much they vary together) are in the range of $[-1,1]$. The Pearson's correlation coefficient/factor can be calculated by:

$$
r = cor(x_1, x_2) = \frac{ \frac{1}{N} \sum_{i=1}^n (x_{1i} - \overline{x_{1}}) (x_{2i} - \overline{x_{2}}) }{ \sqrt{\frac{1}{N} \sum_{i=1}^n (x_{1i} - \overline{x_{1}})^2 (x_{2i} - \overline{x_{2}})^2} } 
$$

The Pearson correlation works well with linear relationship, but poorly with non-linear relationships and is sensitive to outliers. Also transforming one of the variables affects the correlation:

```{r}
#| code-fold: true
A = runif(1000, -6, 6)
B = plogis(A*3.5)
par(mfrow = c(1, 2))
plot(B, A)
text(x = 0.6, y = -4, paste0("Pearson: ", round(cor(A, B, method = "pearson"), 3)))
plot(log(B), A)
text(x = -12, y = 0, paste0("Pearson: ", round(cor(A, log(B), method = "pearson"), 3)))
```

The correlation factor for the untransformed data is 0.9 but they have a perfect relationship.

**Rank correlation factors**

Idea: Arranging the data following their order and using their rank 1...n for x und y, respectively. There two different rank correlation factors:

-   Spearman: calculate Pearson based on ranks

-   Kendall: counts the number of data pairs that point in the same direction

```{r}
cor(A, B)
cor(order(A), order(B)) # Spearman
cor(A, B, method = "spearman") # Spearman
cor(A, B, method = "kendall")
```

**Example:**

```{r}
#| warning: false
cor(airquality$Solar.R, airquality$Ozone, use = "complete.obs") # pearson = default
cor(airquality$Solar.R, airquality$Ozone, use = "complete.obs", method = "spearman")

# pairs plot: correlates all variables to each other
plot(airquality)
pairs(airquality) #the same

# you can change what is plotted in upper and lower panel:
# copy function from help
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y, use = "complete.obs")) ### complete.obs must be added manually
  txt <- format(c(r, 0.123456789), digits = digits)[1]
  txt <- paste0(prefix, txt)
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(airquality, lower.panel = panel.smooth, upper.panel = panel.cor)

```

::: {.callout-warning appearance="default"}
Descriptive statistics characterize properties of the data without providing any test or statement of probability.
:::
