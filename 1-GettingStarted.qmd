---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Getting Started with R

## Your R System

In this course, we work with the combination of R + RStudio.

-   R is the calculation engine that performs the computations.
-   RStudio is the editor that helps you sending inputs to R and collect outputs.

Make sure you have a recent version of R + RStudio installed on your computer. I think [this page](https://r-coder.com/install-r/) covers all possible questions about how to install this combination on the different OS. 

::: column-margin

Alternatively, you could also use the [Rstudio Cloud](https://rstudio.cloud/), however, we recommend local RStudio setup.

:::

### First steps in R and Rstudio

If you have never used RStudio, <a href="https://videocampus.sachsen.de/video/First-steps-with-R-and-RStudio/528e5d164219f2d07e32a51736c3f7d1" target="_blank" rel="noopener">here</a> is a good video introducing the basic system and how R and RStudio interact. Alternatively, here is a video about R for Ecologists. The two videos give you a first orientation about the principles of working with the two programs:

{{< video https://youtu.be/dPLbyWXEG_E >}}


## Libraries that you will need

The R engine comes with a number of base functions, but one of the great things about R is that you can extend these base functions by libraries that can be programmed by anyone. In principle, you can install libraries from any website or file. In practice, however, most commonly used libraries are distributed via two major repositories. For statistical methods, this is **CRAN**, and for bioinformatics, this is **Bioconductor**.

::: {.callout-tip collapse="true"}
#### Click to see more on installing libraries in R

To install a package from a library, use the command

```{r chunk_chapter2_0, eval=FALSE, purl=FALSE}
install.packages(LIBRARY)
```

Exchange "LIBRARY" with the name of the library you want to install. The default is to search the package in CRAN, but you can specify other repositories or file locations in the function. For Windows / Mac, R should work out of the box. For other UNIX based systems, may also need to install

```         
build-essential
gfortran
libmagick++-dev
r-base-dev
cmake
```

If you are new to installing packages on Debian / Ubuntu, etc., type the following:

```         
sudo apt update && sudo apt install -y --install-recommends build-essential gfortran libmagick++-dev r-base-dev cmake
```
:::

In this book, we will often use data sets from the `EcoData`{.R} package, which is not on CRAN, but on a GitHub page. To install the package, if you don't have the devtools package installed already, first install devtools from CRAN by running

```{r, eval=FALSE}
install.packages("devtools")
```

Then install the EcoData package via

```{r chunk_chapter2_2, eval=FALSE}
devtools::install_github(repo = "TheoreticalEcology/EcoData",
                         dependencies = T, build_vignettes = T)
```

For your convenience, the EcoData installation also forces the installation of most of the packages needed in this book, so this may take a while. If you want to load only the EcoData package, or if you encounter problems during the install, set `dependencies = F, build_vignettes = F`.



## Data manipulation in R {#sec-datamanipulation}

R works like a calculator:

```{r}
2+2
5*4
2^2
```

We can also use functions that perform specific calculations:

```{r}
sqrt(4)
sum(c(2,2))
```

::: column-margin
`c(...)` is a function to create a vector of scalar values (single values). Most functions in R can work on scalars, vectors, and even sometimes on matrices (two-dimensional data structures).
:::

We can assign values/data to variables:

```{r}
object.name <- 1
```

Note that both operators '\<-' or "=" work. Functions in R (e.g. `sum()`, `mean()`, etc.) have arguments that control/change their behavior and are also used to pass the data to the function:

```{r}
mean(x = c(2, 2))
```

::: column-margin

A list and description of all arguments can be found in the help of a function (which can be accessed via `?mean` or if you place the cursor on the function and press F1)
:::

### Data types and data structures

There are four important data types in R (there are more but we focus on these 5):

-   Numeric: 1, 2, 3, 4

-   Logical: TRUE or FALSE

-   Characters: "A", "B",...

-   Factors which are characters but we have to tell R explicitly that they are factors

-   Not a number: NA, NaN (empty value)

Based on the data types we can build data structures which contain either only specific data types or a mixture of data types:

-   Vector: Several values of **one** data type, can be created with the `c` function:

    ```{r}
    #| eval: false
    c(5, 3, 5, 6) # numeric vector
    c(TRUE, TRUE, FALSE, TRUE) # logical vector
    c("A", "B", "C") # character vector
    as.factor(c("A", "B", "C")) # factor vector
    ```

-   Matrix: two-dimensional data structure of **one** data type, can be created with the `matrix` function (we can pass a vector to the matrix function and tell it via arguments how the matrix should be constructed):

    ```{r}
    matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2)
    ```

-   Data.frame: Often our data has variables of different types which makes a matrix unsuitable data structure. Data.frames can handle different data types and is organized in columns (one column = one variables) and can be created with the `data.frame` function:

    ```{r}
    data.frame(A = c(1, 2, 3), B = c("A", "B", "C"), C = c(TRUE, FALSE, FALSE))
    ```

### Data manipulation

A vector is a one dimensional data structure and we can access the values by using `[ ]`:

```{r}
vec = c(1, 2, 3, 4, 5)
vec[1] # access first element
vec[5] # access last element
```

A data.frame is a two dimensional data structure. Let's define a data.frame from two vectors:

```{r}
df = data.frame(
  x = c(2,2,2,3,2,2,1), #add column named x with 2 elements
  y = c(4,5,5,4,5,3,5) #add a second column named y
)
#Let's see how this looks like:
df
```

Access parts of the data.frame:

```{r}
df[1,2] #get element in row 1, column 1
df[7,1] #get element in row 7, column 1
df[2,] #get row 2
df[,2] #get column 2
#or use the $ sign to access columns:
df$y
df[2:4,1:2] #get rows 2 to 4 and only columns 1 and 2
```

We can also set filters:

```{r}
df[df$x > 2,] # show only data where x is larger than 2
df[df$y == 5,] #show only data where y equals 5
df[df$y == 5 & df$x == 1,] #show only data where y equals 5 AND x equals 1
df[df$y == 5 | df$x == 3,] #show data where y equals 5 OR x equals 3
```

::: {.callout-tip appearance="default" collapse="true"}
## Logical operators

| Operators | Meaning               |
|-----------|-----------------------|
| \<        | Less than             |
| \<=       | Less than or equal to |
| \>        | More than             |
| \>=       | More than or equal to |
| ==        | Equal to              |
| !=        | Not equal to          |
| !a        | Not a                 |
| a\|b      | a or b                |
| a & b     | a and b               |
| isTRUE(a) | Test if a is true     |

: Logical operators in R
:::

Add an additional column with NA values:

```{r}
df$NAs = NA #fills up a new column named NAs with all NA values
df
```

### Data analysis workflow

This is a simple version of what you're going to learn during this course:

1.  Let's say we measured the size of individuals in two different treatment groups

    ```{r}
    group1 = c(2,2,2,3,2,2,1.1)
    group2 = c(4,5,5,4,5,3,5.1) 

    class(group2)
    ```

2.  Descriptive statistics and visualization

    ```{r}
    mean(group1)
    mean(group2)

    boxplot(group1, group2)
    ```

3.  Testing for differences. Question: Is there a difference between group1 and group2?

    ```{r}
    t.test(group1, group2)
    ```

4.  Interpretation of the results. Individuals in Group 2 were larger than those in group 1 (t test, t = -6.62, p \< 0.0001)

In the course we will work a lot with datasets implemented in R or in R packages which can be accessed via their name:

```{r}
dat = airquality
head(dat)

```

## Exercises

In this exercise you will practice:

-   to set up your working environment (project) in RStudio
-   to write R scripts and execute code
-   to access data in dataframes (the most important data class in R)
-   to query (filter) dataframes
-   to spot typical mistakes in R code

**Please carefully follow the instructions for setting up your working environment and ask other participants or use the forum if you face any problems.**

### Setting up the working environment in RStudio

Your first task is to open RStudio and create a new project for the course.

-   Click the 'File' button in the menu, then 'New Project' (or the second icon in the bar below the menu "Create a project").
-   Click "New Directory".
-   Click "New Project".
-   Type in the name of the directory to store your project, e.g. "IntroStatsR".
-   "Browse" to the folder on your computer where you want to have your project created.
-   Click the "Create Project" button.

```{r fig, echo=FALSE, fig.cap="", out.width = '90%'}
knitr::include_graphics("resources/new_project.png")
```

For all exercises during this week, use this project! You can open it via the file system as follows (please try this out now):

-   (Exit RStudio).
-   Navigate to the directory where you created your project.
-   Double click on the "IntroStatsR.Rproj" file in that directory.

You should now be back to RStudio in your project.

In the directory of the R project, generate a folder "scripts" and a folder "data". You can do this either in the file directory or in RStudio. For the latter:

-   Go to the "Files" panel in R Studio (bottom right panel).
-   Click the icon "New Folder" in the upper left corner.
-   Enter the folder name.
-   The new folder is now visible in your project directory.

The idea is that you will create an R script for each exercise and save all these files in the scripts folder. You can do this as follows:

-   Click the "File" button in the menu, then "New File" and "R Script" (or the first icon in the bar below the menu and then "R Script" in the dropdown menu).
-   Click the "File" button in the menu, then "Save" (or the "Save" icon in the menu).
-   Navigate to your scripts folder.
-   Enter the file name, e.g. "Exercise_01.R".
-   Save the file.

### A few hints before you can start

Remember the different ways of running code:

-   click the "Run" button in the top right corner of the top left panel (code editor) OR
-   hit "Ctrl"+"Enter" (MAC: "Cmd"+"Return")

RStudio will then run

-   the code that is currently marked OR
-   the line of code where the text cursor currently is (simply click into that line)

If you face any problems with executing the code, check the following:

-   all brackets closed?
-   capital letters instead of small letters?
-   comma is missing?
-   if RStudio shows red attention signs (next to the code line number), take it seriously
-   do you see a "+" (instead of a "\>") in the console? stop executions with "esc" key and then try again.

Have a look at the **shortcuts** by clicking "Tools" and than "Keybord Shortcuts Help"!!

### Getting an overview of a dataset

We work with the airquality dataset:

```{r}
dat = airquality
```

Copy the code into your code editor and execute it.

Before working with a dataset, you should always get an overview of it. Helpful functions for this are:

-   `str()`
-   `View()`
-   `head()` and `tail()`

Try out these functions and **provide answers to the following questions on elearning-extern** [("01_Test for Exercise in R")](https://elearning.uni-regensburg.de/mod/quiz/view.php?id=2046670):

::: {.callout-caution icon="false"}
#### Question

1.  What is the most common atomic class in the airquality dataset?
2.  How many rows does the dataset have?
3.  What is the last value in the column "Temp"?
:::

::: {.callout-tip collapse="true" appearance="minimal" icon="false"}
#### Solution

What is the most common atomic class in the airquality dataset?

-   integer
-   function `str()` helps to find this out

How many rows does the dataset have?

-   153
-   this is easiest to see when using the function `str(dat)`
-   `dim(dat)` or `nrow(dat)` give the same information

What is the last value in the column "Temp"?

-   68
-   `tail(dat)` helps to find this out very fast

To see all this, run

```{r}
#| eval: false
dat = airquality
View(dat)
str(dat)
head(dat)
tail(dat)
```
:::

### Accessing rows and columns of a data frame

You have seen how you can use squared brackets `[ ]` and the dollar sign `$` to extract parts of your data. Some people find this confusing, so let's repeat the basic concepts:

-   squared brackets are used as follows: data\[rowNumber, columnNumber\]
-   the dollar sign helps to extract colums with their name (good for readability): data\$columnName
-   this syntax can also be used to assign new columns, simply use a new column name and the assign operator: `data$newColName <-`)

The following lines of code assess parts of the data frame. Try out what they do and sort the code lines and their meaning on **elearning-extern**.

Hint: Some of the code lines actually do the same; chose the preferred way in these cases.

::: {.callout-caution icon="false"}
#### Question

Which of the following commands

```{r eval = F}
dat[2, ]
dat[, 2]
dat[, 1]
dat$Ozone
new = dat[, 3] + dat[, 4]
dat$new = dat[, 3] + dat[, 4]
dat$NAs = NA
NA -> dat$NAs 
```

will get you

-   get the second row
-   get column Ozone
-   generate a new column with NA's
-   calculate the sum of columns 3 and 4 and assign to a new column
:::

::: {.callout-tip collapse="true" appearance="minimal" icon="false"}
#### Solution

get second row

-   dat\[2, \] is correct
-   dat\[, 2\] gives the second column

get column Ozone

-   dat\$Ozone is the best option
-   dat\[, 1\] gives the same result, but is much harder to understand later on

generate a new column with NA's

-   dat\$NAs = NA is the best option
-   NA -\> dat\$NAs does the same, but the preferred syntax in R is having the new variable on the left hand side (the arrow should face to the left not right)

calculate the sum of columns 3 and 4 and assign to a new column

-   dat\$new = dat\[, 3\] + dat\[, 4\] is correct
-   new = dat\[, 3\] + dat\[, 4\] creates a new object but not a new column in the existing data frame
:::

### Filtering data

To use the data, you must also be able to filter it. For example, we may be interested in hot days in July and August only. Hot days are typically defined as days with a temperature equal or \> 30°C (or 86°F as in the dataset here). Imagine, your colleague tried to query the data accordingly. She/he also found a mistake in each of the first 4 rows and wants to exclude these, but she/he is very new to R and made a few common errors in the following code:

```{r eval = F}
# Return only rows where the temperature is exactly is 86
dat[dat$Temp = 86, ]

# Return only rows where the temperature is equal or larger than 86
dat[dat$Temp >= 86]

# Exclude rows 1 through 4
dat[-1:4, ]

# Return only rows for the months 7 or 8
dat[dat$Month == 7 | 8, ]
```

::: {.callout-caution icon="false"}
#### Question

Can you fix his/her mistakes? These hints may help you:

-   rows or columns can be excluded, if the numbers are given as negative numbers
-   == means "equals"
-   & means "AND"
-   "\|" means "OR" (press "AltGr"+"\<" to produce \|, or "option"+"7" on MacOS)
-   executing the erroneous code may help you to spot the problem
-   run parts of the code if you don't understand what the code does
-   the last question is a bit trickier, no problem if you don't find a solution
:::

::: {.callout-tip collapse="true" appearance="minimal" icon="false"}
#### Solution

This is the corrected code:

```{r eval = F}
# Return only rows where the temperature is exactly is 86
dat[dat$Temp == 86, ]

# Return only rows where the temperature is equal or larger than 86
dat[dat$Temp >= 86, ]

# Exclude rows 1 through 4
dat[-(1:4), ]

# Return only rows for the months 7 or 8
dat[dat$Month == 7 | dat$Month == 8, ]
dat[dat$Month %in% 7:8, ] # alternative expression
```
:::

### Last task - check if the EcoData package works for you

During the course, we will use some datasets that we compiled in the $EcoData$ package. You should have installed this package already(see instructions above). To check if this works, run

```{r eval = F}
library(EcoData)
soep
```

If you see some data being displayed in your console, everything is fine.
