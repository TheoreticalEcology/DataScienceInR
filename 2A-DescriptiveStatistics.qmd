---
output: html_document
editor_options:
  chunk_output_type: console
---

```{r, include=FALSE}
set.seed(42)
```

# Plotting and describing data

Before knowing how to plot something, you should know what you want to plot:

| Scenario | Which plot | R command |
|----|----|----|
| Numeric | Histogram or boxplot | `hist()` and`boxplot` |
| Numeric with numeric | Scatterplot | `plot` |
| Numeric with categorical | Boxplot | `boxplot(numeric~categorical)` |
| Categorical with categorical | mosaicplot or grouped barplot | `mosaicplot(table(categorical, categorical))` or `barplot(data, beside=TRUE)` |

::: column-margin
Here is a [website](https://www.data-to-viz.com/) with a decision tree about when to choose which plot.
:::

Once you know what you want to plot, there are lot of websites that will show you the respective R code. One important consideration, however: there are at least two popular ways of doing R graphis:

-   base R: The `graphics` package is automatically shipped with the R language and is the default plotting package in R. It produces basic scientific plots (no unnecessary information)
-   \`ggplot2\` is a newer plotting package where the default plots are more visually appealling, it belongs to the "tidyverse", which is a group of packages with a different grammar for coding in R.

<!-- {{< video https://youtu.be/maFw5qXyCwg >}} -->

<!-- {{< video https://youtu.be/HeqHMM4ziXA >}} -->

You should probably get to know both types, but we recommend to start with base R. We are just saying this so that you are not confused, because a lot of the examples will also show you ggplot code. Here some useful links:

-   A few [simple graphs in base R](https://www.statmethods.net/graphs/index.html).
-   R code for the [most common graphics](https://www.r-graph-gallery.com/index.html) (with a ggplot2 tendecy).
-   R code [graph tutorials](https://r-coder.com/r-graphs/).

::: column-margin
Thinking about how to do [good figures](https://www.cedricscherer.com/2019/05/17/the-evolution-of-a-ggplot-ep.-1/)
:::

## Plotting ONE variable

### Numerical variable - Histogram and Boxplot

-   The histogram plots the frequency of the values of a numerical variable with bins (otherwise each unique value will appear only once, the range will be cut in n elements). The number of bins is automatically inferred by the function but can be also changed by the user
-   The boxplot plots the distribution of a numerical variable based on summary statistics (the quantiles). The boxplot is particular useful for comparing/contrasting a numerical with a categorical variable (see below)

::: column-margin
In the base R code we introduced `par()` before plotting to create a panel with the plots side by side. In ggplot2 this is done with the package `ggpubr`.
:::

::: panel-tabset
### Base R

```{r}
par(mfrow = c(1,2)) # number of plots, one row, two columns
hist(iris$Sepal.Length, 
     main = "Histogram", # title
     xlab = "Sepal.Length", 
     ylab = "Frequency",
     las = 1) # rotation of x and y values (las = 1, all of them should be horizontal)

boxplot(iris$Sepal.Length,      
        main = "Boxplot", # title
        ylab = "Values")
```

### ggplot2

```{r}
library(ggplot2)
library(ggpubr)

plt1 = 
  ggplot(iris, aes(x = Sepal.Length)) +
    geom_histogram() +
    ggtitle("Histogram") +
    xlab("Sepal.Length") +
    ylab("Frequency") +
    theme_bw() # scientific theme (white background)

plt2 = 
  ggplot(iris, aes(y = Sepal.Length)) +
    geom_boxplot() +
      ggtitle("Boxplot") +
      ylab("Values") +
      theme_bw() 


ggarrange(plt1, plt2, ncol = 2L, nrow = 1L)

```
:::

### Categorical variable - Barplot

```{r}
str(mtcars)
counts = table(mtcars$cyl)
counts
```

::: panel-tabset
### Base R

```{r}
barplot(counts, 
        main = "Barplot of Cyl",
        ylab = "Number of occurrences",
        xlab = "Cyl levels",
        col = "#4488AA")

```

### ggplot2

```{r}
ggplot(mtcars, aes(x = cyl)) +
  geom_bar(fill = "#4488AA") +
    ggtitle("Barplot of Cyl") +
    xlab("Number of occurrences") +
    ylab("Cyl levels") +
    theme_bw()
```
:::

## Plotting TWO variables

The general idea of plotting is to look for correlations / associations between variables, i.e. is there a non-random pattern between the two variables.

### Numerical vs numerical variable - Scatterplot

::: panel-tabset
### Base R

```{r}
# Scatterplot
par(mfrow = c(1,2))
plot(airquality$Solar.R, airquality$Ozone)

# plot(Ozone ~ Solar.R, data = airquality) #the same

# different symbol for each month
plot(Ozone ~ Solar.R, data = airquality, pch = Month)

```

We can also add other objects such as lines to our existing plot:

```{r}
par(mfrow = c(1,1))
plot(Ozone ~ Solar.R, data = airquality)
abline(h = 50)

```

### ggplot2

```{r}
plt1 = ggplot(airquality, aes(x = Solar.R, y = Ozone)) +
        geom_point() +
        theme_bw()

plt2 = ggplot(airquality, aes(x = Solar.R, y = Ozone)) +
        geom_point(shape = airquality$Month) +
        theme_bw()

ggarrange(plt1, plt2, ncol = 2L, nrow = 1L)
```

We can also add other objects such as lines to our existing plot:

```{r}
ggplot(airquality, aes(x = Solar.R, y = Ozone)) +
  geom_point(shape = airquality$Month) +
  geom_abline(intercept = 50, slope = 0) +
    theme_bw()
```
:::

### Categorical vs numerical variable - Boxplot

Often we have a numerical variable (e.g. weight/fitness) and a categorical vairable that tells us the group of the observation (e.g. control or treatment). To compare visually now the distributions of the numerical variable between the levels of the grouping variable, we can use a boxplot

::: panel-tabset
### Base R

```{r}
boxplot(mpg ~ cyl, mtcars, notch=TRUE) # formula notation
# boxplot(x = mtcars$cyl, y = mtcars$mpg) # the same

```

### ggplot2

```{r}
ggplot(mtcars, aes(y = mpg, group = cyl)) +
  geom_boxplot(notch=TRUE) +
    theme_bw()
```
:::
